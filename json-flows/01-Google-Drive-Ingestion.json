{
  "nodes": [
    {
      "parameters": {
        "operation": "download",
        "fileId": "={{ $json.id }}",
        "options": {
          "binaryPropertyName": "data",
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "3fc75970-9b7d-47d8-a282-d2fb43a5da6a",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -32,
        1616
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "agQVZargPko1jDSc",
          "name": "craig@theidudes.com"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// SET ARIZONA TIME - Place this Code node at the start of workflow\n// Sets current time in America/Phoenix timezone for consistent timestamps\n\nconst now = new Date();\n\n// Convert to Arizona/Phoenix time (MST - no DST)\nconst arizonaTime = new Date(now.toLocaleString('en-US', { \n  timeZone: 'America/Phoenix' \n}));\n\n// Format as ISO string for consistency\nconst arizonaISO = arizonaTime.toISOString();\n\n// Create formatted date/time strings\nconst formatted = {\n  iso: arizonaISO,\n  date: arizonaTime.toLocaleDateString('en-US', { timeZone: 'America/Phoenix' }),\n  time: arizonaTime.toLocaleTimeString('en-US', { timeZone: 'America/Phoenix' }),\n  datetime: arizonaTime.toLocaleString('en-US', { timeZone: 'America/Phoenix' }),\n  year: arizonaTime.getFullYear(),\n  month: arizonaTime.getMonth() + 1,\n  day: arizonaTime.getDate(),\n  hour: arizonaTime.getHours(),\n  minute: arizonaTime.getMinutes(),\n  second: arizonaTime.getSeconds(),\n  timestamp: arizonaTime.getTime(),\n  timezone: 'America/Phoenix',\n  offset: 'MST (UTC-7)'\n};\n\n// Log for debugging\nconsole.log('Arizona Time Set:', formatted.datetime);\nconsole.log('ISO Format:', formatted.iso);\n\n// Pass through original input data with arizona_time added\nconst input = $input.first().json;\n\nreturn [{\n  json: {\n    ...input,\n    arizona_time: formatted\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        1616
      ],
      "id": "88abcbc7-57da-468b-aca7-42eeeb83d5fe",
      "name": "setTime"
    },
    {
      "parameters": {
        "jsCode": "const extractData = $('extractText').first().json;\n  const sqlResult = $('upsertToDB').first().json;\n\n  return [{\n    json: {\n      pageContent: extractData.pageContent,\n      metadata: {\n        filename: extractData.metadata.filename,\n        file_type: extractData.metadata.file_type,\n        file_size: extractData.metadata.file_size,\n        source: extractData.metadata.source,\n        timestamp: extractData.metadata.timestamp,\n        upload_source: extractData.metadata.upload_source,\n        drive_file_id: extractData.metadata.drive_file_id,\n        document_id: sqlResult.id  // Add the DB ID here\n      }\n    }\n  }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        1568
      ],
      "id": "2f442375-a161-4b28-85e2-d85461899d9d",
      "name": "map1"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $('map1').item.json.pageContent }}",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "filename",
                "value": "={{ $('map1').first().json.metadata.filename }}"
              },
              {
                "name": "source",
                "value": "={{ $('map1').first().json.metadata.source }}"
              },
              {
                "name": "file_type",
                "value": "={{ $('map1').first().json.metadata.file_type }}"
              },
              {
                "name": "file_size",
                "value": "={{ $('map1').first().json.metadata.file_size }}"
              },
              {
                "name": "timestamp",
                "value": "={{ $('map1').first().json.metadata.timestamp }}"
              },
              {
                "name": "document_id",
                "value": "={{ $('map1').first().json.metadata.document_id }}"
              },
              {
                "name": "drive_file_id",
                "value": "={{ $('map1').first().json.metadata.drive_file_id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        2048,
        1840
      ],
      "id": "d9c619bc-efad-46f0-8660-df21ad97f638",
      "name": "DocLoader1"
    },
    {
      "parameters": {
        "chunkSize": 10000,
        "chunkOverlap": 200,
        "options": {
          "splitCode": "markdown"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2128,
        2048
      ],
      "id": "68db66fa-5983-48b8-b963-5993a1a70a8c",
      "name": "Text Splitter1"
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1536,
          "batchSize": 120
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1920,
        1840
      ],
      "id": "1a93cefb-4083-48ef-9050-259af7a631f2",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "core.document_embeddings",
        "embeddingBatchSize": 120,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        1952,
        1616
      ],
      "id": "d4e23438-95f6-4376-bd17-266f860837c0",
      "name": "PGVector Store1",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// FINAL VERSION - CLOSE DB CONNECTIONS NODE FOR n8n\n// Copy this entire code into a Code node (JavaScript) at the end of your workflow\n// This version works without external modules\n\n// 1. Clean up any global connection objects\nconst globalCleanup = () => {\n  const targets = ['pgPool', 'pgClient', 'dbConn', 'redisClient'];\n  let cleaned = 0;\n\n  targets.forEach(name => {\n    if (global[name]) {\n      try {\n        delete global[name];\n        cleaned++;\n      } catch (e) {\n        // Silent fail\n      }\n    }\n  });\n\n  return cleaned;\n};\n\n// 2. Generate cleanup report\nconst generateReport = (cleaned) => {\n  return {\n    workflow: $workflow.name || 'Unknown',\n    workflowId: $workflow.id,\n    execution: $execution.id,\n    timestamp: new Date().toISOString(),\n    connectionsCleared: cleaned,\n    status: 'success'\n  };\n};\n\n// 3. Execute cleanup\nconst cleaned = globalCleanup();\nconst report = generateReport(cleaned);\n\n// 4. Log the results\nconsole.log('ðŸ§¹ Cleanup Complete:', JSON.stringify(report, null, 2));\n\n// 5. Pass through the data with cleanup metadata\nreturn $input.all().map(item => ({\n  ...item,\n  json: {\n    ...item.json,\n    _cleanup: report\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2656,
        1712
      ],
      "id": "63e69b9e-b80a-4828-a6e1-d7cf09ee479e",
      "name": "Cleanup Connections1"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        192,
        1616
      ],
      "id": "f94d141f-63a9-416d-a6cd-fa120af06b3c",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "const item = $input.first();\n  const content = item.json?.data || '';\n  const prevNode = $('Download File').first();\n\n  const filename = prevNode.json?.name || 'unknown';\n  const file_type = prevNode.json?.mimeType || 'text/plain';\n  const file_size = prevNode.json?.size ? parseInt(prevNode.json.size) : content.length;\n  const drive_file_id = prevNode.json?.id || null;\n\n  return [{\n    json: {\n      pageContent: content,\n      metadata: {\n        filename: filename,\n        file_type: file_type,\n        file_size: file_size,\n        source: 'google_drive',\n        timestamp: new Date().toISOString(),\n        upload_source: 'google_drive',\n        drive_file_id: drive_file_id\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        1616
      ],
      "id": "651c5e41-b292-4062-96a6-876d5930ee58",
      "name": "extractText"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.documents (filename, content, file_size, file_type, metadata)\nSELECT\n  (j->'metadata'->>'filename')::text,\n  (j->>'pageContent')::text,\n  COALESCE(NULLIF(j->'metadata'->>'file_size','')::bigint, 0),\n  (j->'metadata'->>'file_type')::text,\n  COALESCE((j->'metadata')::jsonb, '{}'::jsonb)\nFROM (SELECT $1::jsonb AS j) payload\nON CONFLICT (filename)\nDO UPDATE SET\n  content = EXCLUDED.content,\n  file_size = EXCLUDED.file_size,\n  file_type = EXCLUDED.file_type,\n  metadata = EXCLUDED.metadata,\n  updated_at = NOW() AT TIME ZONE 'America/Phoenix'\nRETURNING id, filename, created_at, updated_at;\n",
        "options": {
          "queryReplacement": "={{ JSON.stringify($json) }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        640,
        1616
      ],
      "id": "1b752627-f94d-4d15-a2b0-9de39384dc9e",
      "name": "upsertToDB",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "efb2e809-96e4-4608-bfc7-abc510c5b36a",
              "leftValue": "={{ $json.hash }} === {{ $('Calculate Hash').item.json.content_hash }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1216,
        1600
      ],
      "id": "8c74a2d4-f1ff-4601-b175-8eee08b6f762",
      "name": "If:HasChange"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT metadata->>'content_hash' as hash\n  FROM core.documents\n  WHERE id = '{{ $json.document_id }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1056,
        1616
      ],
      "id": "9a56cbf4-13f7-44f6-8c05-6067220345c4",
      "name": "checkHash",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const sqlResult = $input.first().json;\n  const extractData = $('extractText').first().json;\n\n  if (!extractData?.pageContent || extractData.pageContent.length === 0) {\n    throw new Error('Cannot vectorize empty document');\n  }\n\n  const crypto = require('crypto');\n  const normalizedContent = extractData.pageContent.normalize('NFC');\n  const contentHash = crypto.createHash('sha256')\n    .update(normalizedContent, 'utf8')\n    .digest('hex');\n\n  const wasUpdated = sqlResult.updated_at !== sqlResult.created_at;\n\n  return [{\n    json: {\n      document_id: sqlResult.id,\n      content_hash: contentHash,\n      was_updated: wasUpdated,\n      pageContent: extractData.pageContent,\n      metadata: extractData.metadata\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        848,
        1616
      ],
      "id": "3742b1cb-f348-4c0f-b8e3-64ffc9136b73",
      "name": "Calculate Hash"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM core.document_embeddings WHERE document_id = '{{ $('Calculate Hash').item.json.document_id \n  }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1456,
        1456
      ],
      "id": "5130557e-7ec0-4d7e-9676-33139e471430",
      "name": "deleteOldEmbedding",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": " UPDATE core.documents\n  SET metadata = metadata || jsonb_build_object('content_hash', '{{ $('Calculate Hash').item.json.content_hash }}')\n  WHERE id = '{{ $('Calculate Hash').item.json.document_id }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1584,
        1328
      ],
      "id": "59a23e0f-6c9d-472f-a956-18fba88e2dc1",
      "name": "UpdateHash",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -736,
        1600
      ],
      "id": "931a947f-42df-4ac1-991b-0e22bfda25b5",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "0ADNv-WFOlNroUk9PVA",
            "mode": "id"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -528,
        1600
      ],
      "id": "c97a8026-9f31-484c-ab86-fd10ddf21bdc",
      "name": "Search files and folders",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "agQVZargPko1jDSc",
          "name": "craig@theidudes.com"
        }
      }
    }
  ],
  "connections": {
    "Download File": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setTime": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "map1": {
      "main": [
        [
          {
            "node": "PGVector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DocLoader1": {
      "ai_document": [
        [
          {
            "node": "PGVector Store1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "DocLoader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "PGVector Store1": {
      "main": [
        [
          {
            "node": "Cleanup Connections1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "extractText",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extractText": {
      "main": [
        [
          {
            "node": "upsertToDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "upsertToDB": {
      "main": [
        [
          {
            "node": "Calculate Hash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If:HasChange": {
      "main": [
        [],
        [
          {
            "node": "deleteOldEmbedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "checkHash": {
      "main": [
        [
          {
            "node": "If:HasChange",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Hash": {
      "main": [
        [
          {
            "node": "checkHash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "deleteOldEmbedding": {
      "main": [
        [
          {
            "node": "UpdateHash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UpdateHash": {
      "main": [
        [
          {
            "node": "map1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "setTime",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}