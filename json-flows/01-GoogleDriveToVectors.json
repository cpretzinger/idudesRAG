{
  "nodes": [
    {
      "parameters": {
        "resource": "fileFolder",
        "limit": 1,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1P9vCe0flPbImHpcimMcNahQT7YN25M0_",
            "mode": "list",
            "cachedResultName": "RAG-Pending",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1P9vCe0flPbImHpcimMcNahQT7YN25M0_"
          },
          "whatToSearch": "files"
        },
        "options": {}
      },
      "id": "eaac9648-2f2e-4349-9cf4-4ebcb6ba4d3a",
      "name": "GetPendingFile",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3584,
        1536
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "agQVZargPko1jDSc",
          "name": "craig@theidudes.com"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const OPENAI_API_KEY = $env.OPENAI_API_KEY;\n\nconst items = $input.all();\nconst content_type = items.find(i => i.json?.content_type)?.json?.content_type || 'episode';\n\n  let meta = items.find(i => i.json?.file_id && i.json?.filename)?.json;\n\n  if (!meta) {\n    const pkg = $items('ExtractAndPackage', 0, 0)?.[0]?.json;\n    if (pkg?.file_id && pkg?.filename) meta = pkg;\n  }\n  if (!meta) {\n    throw new Error('Missing file metadata. Ensure ExtractAndPackage connects to ProcessDocument.');\n  }\n\n  const file_id = meta.file_id;\n  const filename = meta.filename;\n  const mime_type = meta.mime_type || 'text/plain';\n\n  let content = '';\n  for (const it of items) {\n    if (typeof it.json?.data === 'string') { content = it.json.data; break; }\n    if (typeof it.json?.content === 'string') { content = it.json.content; break; }\n    if (typeof it.json === 'string') { content = it.json; break; }\n    if (it.binary && Object.keys(it.binary).length) {\n      const [binKey] = Object.keys(it.binary);\n      const b64 = it.binary[binKey]?.data;\n      if (b64) { content = Buffer.from(b64, 'base64').toString('utf-8'); break; }\n    }\n  }\n  if (!content || content.length < 50) {\n    throw new Error('No content found for file: ' + filename);\n  }\n\n  function finalClean(s) {\n    return String(s)\n      .replace(/\\r\\n?/g, '\\n')\n      .replace(/\\t/g, ' ')\n      .replace(/\\u0000/g, '')\n      .normalize('NFKD').replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/\\u00A0/g, ' ')\n      .replace(/\\u2018|\\u2019|\\u201A|\\u2032/g, \"'\")\n      .replace(/\\u201C|\\u201D|\\u201E|\\u2033/g, '\"')\n      .replace(/\\u2014/g, '-')\n      .replace(/\\u2013/g, '-')\n      .replace(/\\u2026/g, '...')\n      .replace(/[ \\t]+/g, ' ')\n      .replace(/\\n{3,}/g, '\\n\\n')\n      .trim();\n  }\n  const cleanedText = finalClean(content);\n  if (cleanedText.length < 50) throw new Error('Cleaned text too short');\n\n  const CHUNK_SIZE = 900;\n  const OVERLAP = 150;\n  const chunks = [];\n  let start = 0;\n  while (start < cleanedText.length) {\n    let end = Math.min(start + CHUNK_SIZE, cleanedText.length);\n    if (end < cleanedText.length) {\n      const window = cleanedText.slice(start, end);\n      const breaks = [window.lastIndexOf('\\n\\n'), window.lastIndexOf('\\n'), window.lastIndexOf('. '),\n  window.lastIndexOf('! '), window.lastIndexOf('? ')];\n      const best = Math.max(...breaks);\n      if (best > CHUNK_SIZE * 0.5) end = start + best + 1;\n    }\n    const txt = cleanedText.slice(start, end).trim();\n    if (txt) chunks.push(txt);\n    if (end >= cleanedText.length) break;\n    start = Math.max(0, end - OVERLAP);\n  }\n  if (!chunks.length) throw new Error('No chunks created');\n\n  const t0 = Date.now();\n\n  async function embedBatch(batch) {\n    const res = await this.helpers.httpRequest({\n      method: 'POST',\n      url: 'https://api.openai.com/v1/embeddings',\n      headers: { 'Authorization': 'Bearer ' + OPENAI_API_KEY, 'Content-Type': 'application/json' },\n      body: { input: batch, model: 'text-embedding-3-small' },\n      json: true,\n      timeout: 120000,\n    });\n    return res.data.map(d => d.embedding);\n  }\n\n  const BATCH = 100;\n  const embs = [];\n  for (let i = 0; i < chunks.length; i += BATCH) {\n    const out = await embedBatch.call(this, chunks.slice(i, i + BATCH));\n    embs.push(...out);\n  }\n\n  const duration = Math.floor((Date.now() - t0) / 1000);\n\n  return chunks.map((text, idx) => ({\n    json: {\n      file_id: file_id,\n      filename: filename,\n      file_type: mime_type,\n      file_size: cleanedText.length,\n      chunk_index: idx,\n      text: text,\n      content_type: content_type,\n      chunk_size: text.length,\n      embedding: embs[idx],\n      total_chunks: chunks.length,\n      duration: duration,\n      status: 'completed'\n    }\n  }));\n"
      },
      "id": "de2f4862-6b2e-404d-ac6f-a296e1cc7442",
      "name": "ProcessDocument",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1488,
        1616
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b0fe6b26-3753-4628-a079-9ebf4fe638a1",
              "name": "parentDrive",
              "value": "0AHQT6VYr8_hZUk9PVA",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3808,
        1536
      ],
      "id": "f20342fe-63a7-448c-b582-8c9f717d7155",
      "name": "set parentDrive"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_id }}",
          "mode": "id"
        },
        "options": {
          "binaryPropertyName": "data",
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain",
              "slidesToFormat": "application/pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2912,
        1536
      ],
      "id": "b81eec69-6429-4812-80d4-8dd2f8495449",
      "name": "Download File",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "OtvrT7x8YG4Mrx7n",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.file_pipeline_status (file_id, filename, rag_status, created_at, updated_at)\nVALUES ($1, $2, 'processing', NOW(), NOW())\nON CONFLICT (file_id)\nDO UPDATE SET\n  rag_status = 'processing',\n  updated_at = NOW(),\n  rag_error_message = NULL\nRETURNING *;",
        "options": {
          "queryReplacement": "={{ [$json.file_id, $json.filename] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1392,
        1440
      ],
      "id": "792f07cd-ea75-4127-a417-859cf2ca2158",
      "name": "MarkProcessing",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f2be3db-8be2-4a15-8185-d1634123bd18",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1168,
        1632
      ],
      "id": "cb586c30-29c9-4615-afce-0701315aab97",
      "name": "CheckSuccess"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.embeddings (\n    file_id, filename, chunk_index, text, chunk_size,\n    embedding, file_type, file_size, content_type, created_at, updated_at\n  ) VALUES (\n    $1, $2, $3, $4, $5, $6::vector(1536), $7, $8, $9, NOW(), NOW()\n  )",
        "options": {
          "queryReplacement": "={{ [$json.file_id, $json.filename, $json.chunk_index, $json.text, $json.chunk_size, JSON.stringify($json.embedding), $json.file_type, $json.file_size, $json.content_type] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -816,
        1616
      ],
      "id": "2b7c5c76-4018-4bb7-ade4-5ecf03174d06",
      "name": "InsertEmbedding",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE core.file_pipeline_status\nSET\n  rag_status = 'completed',\n  rag_chunks_count = $2,\n  rag_embedding_count = $2,\n  rag_completed_at = NOW(),\n  updated_at = NOW()\nWHERE file_id = $1\nRETURNING *;",
        "options": {
          "queryReplacement": "={{ [$json.file_id, $json.chunks_count] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -576,
        1680
      ],
      "id": "7eb2d0cf-8afc-42bb-ba1d-0292297f5484",
      "name": "UpdateStatus",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE core.file_pipeline_status\nSET\n  rag_status = 'failed',\n  rag_error_message = $2,\n  updated_at = NOW()\nWHERE file_id = $1\nRETURNING *;",
        "options": {
          "queryReplacement": "={{ [$json.file_id, $json.error] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -736,
        1824
      ],
      "id": "d7726481-f014-47d7-ab6b-0820b4efa13f",
      "name": "MarkFailed",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1nklUnQSA49WWUPg6LVkw4THjj4O5eNMGguQ--eIxyZM",
          "mode": "id",
          "cachedResultName": "RAG-Logger"
        },
        "sheetName": {
          "__rl": true,
          "value": 487287037,
          "mode": "list",
          "cachedResultName": "RAG Processing Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nklUnQSA49WWUPg6LVkw4THjj4O5eNMGguQ--eIxyZM/edit#gid=487287037"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{ $now.toISO() }}",
            "Filename": "={{ $('ProcessDocument').first().json.filename }}",
            "Chunks": "={{ $('ProcessDocument').first().json.total_chunks }}",
            "Status": "failed",
            "Duration": "={{ $('ProcessDocument').first().json.duration }}s",
            "File_ID": "={{ $('ProcessDocument').first().json.file_id }}",
            "Size_bytes": "=0",
            "Error": "={{ $json.error }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Filename",
              "displayName": "Filename",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Chunks",
              "displayName": "Chunks",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "File_ID",
              "displayName": "File_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Size_bytes",
              "displayName": "Size_bytes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Error",
              "displayName": "Error",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "d9891522-9e8c-4d7e-9def-db38ea02290f",
      "name": "FAILED: LogToSheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -288,
        1824
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "V09NdNwlqhTpbBeP",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1nklUnQSA49WWUPg6LVkw4THjj4O5eNMGguQ--eIxyZM",
          "mode": "id",
          "cachedResultName": "RAG-Logger"
        },
        "sheetName": {
          "__rl": true,
          "value": 487287037,
          "mode": "list",
          "cachedResultName": "RAG Processing Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1nklUnQSA49WWUPg6LVkw4THjj4O5eNMGguQ--eIxyZM/edit#gid=487287037"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{ $now.toISO() }}",
            "Filename": "={{ $('ProcessDocument').first().json.filename }}",
            "Chunks": "={{ $('ProcessDocument').first().json.total_chunks }}",
            "Status": "completed",
            "Duration": "={{ $('ProcessDocument').first().json.duration }}s",
            "File_ID": "={{ $('ProcessDocument').first().json.file_id }}",
            "Size_bytes": "={{ $('ProcessDocument').first().json.file_size }}",
            "Error": "\"\""
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Filename",
              "displayName": "Filename",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Chunks",
              "displayName": "Chunks",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "File_ID",
              "displayName": "File_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Size_bytes",
              "displayName": "Size_bytes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Error",
              "displayName": "Error",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "c36b04c4-a681-4ed5-8cf9-80822dd9e6e9",
      "name": "Comleted: LogToSheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -32,
        1616
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "V09NdNwlqhTpbBeP",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2464,
        1440
      ],
      "id": "cc12e1bb-838d-431d-9214-6ac7f98b34e6",
      "name": "ExtractFromFile"
    },
    {
      "parameters": {
        "jsCode": "// ===== SAFELY READ GOOGLE DRIVE FILE JSON =====\nconst fromList = $items('GetPendingFile', 0, 0);\nif (!fromList || !fromList[0] || !fromList[0].json) {\n  throw new Error('GetPendingFile output not available in this branch. Ensure ExtractFromFile → ExtractAndPackage AND GetPendingFile runs this execution.');\n}\nconst driveFile = fromList[0].json; // { id, name, mimeType, ... }\n\nif (!driveFile?.id) {\n  throw new Error('Missing driveFile.id from GetPendingFile');\n}\n\n// ===== GET EXTRACTED TEXT FROM INPUT =====\nconst extracted = $input.first();\nif (!extracted?.json) {\n  throw new Error('ExtractFromFile did not pass JSON to ExtractAndPackage. Check connection Download File → ExtractFromFile → ExtractAndPackage.');\n}\n\nlet raw = '';\nif (typeof extracted.json?.data === 'string') {\n  raw = extracted.json.data;\n} else if (typeof extracted.json === 'string') {\n  raw = extracted.json;\n} else {\n  // If ExtractFromFile ever emits binary\n  if (extracted.binary && Object.keys(extracted.binary).length) {\n    const [binKey] = Object.keys(extracted.binary);\n    const b64 = extracted.binary[binKey]?.data;\n    if (!b64) throw new Error(`Binary key \"${binKey}\" missing .data`);\n    raw = Buffer.from(b64, 'base64').toString('utf-8');\n  } else {\n    const keys = Object.keys(extracted.json);\n    throw new Error(`Unrecognized ExtractFromFile output. Keys: [${keys.join(', ')}]`);\n  }\n}\n\n// ===== TEXT CLEANING (normalize + fix cp1252 junk + dashes + whitespace) =====\nfunction cleanForEmbedding(input) {\n  let s = String(input);\n\n  // normalize newlines/tabs\n  s = s.replace(/\\r\\n?/g, '\\n').replace(/\\t/g, ' ');\n\n  // common Windows-1252 / OCR artifacts\n  const map = new Map([\n    [/\\u2018|\\u2019|\\u201A|\\u2032/g, \"'\"], // smart single quotes/prime\n    [/\\u201C|\\u201D|\\u201E|\\u2033/g, '\"'], // smart double quotes\n    [/\\u2014/g, ' — '],                    // em dash\n    [/\\u2013/g, '-'],                      // en dash\n    [/\\u2026/g, '...'],                    // ellipsis\n    [/\\u00A0/g, ' '],                      // nbsp\n  ]);\n  for (const [re, rep] of map) s = s.replace(re, rep);\n\n  // Some PDFs produce odd high-ASCII like Ò Ó Ð etc. Strip diacritics then collapse.\n  s = s.normalize('NFKD').replace(/[\\u0300-\\u036f]/g, '');\n\n  // Kill nulls, control chars except newline\n  s = s.replace(/[\\u0000-\\u001F\\u007F]/g, c => (c === '\\n' ? '\\n' : ' '));\n\n  // collapse spaces and multi-blank lines\n  s = s.replace(/[ \\t]+/g, ' ')\n       .replace(/\\n{3,}/g, '\\n\\n')\n       .trim();\n\n  return s;\n}\n\nconst text = cleanForEmbedding(raw);\nif (!text || text.length < 50) {\n  throw new Error(`Extracted text too short after cleaning: ${text?.length || 0} chars`);\n}\n\n// mime after conversion\nlet actualMime = driveFile.mimeType || 'text/plain';\nconst conversionMap = {\n  'application/vnd.google-apps.document': 'text/plain',\n  'application/vnd.google-apps.spreadsheet': 'text/csv',\n  'application/vnd.google-apps.presentation': 'application/pdf',\n};\nif (conversionMap[driveFile.mimeType]) actualMime = conversionMap[driveFile.mimeType];\n\n// sanitize filename\nconst MAX_FILENAME = 255;\nconst safeName = (driveFile.name || 'file.txt')\n  .replace(/[^a-zA-Z0-9._-]/g, '_')\n  .slice(0, MAX_FILENAME);\n\n// Emit BOTH: `data` (for downstream), keep `content` for humans/compat\nreturn [{\n  json: {\n    file_id: driveFile.id,\n    filename: safeName,\n    mime_type: actualMime,\n    original_mime_type: driveFile.mimeType || 'unknown',\n\n    data: text,                // ✅ standard for downstream\n    content: text,             // alias; optional\n    content_length: text.length,\n\n    extracted_at: new Date().toISOString(),\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2240,
        1440
      ],
      "id": "d9d56898-a306-4157-8066-25d9549d10a8",
      "name": "ExtractAndPackage"
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $items('GetPendingFile',0,0)[0].json.id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "=0ADNv-WFOlNroUk9PVA",
          "mode": "id"
        },
        "folderId": {
          "__rl": true,
          "value": "1r5cg2HPGjmtQsUVrT5L43kJIctlNrkte",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -512,
        1824
      ],
      "id": "35833167-15f9-4f94-9241-ca7ffd205eb1",
      "name": "Move Failed",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "OtvrT7x8YG4Mrx7n",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT file_id, rag_status as status\nFROM core.file_pipeline_status\nWHERE file_id = $1\nAND rag_status IN ('completed', 'processing');",
        "options": {
          "queryReplacement": "={{ [$json.id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3360,
        1472
      ],
      "id": "cfa9f92b-f62d-4f25-b596-5aead4d59b57",
      "name": "checkExists",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "id": "1da34a24-ec38-4378-85ae-ec3806ff20e0",
      "name": "Every5Min",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -4032,
        1536
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "f2f847d6-d776-4c1d-9df2-1b734d3f0f15",
              "leftValue": "= {{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3136,
        1536
      ],
      "id": "d37e722e-ea3f-4757-ae10-1909a029dd62",
      "name": "IfExists"
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "19_PvHNRakfzzLjL6WsYGW0VJqkv5if2aMtFDYyFh_Bo",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "0ADNv-WFOlNroUk9PVA",
          "mode": "list",
          "cachedResultName": "RAG-idudes-RAG-System",
          "cachedResultUrl": "https://drive.google.com/drive/folders/0ADNv-WFOlNroUk9PVA"
        },
        "folderId": {
          "__rl": true,
          "value": "1P9vCe0flPbImHpcimMcNahQT7YN25M0_",
          "mode": "list",
          "cachedResultName": "RAG-Pending",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1P9vCe0flPbImHpcimMcNahQT7YN25M0_"
        }
      },
      "id": "d6efe636-740a-4ee3-b953-035fd518c683",
      "name": "GetPendingFile1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -4032,
        2048
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "OtvrT7x8YG4Mrx7n",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "filename",
                    "rightValue": ".jsonl",
                    "operator": {
                      "type": "string",
                      "operation": "notEndsWith"
                    },
                    "id": "b0982533-e5fd-474b-813d-d0a6423bb8c0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "main"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "52ababf8-9303-40ef-8e03-3b6f5900c32f",
                    "leftValue": "filename",
                    "rightValue": ".jsonl",
                    "operator": {
                      "type": "string",
                      "operation": "endsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pre-chunked"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -2688,
        1536
      ],
      "id": "fc07214b-dab2-4b6f-b684-c53abcc05116",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "/**\n * ProcessPreChunked (JSONL) — robust parse + episode/book classify + embeddings + backoff\n * Returns EXACT same shape as your original node + { content_type, _classify_debug }\n */\n\nconst OPENAI_API_KEY = $env.OPENAI_API_KEY;\nif (!OPENAI_API_KEY) throw new Error('Missing OPENAI_API_KEY');\n\nconst MODEL = 'text-embedding-3-small';\nconst BATCH_SIZE = 100;\nconst MAX_TOKENS = 7500;       // keep under ~8k ctx\nconst AVG_CHARS_PER_TOKEN = 4; // rough heuristic\nconst MAX_CHARS = MAX_TOKENS * AVG_CHARS_PER_TOKEN;\n\n// ---------- helpers ----------\nfunction decodeBinaryToUtf8(bin) {\n  if (!bin) return '';\n  // n8n binary.data is usually base64 string; tolerate Buffers/objects too\n  if (typeof bin === 'string') {\n    try { return Buffer.from(bin, 'base64').toString('utf-8'); } catch { return bin; }\n  }\n  if (typeof bin.data === 'string') {\n    try { return Buffer.from(bin.data, 'base64').toString('utf-8'); } catch { /* fallthrough */ }\n  }\n  if (typeof bin.toString === 'function') {\n    try { return bin.toString('utf-8'); } catch {}\n  }\n  return String(bin);\n}\n\nfunction normalize(s) {\n  return String(s || '')\n    .normalize('NFKD')\n    .replace(/\\r/g, '\\n')\n    .replace(/[^\\S\\n]+/g, ' ') // collapse spaces but keep newlines\n    .trim();\n}\n\nfunction hardNormalizeOneLine(s) {\n  return String(s || '')\n    .toLowerCase()\n    .normalize('NFKD')\n    .replace(/[^a-z0-9\\s]/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\nfunction truncateForEmbedding(s) {\n  if (!s) return '';\n  return s.length > MAX_CHARS ? s.slice(0, MAX_CHARS) : s;\n}\n\nasync function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }\n\nasync function withBackoff(fn, { tries = 5, base = 300 } = {}) {\n  let lastErr;\n  for (let i = 0; i < tries; i++) {\n    try { return await fn(); }\n    catch (e) {\n      const status = e?.response?.status || e?.statusCode;\n      const retryable = status === 429 || (status >= 500 && status < 600);\n      if (!retryable || i === tries - 1) throw e;\n      const delay = base * Math.pow(2, i) + Math.floor(Math.random() * 200);\n      await sleep(delay);\n      lastErr = e;\n    }\n  }\n  throw lastErr || new Error('withBackoff exhausted');\n}\n\nasync function embedBatch(batch) {\n  const body = { input: batch, model: MODEL };\n  const doCall = () => this.helpers.httpRequest({\n    method: 'POST',\n    url: 'https://api.openai.com/v1/embeddings',\n    headers: { 'Authorization': `Bearer ${OPENAI_API_KEY}`, 'Content-Type': 'application/json' },\n    body, json: true, timeout: 120000,\n  });\n  const res = await withBackoff(doCall);\n  const arr = res?.data || [];\n  if (arr.length !== batch.length) {\n    throw new Error(`Embedding API returned ${arr.length} embeddings for batch of ${batch.length}`);\n  }\n  return arr.map(d => d.embedding);\n}\n\n// ---------- 1) read file ----------\nconst downloadedFile = $input.first();\nconst fileInfo = ($items('GetPendingFile')?.[0]?.json) || {};\nconst contentRaw = decodeBinaryToUtf8(downloadedFile?.binary?.data);\nif (!contentRaw) throw new Error('No content found in the downloaded .jsonl file.');\n\nconst file_id   = fileInfo.id;\nconst filename  = fileInfo.name || '';\nconst mime_type = fileInfo.mimeType || 'application/jsonl';\n\n// ---------- 2) parse JSONL ----------\nconst lines = contentRaw.split('\\n').map(l => l.trim()).filter(Boolean);\nif (!lines.length) throw new Error('No lines found in .jsonl file');\n\nconst chunks = [];\nfor (let i = 0; i < lines.length; i++) {\n  const line = lines[i];\n  try {\n    const obj = JSON.parse(line);\n    const maybeText =\n      obj.text ??\n      obj.content ??\n      obj.body ??\n      obj?.choices?.[0]?.message?.content ??\n      '';\n    const clean = normalize(maybeText);\n    if (clean) chunks.push(clean);\n  } catch (e) {\n    throw new Error(`JSONL parse error at line ${i + 1}: ${e.message}`);\n  }\n}\nif (!chunks.length) throw new Error('No chunks with text found in .jsonl file');\n\n// ---------- 3) classify episode vs book (first ~10 chunks) ----------\nconst sample = hardNormalizeOneLine(chunks.slice(0, 10).join(' '));\n\n// Intro 1\nconst intro1 = /insurance\\s+dudes?\\s+are\\s+on\\s+a\\s+mission\\s+to\\s+escape\\s+being\\s+handcuffed\\s+by\\s+our\\s+agencies/.test(sample);\n\n// Intro 2 cluster\nconst hasCraig  = /i\\s+am\\s+craig\\s+pretzinger/.test(sample);\nconst hasJason  = /i\\s+am\\s+jason\\s+feltman/.test(sample);\nconst hasAgents = /we\\s+are\\s+agents/.test(sample);\nconst hasDudes  = /we\\s+are\\s+insurance\\s+dudes?/.test(sample);\nconst intro2 = (hasCraig && hasJason && (hasAgents || hasDudes));\n\nconst content_type = (intro1 || intro2) ? 'episode' : 'book';\n\n// ---------- 4) embeddings with batching + backoff ----------\nconst t0 = Date.now();\nconst embeddings = [];\nfor (let i = 0; i < chunks.length; i += BATCH_SIZE) {\n  const batch = chunks.slice(i, i + BATCH_SIZE).map(truncateForEmbedding);\n  const vecs = await embedBatch.call(this, batch);\n  embeddings.push(...vecs);\n}\nif (embeddings.length !== chunks.length) {\n  throw new Error(`Embedding count mismatch: got ${embeddings.length}, expected ${chunks.length}`);\n}\nconst duration = Math.floor((Date.now() - t0) / 1000);\nconst file_size = contentRaw.length;\nconst total_chunks = chunks.length;\n\n// ---------- 5) return exactly like original + content_type ----------\nreturn chunks.map((text, idx) => ({\n  json: {\n    file_id,\n    filename,\n    file_type: mime_type,\n    file_size,\n    chunk_index: idx,\n    text,\n    chunk_size: text.length,\n    embedding: embeddings[idx],\n    total_chunks,\n    duration,\n    status: 'completed',\n    content_type,\n    // tiny debug; remove later if noisy\n    _classify_debug: { intro1, hasCraig, hasJason, hasAgents, hasDudes }\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2016,
        1824
      ],
      "id": "1c74a553-5916-4167-b58d-c3f4348283b2",
      "name": "ProcessPreChunked"
    },
    {
      "parameters": {
        "jsCode": "// Emit exactly ONE item carrying the full spine from CheckSuccess (true branch)\nconst okItems = $items('CheckSuccess', 0, 0);\nif (!okItems?.length) throw new Error('CheckSuccess produced no true-branch items');\n\nconst spine = okItems[0].json;\nif (!spine?.file_id) throw new Error('Spine missing file_id from CheckSuccess');\n\nreturn [{ json: spine }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -496,
        1360
      ],
      "id": "13a3fd37-8cd0-48b8-88da-f4d3b835b5da",
      "name": "EmitOnce"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "ANALYZE core.embeddings;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -4016,
        1856
      ],
      "id": "4e23411d-84e1-4e6f-8377-23e98185684e",
      "name": "checkExists1",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.file_status(file_id, filename, status, created_at, updated_at)\nVALUES ($1,$2,'processing',NOW(),NOW())\nON CONFLICT (file_id) DO UPDATE\n  SET status='processing', updated_at=NOW();\n",
        "options": {
          "queryReplacement": "={{ [$json.file_id, $json.filename] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1600,
        1328
      ],
      "id": "e901f92b-4ee1-4a57-86cc-1dab2f67c6ec",
      "name": "Upsert file_status",
      "credentials": {
        "postgres": {
          "id": "RgSahjexGXAgJPUj",
          "name": "RAG_WRITE_KEY"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ai.thirdeyediagnostics.com/webhook/events/episode-ready",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"file_id\": \"{{ $('EmitOnce').item.json.file_id }}\",\n  \"filename\": \"{{ $('EmitOnce').item.json.filename }}\"\n  }",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -192,
        1360
      ],
      "id": "22dbd8e1-b483-427b-94bc-4561f32dc53b",
      "name": "SendPostToSocial"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM core.embeddings\nWHERE file_id = $1;",
        "options": {
          "queryReplacement": "={{ [$json.file_id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1792,
        1264
      ],
      "id": "2b3d3fc7-711f-4bf4-8d67-b219928ae559",
      "name": "DeleteOldChunks1",
      "credentials": {
        "postgres": {
          "id": "RgSahjexGXAgJPUj",
          "name": "RAG_WRITE_KEY"
        }
      }
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1696,
        1456
      ],
      "id": "4599e4f7-ecb2-42f7-a76a-ab91f7cacac8",
      "name": "Wait1",
      "webhookId": "87f0f4e5-c88e-4187-bc01-5dc331d525fa"
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "0ADNv-WFOlNroUk9PVA",
          "mode": "list",
          "cachedResultName": "RAG-idudes-RAG-System",
          "cachedResultUrl": "https://drive.google.com/drive/folders/0ADNv-WFOlNroUk9PVA"
        },
        "folderId": {
          "__rl": true,
          "value": "1fSOIBLxf4bhz_ZeSlJSqqpCypYMfCSms",
          "mode": "list",
          "cachedResultName": "RAG-Completed",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1fSOIBLxf4bhz_ZeSlJSqqpCypYMfCSms"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -304,
        1616
      ],
      "id": "6eb0b9bc-13a6-402e-92f6-2a5d7194dc36",
      "name": "Move to Completed",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "OtvrT7x8YG4Mrx7n",
          "name": "Google Drive account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -640,
        1392
      ],
      "id": "9ebb50ac-6a14-44e1-97ed-c6e09b22918e",
      "name": "Wait",
      "webhookId": "834fad8b-d75a-4370-8665-46802d4967cd"
    },
    {
      "parameters": {
        "jsCode": "// Use the cleaned text already produced by ExtractAndPackage\nconst name = String($json.filename || '').toLowerCase();\nconst text = String($json.data || $json.content || '').toLowerCase();\n\nconst norm = (name + ' ' + text)\n  .normalize('NFKD').replace(/[^a-z0-9\\s]/g,' ')\n  .replace(/\\s+/g,' ')\n  .trim();\n\n// Episode intros present in every show\nconst intro1 = /insurance\\s+dudes?\\s+are\\s+on\\s+a\\s+mission\\s+to\\s+escape\\s+being\\s+handcuffed\\s+by\\s+our\\s+agencies/.test(norm);\nconst hasCraig  = /i\\s+am\\s+craig\\s+pretzinger/.test(norm);\nconst hasJason  = /i\\s+am\\s+jason\\s+feltman/.test(norm);\nconst hasAgents = /we\\s+are\\s+agents/.test(norm);\nconst hasDudes  = /we\\s+are\\s+insurance\\s+dudes?/.test(norm);\nconst intro2 = (hasCraig && hasJason && (hasAgents || hasDudes));\n\nconst content_type = (intro1 || intro2) ? 'episode' : 'book';\n\nreturn [{ json: { ...$json, content_type } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2032,
        1440
      ],
      "id": "b7cf95eb-bdca-4ef9-8edd-f8a406f076b8",
      "name": "Classify Source"
    }
  ],
  "connections": {
    "GetPendingFile": {
      "main": [
        [
          {
            "node": "checkExists",
            "type": "main",
            "index": 0
          },
          {
            "node": "IfExists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ProcessDocument": {
      "main": [
        [
          {
            "node": "CheckSuccess",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set parentDrive": {
      "main": [
        [
          {
            "node": "GetPendingFile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MarkProcessing": {
      "main": [
        []
      ]
    },
    "CheckSuccess": {
      "main": [
        [
          {
            "node": "InsertEmbedding",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MarkFailed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InsertEmbedding": {
      "main": [
        [
          {
            "node": "UpdateStatus",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UpdateStatus": {
      "main": [
        [
          {
            "node": "Move to Completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MarkFailed": {
      "main": [
        [
          {
            "node": "Move Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comleted: LogToSheets": {
      "main": [
        []
      ]
    },
    "ExtractFromFile": {
      "main": [
        [
          {
            "node": "ExtractAndPackage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ExtractAndPackage": {
      "main": [
        [
          {
            "node": "Upsert file_status",
            "type": "main",
            "index": 0
          },
          {
            "node": "DeleteOldChunks1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Classify Source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Failed": {
      "main": [
        [
          {
            "node": "FAILED: LogToSheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "checkExists": {
      "main": [
        [
          {
            "node": "IfExists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Every5Min": {
      "main": [
        [
          {
            "node": "set parentDrive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IfExists": {
      "main": [
        [],
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "ExtractFromFile",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ProcessPreChunked",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ProcessPreChunked": {
      "main": [
        [
          {
            "node": "CheckSuccess",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EmitOnce": {
      "main": [
        [
          {
            "node": "SendPostToSocial",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert file_status": {
      "main": [
        []
      ]
    },
    "DeleteOldChunks1": {
      "main": [
        []
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "MarkProcessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move to Completed": {
      "main": [
        [
          {
            "node": "Comleted: LogToSheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "EmitOnce",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Source": {
      "main": [
        [
          {
            "node": "ProcessDocument",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}