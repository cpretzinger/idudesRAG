{
  "name": "Auth Login - idudesRAG",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/auth/login",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "a1b2c3d4-8c4e-11ef-9f7a-0242ac120010",
      "name": "Webhook - Login",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "webhookId": "idudesrag-auth-login"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, email, name, password_hash, role FROM users WHERE email = $1",
        "additionalFields": {
          "parameters": [
            "={{ $json.body.email }}"
          ]
        }
      },
      "id": "b2c3d4e5-8c4e-11ef-9f7a-0242ac120011",
      "name": "Get User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        460,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const bcrypt = require('bcrypt');\nconst crypto = require('crypto');\n\nconst input = $input.first().json;\nconst userPassword = $json.body.password;\n\n// Check if user exists\nif (!input || input.length === 0) {\n  return [{\n    json: {\n      success: false,\n      error: 'Invalid credentials',\n      status: 401\n    }\n  }];\n}\n\nconst userData = input[0] || input;\nconst storedHash = userData.password_hash;\n\n// Verify password\ntry {\n  const isValid = await bcrypt.compare(userPassword, storedHash);\n  \n  if (!isValid) {\n    return [{\n      json: {\n        success: false,\n        error: 'Invalid credentials',\n        status: 401\n      }\n    }];\n  }\n  \n  // Generate session token\n  const sessionToken = crypto.randomBytes(32).toString('hex');\n  const expiresAt = new Date();\n  expiresAt.setDate(expiresAt.getDate() + 7); // 7 days\n  \n  return [{\n    json: {\n      success: true,\n      session_token: sessionToken,\n      expires_at: expiresAt.toISOString(),\n      user: {\n        id: userData.id,\n        email: userData.email,\n        name: userData.name,\n        role: userData.role\n      },\n      tenant: 'idudes'\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      success: false,\n      error: 'Authentication failed',\n      status: 500,\n      debug: error.message\n    }\n  }];\n}"
      },
      "id": "c3d4e5f6-8c4e-11ef-9f7a-0242ac120012",
      "name": "Verify Password & Generate Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO user_sessions (token, user_id, expires_at, created_at) VALUES ($1, $2, $3, NOW()) ON CONFLICT (token) DO UPDATE SET expires_at = $3, created_at = NOW()",
        "additionalFields": {
          "parameters": [
            "={{ $json.session_token }}",
            "={{ $json.user.id }}",
            "={{ $json.expires_at }}"
          ]
        }
      },
      "id": "d4e5f6g7-8c4e-11ef-9f7a-0242ac120013",
      "name": "Store Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        900,
        240
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": "={{ $json.status || 200 }}",
        "responseBody": "={{ $json.success ? {\n  \"success\": true,\n  \"session_token\": $json.session_token,\n  \"user\": $json.user,\n  \"expires_at\": $json.expires_at,\n  \"tenant\": $json.tenant\n} : {\n  \"success\": false,\n  \"error\": $json.error\n} }}"
      },
      "id": "e5f6g7h8-8c4e-11ef-9f7a-0242ac120014",
      "name": "Respond with Auth Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO auth_logs (tenant, email, action, status, ip_address, user_agent, created_at) VALUES ($1, $2, $3, $4, $5, $6, NOW())",
        "additionalFields": {
          "parameters": [
            "idudes",
            "={{ $('Webhook - Login').item.json.body.email }}",
            "login",
            "={{ $json.success ? 'success' : 'failed' }}",
            "={{ $('Webhook - Login').item.json.headers['x-forwarded-for'] || $('Webhook - Login').item.json.headers['x-real-ip'] || 'unknown' }}",
            "={{ $('Webhook - Login').item.json.headers['user-agent'] || 'unknown' }}"
          ]
        }
      },
      "id": "f6g7h8i9-8c4e-11ef-9f7a-0242ac120015",
      "name": "Log Auth Attempt",
      "type": "n8n-nodes-base.postgres", 
      "typeVersion": 2.4,
      "position": [
        900,
        380
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Login": {
      "main": [
        [
          {
            "node": "Get User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User": {
      "main": [
        [
          {
            "node": "Verify Password & Generate Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Password & Generate Token": {
      "main": [
        [
          {
            "node": "Store Session",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Auth Attempt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Session": {
      "main": [
        [
          {
            "node": "Respond with Auth Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "errorWorkflow": "",
      "continueOnFail": false
    }
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ai.thirdeyediagnostics.com"
  },
  "id": "auth-login-idudes",
  "tags": [
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "auth",
      "name": "auth"
    },
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "idudes",
      "name": "idudes"
    }
  ]
}