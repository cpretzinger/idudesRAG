{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/auth/login",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "0745bc55-46d8-4b3e-972f-f429759767df",
      "name": "Webhook - Login",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -768,
        64
      ],
      "webhookId": "idudesrag-auth-login"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, email, name, password_hash, role, must_reset_password FROM core.users WHERE email = $1",
        "options": {
          "queryReplacement": "={{ $json.body.email }}"
        }
      },
      "id": "a0553812-4d07-4c88-989e-49b59590fd37",
      "name": "Get User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -560,
        64
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const bcrypt = require('bcrypt');\nconst crypto = require('crypto');\n\nconst input = $input.first().json;\nconst userPassword = $json.body.password;\n\n// Check if user exists\nif (!input || input.length === 0) {\n  return [{\n    json: {\n      success: false,\n      error: 'Invalid credentials',\n      status: 401\n    }\n  }];\n}\n\nconst userData = input[0] || input;\nconst storedHash = userData.password_hash;\n\n// Verify password\ntry {\n  const isValid = await bcrypt.compare(userPassword, storedHash);\n  \n  if (!isValid) {\n    return [{\n      json: {\n        success: false,\n        error: 'Invalid credentials',\n        status: 401\n      }\n    }];\n  }\n  \n  // Generate session token\n  const sessionToken = crypto.randomBytes(32).toString('hex');\n  const expiresAt = new Date();\n  expiresAt.setDate(expiresAt.getDate() + 7); // 7 days\n  \n  return [{\n    json: {\n      success: true,\n      session_token: sessionToken,\n      expires_at: expiresAt.toISOString(),\n      user: {\n        id: userData.id,\n        email: userData.email,\n        name: userData.name,\n        role: userData.role,\n        must_reset_password: userData.must_reset_password || false\n      },\n      tenant: 'idudes'\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      success: false,\n      error: 'Authentication failed',\n      status: 500,\n      debug: error.message\n    }\n  }];\n}"
      },
      "id": "d8c89f30-aba1-4433-95b7-72c5ef17d5f6",
      "name": "Verify Password & Generate Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        64
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.user_sessions (token, user_id, expires_at, created_at, last_accessed) VALUES ($1, $2, $3, NOW() AT TIME ZONE 'America/Phoenix', NOW() AT TIME ZONE 'America/Phoenix') ON CONFLICT (token) DO UPDATE SET expires_at = $3, last_accessed = NOW() AT TIME ZONE 'America/Phoenix', created_at = NOW() AT TIME ZONE 'America/Phoenix'",
        "options": {
          "queryReplacement": "={{ $json.session_token }}\n{{ $json.user.id }}\n{{ $json.expires_at }}"
        }
      },
      "id": "170ba516-a04f-4a78-9e0e-b702795af52f",
      "name": "Store Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -112,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.success ? {\n  \"success\": true,\n  \"session_token\": $json.session_token,\n  \"user\": $json.user,\n  \"expires_at\": $json.expires_at,\n  \"tenant\": $json.tenant\n} : {\n  \"success\": false,\n  \"error\": $json.error\n} }}",
        "options": {}
      },
      "id": "1c81e23c-6342-48d7-b6f5-c57ae3b97aeb",
      "name": "Respond with Auth Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        112,
        64
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": " INSERT INTO core.auth_logs (tenant, email, action, status, ip_address, user_agent, created_at)\n  VALUES ($1, $2, $3, $4, $5, $6, NOW() AT TIME ZONE 'America/Phoenix')",
        "options": {
          "queryReplacement": "=idudes\n  {{ $('Webhook - Login').item.json.body.email }}\n  login\n  {{ $json.success ? 'success' : 'failed' }}\n  {{ $('Webhook - Login').item.json.headers['x-forwarded-for'] || $('Webhook - Login').item.json.headers['x-real-ip'] || 'unknown' }}\n  {{ $('Webhook - Login').item.json.headers['user-agent'] || 'unknown' }}"
        }
      },
      "id": "6c760a10-09ba-4205-bee3-8a647d662bde",
      "name": "Log Auth Attempt",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -112,
        144
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    }
  ],
  "connections": {
    "Webhook - Login": {
      "main": [
        [
          {
            "node": "Get User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User": {
      "main": [
        [
          {
            "node": "Verify Password & Generate Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Password & Generate Token": {
      "main": [
        [
          {
            "node": "Store Session",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Auth Attempt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Session": {
      "main": [
        [
          {
            "node": "Respond with Auth Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}
