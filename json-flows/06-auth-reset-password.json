{
  "name": "Auth Reset Password - idudesRAG",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/auth/reset-password",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "a1b2c3d4-8c50-11ef-9f7a-0242ac12001c",
      "name": "Webhook - Reset Password",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "webhookId": "idudesrag-auth-reset"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, email, name FROM core.users WHERE email = $1",
        "additionalFields": {
          "parameters": [
            "={{ $json.body.email }}"
          ]
        }
      },
      "id": "b2c3d4e5-8c50-11ef-9f7a-0242ac12001d",
      "name": "Check User Exists",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        460,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\nconst input = $input.first().json;\nconst email = $json.body.email;\n\n// Check if email was provided\nif (!email) {\n  return [{\n    json: {\n      success: false,\n      error: 'Email address required',\n      status: 400\n    }\n  }];\n}\n\n// Check if user exists (but don't reveal this info for security)\nif (!input || input.length === 0) {\n  // Return success even if user doesn't exist (security best practice)\n  return [{\n    json: {\n      success: true,\n      message: 'If an account with that email exists, a reset email has been sent',\n      user_exists: false,\n      status: 200\n    }\n  }];\n}\n\nconst userData = input[0] || input;\n\n// Generate reset token and expiration\nconst resetToken = crypto.randomBytes(32).toString('hex');\nconst resetExpires = new Date();\nresetExpires.setHours(resetExpires.getHours() + 1); // 1 hour expiration\n\n// Create reset URL\nconst resetUrl = `https://ui-theta-black.vercel.app/reset-password?token=${resetToken}`;\n\nreturn [{\n  json: {\n    success: true,\n    user_exists: true,\n    user_id: userData.id,\n    email: userData.email,\n    name: userData.name,\n    reset_token: resetToken,\n    reset_expires: resetExpires.toISOString(),\n    reset_url: resetUrl,\n    tenant: 'idudes',\n    status: 200\n  }\n}];"
      },
      "id": "c3d4e5f6-8c50-11ef-9f7a-0242ac12001e",
      "name": "Generate Reset Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.password_resets (user_id, token, expires_at, created_at) VALUES ($1, $2, $3, NOW() AT TIME ZONE 'America/Phoenix') ON CONFLICT (user_id) DO UPDATE SET token = $2, expires_at = $3, created_at = NOW() AT TIME ZONE 'America/Phoenix'",
        "additionalFields": {
          "parameters": [
            "={{ $json.user_id }}",
            "={{ $json.reset_token }}",
            "={{ $json.reset_expires }}"
          ]
        }
      },
      "id": "d4e5f6g7-8c50-11ef-9f7a-0242ac12001f",
      "name": "Store Reset Token",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        900,
        240
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "send",
        "to": "={{ $json.email }}",
        "subject": "Password Reset - idudesRAG Knowledge Base",
        "messageText": "Hi {{ $json.name }},\n\nYou requested a password reset for your idudesRAG Knowledge Base account.\n\nClick this link to reset your password:\n{{ $json.reset_url }}\n\nThis link expires in 1 hour for security reasons.\n\nIf you didn't request this password reset, please ignore this email.\n\nBest regards,\nThe idudesRAG Team\n\n---\nThis is an automated email from the Insurance Dudes Knowledge Base system.",
        "messageHtml": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #0066CC; color: white; padding: 20px; text-align: center; }\n        .content { padding: 20px; background: #f9f9f9; }\n        .button { display: inline-block; padding: 12px 24px; background: #0066CC; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }\n        .footer { font-size: 12px; color: #666; text-align: center; margin-top: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>Password Reset Request</h1>\n        </div>\n        <div class=\"content\">\n            <p>Hi <strong>{{ $json.name }}</strong>,</p>\n            \n            <p>You requested a password reset for your <strong>idudesRAG Knowledge Base</strong> account.</p>\n            \n            <p>Click the button below to reset your password:</p>\n            \n            <p><a href=\"{{ $json.reset_url }}\" class=\"button\">Reset My Password</a></p>\n            \n            <p>Or copy and paste this link into your browser:<br>\n            <code>{{ $json.reset_url }}</code></p>\n            \n            <p><strong>This link expires in 1 hour</strong> for security reasons.</p>\n            \n            <p>If you didn't request this password reset, please ignore this email.</p>\n        </div>\n        <div class=\"footer\">\n            <p>Best regards,<br>The idudesRAG Team</p>\n            <p>This is an automated email from the Insurance Dudes Knowledge Base system.</p>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "e5f6g7h8-8c50-11ef-9f7a-0242ac120020",
      "name": "Send Reset Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        900,
        380
      ],
      "credentials": {
        "gmailOAuth2": {
          "id": "GMAIL_OAUTH_CREDENTIAL_ID",
          "name": "Gmail OAuth - idudesRAG"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": "={{ $json.status || 200 }}",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"If an account with that email exists, a reset email has been sent\"\n} }}"
      },
      "id": "f6g7h8i9-8c50-11ef-9f7a-0242ac120021",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.auth_logs (tenant, email, action, status, ip_address, user_agent, created_at) VALUES ($1, $2, $3, $4, $5, $6, NOW() AT TIME ZONE 'America/Phoenix')",
        "additionalFields": {
          "parameters": [
            "idudes",
            "={{ $('Webhook - Reset Password').item.json.body.email }}",
            "password_reset_request",
            "={{ $json.user_exists ? 'email_sent' : 'user_not_found' }}",
            "={{ $('Webhook - Reset Password').item.json.headers['x-forwarded-for'] || $('Webhook - Reset Password').item.json.headers['x-real-ip'] || 'unknown' }}",
            "={{ $('Webhook - Reset Password').item.json.headers['user-agent'] || 'unknown' }}"
          ]
        }
      },
      "id": "07081920-8c51-11ef-9f7a-0242ac120022",
      "name": "Log Reset Request",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1120,
        460
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This node handles cases where user doesn't exist\n// It still returns success for security (don't reveal user existence)\nconst email = $('Webhook - Reset Password').item.json.body.email;\n\nreturn [{\n  json: {\n    success: true,\n    message: 'If an account with that email exists, a reset email has been sent',\n    user_exists: false,\n    email: email,\n    tenant: 'idudes',\n    status: 200\n  }\n}];"
      },
      "id": "18192021-8c51-11ef-9f7a-0242ac120023",
      "name": "Handle Non-Existent User",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        460
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Reset Password": {
      "main": [
        [
          {
            "node": "Check User Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User Exists": {
      "main": [
        [
          {
            "node": "Generate Reset Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Reset Token": {
      "main": [
        [
          {
            "node": "Store Reset Token",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Reset Email",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Non-Existent User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Reset Token": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Reset Email": {
      "main": [
        [
          {
            "node": "Log Reset Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Non-Existent User": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Reset Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "errorWorkflow": "",
      "continueOnFail": false
    }
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ai.thirdeyediagnostics.com"
  },
  "id": "auth-reset-password-idudes",
  "tags": [
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "auth",
      "name": "auth"
    },
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "idudes",
      "name": "idudes"
    }
  ]
}