{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/auth/reset-password",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "70d5df70-6e64-4eb5-b117-9db4b6916814",
      "name": "Webhook - Reset Password",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -800,
        48
      ],
      "webhookId": "idudesrag-auth-reset"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, email, name FROM core.users WHERE email = $1",
        "options": {
          "queryReplacement": "={{ $json.body.email }}"
        }
      },
      "id": "f47e2ce3-9fdb-428f-a1c5-62ec77e90d5a",
      "name": "Check User Exists",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -592,
        48
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\n\n  // Helper: Validate email format\n  function isValidEmail(email) {\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    return emailRegex.test(email) && !email.includes('\\n') && !email.includes('\\r');\n  }\n\n  // Helper: Hash token for database storage\n  function hashToken(token) {\n    return crypto.createHash('sha256').update(token).digest('hex');\n  }\n\n  const email = $json.body?.email?.toLowerCase()?.trim();\n\n  // Validate email format\n  if (!email || !isValidEmail(email)) {\n    return [{\n      json: {\n        success: false,\n        error: 'Invalid email format',\n        status: 400\n      }\n    }];\n  }\n\n  const input = $input.first()?.json;\n  const userData = Array.isArray(input) ? input[0] : input;\n\n  // SECURITY: Always generate token (prevents timing attacks)\n  const resetToken = crypto.randomBytes(32).toString('hex');\n  const resetTokenHash = hashToken(resetToken);\n  const resetExpires = new Date();\n  resetExpires.setHours(resetExpires.getHours() + 1);\n\n  // Validate base URL (prevent URL injection)\n  const baseUrl = 'https://ui-theta-black.vercel.app';\n  const allowedDomains = ['ui-theta-black.vercel.app'];\n  const resetUrl = `${baseUrl}/reset-password?token=${resetToken}`;\n\n  // Validate constructed URL\n  try {\n    const parsedUrl = new URL(resetUrl);\n    if (!allowedDomains.includes(parsedUrl.hostname)) {\n      throw new Error('Invalid reset URL domain');\n    }\n  } catch (error) {\n    return [{\n      json: {\n        success: false,\n        error: 'Invalid reset URL configuration',\n        status: 500\n      }\n    }];\n  }\n\n  // Check if user exists\n  if (!userData || !userData.id) {\n    // SECURITY: Return same response to prevent email enumeration\n    return [{\n      json: {\n        success: true,\n        message: 'If an account with that email exists, a reset email has been sent',\n        user_exists: false,\n        send_email: false,\n        status: 200\n      }\n    }];\n  }\n\n  // User exists - return data for database update and email\n  return [{\n    json: {\n      success: true,\n      user_exists: true,\n      send_email: true,\n      user_id: userData.id,\n      email: userData.email || email,\n      name: userData.name || 'User',\n      reset_token: resetToken,\n      reset_token_hash: resetTokenHash,\n      reset_expires: resetExpires.toISOString(),\n      reset_url: resetUrl,\n      tenant: 'idudes',\n      status: 200\n    }\n  }];"
      },
      "id": "8e59ad9c-4505-4a0b-8810-8ba18e5e9161",
      "name": "Generate Reset Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.password_resets (user_id, token, expires_at, created_at) VALUES ($1, $2, $3,\n  NOW() AT TIME ZONE 'America/Phoenix') ON CONFLICT (user_id) DO UPDATE SET token = $2,\n  expires_at = $3, created_at = NOW() AT TIME ZONE 'America/Phoenix'",
        "options": {
          "queryReplacement": "={{ $json.user_id }}\n{{ $json.reset_token }}\n{{ $json.reset_expires }}"
        }
      },
      "id": "5b427619-c37a-4ff4-9f02-1e27b0b3fac3",
      "name": "Store Reset Token",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        64,
        -16
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.body.email }}",
        "subject": "Password Reset - idudesRAG Knowledge Base",
        "emailType": "text",
        "message": "=",
        "options": {
          "appendAttribution": false,
          "senderName": "ContentOpsAssistant",
          "replyTo": "noreply@theidudes.com"
        }
      },
      "id": "fb5afa31-675e-4018-86df-f0a08837de9d",
      "name": "Send Reset Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        64,
        128
      ],
      "webhookId": "91640edd-15bd-4dae-b27e-aa19e781d52b",
      "credentials": {
        "gmailOAuth2": {
          "id": "WklU4pXOpKmeTxHM",
          "name": "craig@theidudes.com"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"message\": \"If an account with that email exists, a reset email has been sent\"\n} }}",
        "options": {}
      },
      "id": "eb215ab7-48fd-4cdd-a4c9-b0ac543ea2ea",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        288,
        48
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.auth_logs (tenant, email, action, status, ip_address, user_agent, created_at) VALUES ($1, $2, $3, $4, $5, $6, NOW() AT TIME ZONE 'America/Phoenix')",
        "options": {
          "queryReplacement": "=idudes\n{{ $('Webhook - Reset Password').item.json.body.email }}   password_reset_request\n{{ $json.user_exists ? 'email_sent' : 'user_not_found' }}  {{ $('Webhook - Reset Password').item.json.headers['x-forwarded-for'] || $('Webhook - Reset Password').item.json.headers['x-real-ip'] || 'unknown' }}  {{ $('Webhook - Reset Password').item.json.headers['user-agent'] || 'unknown' }}"
        }
      },
      "id": "fed83bab-e406-48b7-847b-7767423344b5",
      "name": "Log Reset Request",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        288,
        208
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This node handles cases where user doesn't exist\n// It still returns success for security (don't reveal user existence)\nconst email = $('Webhook - Reset Password').item.json.body.email;\n\nreturn [{\n  json: {\n    success: true,\n    message: 'If an account with that email exists, a reset email has been sent',\n    user_exists: false,\n    email: email,\n    tenant: 'idudes',\n    status: 200\n  }\n}];"
      },
      "id": "2f773e5b-db8d-4676-9cf9-3f5a28951cda",
      "name": "Handle Non-Existent User",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": " const crypto = require('crypto');\n  const inputData = $input.first().json;\n  const email = $json.body.email;\n\n  if (!email) {\n    return [{\n      json: {\n        success: false,\n        error: 'Email address required',\n        status: 400\n      }\n    }];\n  }\n\n  if (!inputData || inputData.length === 0) {\n    return [{\n      json: {\n        success: true,\n        message: 'If an account with that email exists, a reset email has been sent',\n        user_exists: false,\n        status: 200\n      }\n    }];\n  }\n\n  const userData = inputData[0] || inputData;\n\n  const resetToken = crypto.randomBytes(6).toString('hex');\n\n  const resetExpires = new Date();\n  resetExpires.setHours(resetExpires.getHours() + 1);\n\n  const resetUrl = `https://ui-theta-black.vercel.app/reset-password?token=${resetToken}`;\n\n  return [{\n    json: {\n      success: true,\n      user_exists: true,\n      user_id: userData.id,\n      email: userData.email,\n      name: userData.name,\n      reset_token: resetToken,\n      reset_expires: resetExpires.toISOString(),\n      reset_url: resetUrl,\n      tenant: 'idudes',\n      status: 200\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        48
      ],
      "id": "85eec2a2-faff-437f-bb95-82032482c95a",
      "name": "genPass"
    }
  ],
  "connections": {
    "Webhook - Reset Password": {
      "main": [
        [
          {
            "node": "Check User Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User Exists": {
      "main": [
        [
          {
            "node": "genPass",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Reset Token": {
      "main": [
        [
          {
            "node": "Store Reset Token",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Reset Email",
            "type": "main",
            "index": 0
          },
          {
            "node": "Handle Non-Existent User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Reset Token": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Reset Email": {
      "main": [
        [
          {
            "node": "Log Reset Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Non-Existent User": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Reset Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "genPass": {
      "main": [
        [
          {
            "node": "Generate Reset Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}