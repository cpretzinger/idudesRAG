{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/auth/change-password",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-change-password",
      "name": "Webhook - Change Password",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [-760, 0],
      "webhookId": "idudesrag-auth-change-password"
    },
    {
      "parameters": {
        "jsCode": "const bcrypt = require('bcrypt');\n\nconst body = $json.body || {};\nconst user_id = body.user_id;\nconst currentPassword = body.current_password;\nconst newPassword = body.new_password;\nconst forceReset = body.force_reset || false;\n\nif (!user_id || !newPassword) {\n  return [{ json: { success: false, error: 'user_id and new_password are required', status: 400 } }];\n}\n\nif (String(newPassword).length < 8) {\n  return [{ json: { success: false, error: 'Password must be at least 8 characters', status: 400 } }];\n}\n\nconst passwordHash = await bcrypt.hash(newPassword, 10);\n\nreturn [{ json: { success: true, user_id, password_hash: passwordHash, current_password: currentPassword, force_reset: forceReset } }];"
      },
      "id": "prep-password-change",
      "name": "Validate & Hash Password",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-520, 0]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, password_hash FROM core.users WHERE id = $1",
        "options": {
          "queryReplacement": "={{ $json.user_id }}"
        }
      },
      "id": "get-current-user",
      "name": "Get Current User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [-280, 0],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const bcrypt = require('bcrypt');\n\nconst input = $input.first().json;\nconst currentPassword = $('Validate & Hash Password').item.json.current_password;\nconst forceReset = $('Validate & Hash Password').item.json.force_reset;\n\n// If force_reset, skip current password verification\nif (forceReset) {\n  return [{ json: { success: true, verified: true } }];\n}\n\n// Check if user exists\nif (!input || input.length === 0) {\n  return [{ json: { success: false, error: 'User not found', status: 404 } }];\n}\n\nconst userData = input[0] || input;\nconst storedHash = userData.password_hash;\n\n// Verify current password\nif (!currentPassword) {\n  return [{ json: { success: false, error: 'Current password is required', status: 400 } }];\n}\n\ntry {\n  const isValid = await bcrypt.compare(currentPassword, storedHash);\n  \n  if (!isValid) {\n    return [{ json: { success: false, error: 'Current password is incorrect', status: 401 } }];\n  }\n  \n  return [{ json: { success: true, verified: true } }];\n  \n} catch (error) {\n  return [{ json: { success: false, error: 'Password verification failed', status: 500 } }];\n}"
      },
      "id": "verify-current-password",
      "name": "Verify Current Password",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-40, 0]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE core.users SET password_hash = $1, must_reset_password = false, updated_at = NOW() AT TIME ZONE 'America/Phoenix' WHERE id = $2",
        "options": {
          "queryReplacement": "={{ $('Validate & Hash Password').item.json.password_hash }}\n{{ $('Validate & Hash Password').item.json.user_id }}"
        }
      },
      "id": "update-password",
      "name": "Update Password",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [200, 0],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.success === false ? { \"success\": false, \"error\": $json.error } : { \"success\": true, \"message\": \"Password updated successfully\" } }}",
        "options": {}
      },
      "id": "respond-change-password",
      "name": "Respond with Result",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [440, 0]
    }
  ],
  "connections": {
    "Webhook - Change Password": {
      "main": [[{ "node": "Validate & Hash Password", "type": "main", "index": 0 }]]
    },
    "Validate & Hash Password": {
      "main": [[{ "node": "Get Current User", "type": "main", "index": 0 }]]
    },
    "Get Current User": {
      "main": [[{ "node": "Verify Current Password", "type": "main", "index": 0 }]]
    },
    "Verify Current Password": {
      "main": [[{ "node": "Update Password", "type": "main", "index": 0 }]]
    },
    "Update Password": {
      "main": [[{ "node": "Respond with Result", "type": "main", "index": 0 }]]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}
