{
  "name": "10-social-content-automation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/events/episode-ready",
        "options": {
          "responseData": "={{ 'success' }}"
        }
      },
      "id": "7eb218ca-4341-4bfd-8b39-b863e270f364",
      "name": "Episode Ready Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2416,
        288
      ],
      "webhookId": "0c8869b7-c940-4654-b4d9-480e20f87aca"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'duplicate', file_id: $json.file_id } }}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "92ef6291-83d0-4422-849d-199c6626e308",
      "name": "Respond Duplicate",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -288,
        48
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'accepted', file_id: $json.file_id } }}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "248820b1-0f53-4c94-8cee-6e0adff2d73f",
      "name": "Respond Accepted",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -272,
        240
      ]
    },
    {
      "parameters": {},
      "id": "a03a9cd4-d2e6-4473-8508-140032fd4117",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2976,
        496
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    id, file_id, filename, chunk_index, text,\n    COUNT(*) OVER (PARTITION BY file_id) AS total_chunks\n  FROM core.embeddings\n  WHERE file_id = $1\n  ORDER BY chunk_index ASC;\n\n  SELECT\n    id, file_id, filename, chunk_index, text,\n    COUNT(*) OVER (PARTITION BY file_id) AS total_chunks\n  FROM core.embeddings\n  WHERE file_id = $1\n  ORDER BY chunk_index ASC\n  LIMIT 10000;",
        "options": {
          "queryReplacement": "={{ [ $json.file_id ] }}"
        }
      },
      "id": "6a57594c-b314-41b1-93e6-0f6f8e65be7b",
      "name": "Get Episode Chunks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -2448,
        544
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function normalizeEpisodeTitle(candidateTitle, candidateFilename) {\n  const pick = s => (s || '').toString();\n  const t = pick(candidateTitle);\n  const f = pick(candidateFilename);\n  const rx = /(?:^|\\b)(?:ep(?:isode)?|episode)\\s*[:#-]?\\s*([0-9]{1,4})/i;\n  let m = t.match(rx); if (m) return 'Episode ' + m[1];\n  m = f.match(rx);     if (m) return 'Episode ' + m[1];\n  return t || 'Episode';\n}\n\n// read all chunk rows from this node's input\nconst rows = $input.all().map(i => i.json);\nif (!rows.length) {\n  return [{ json: { error: 'no_chunks_found', file_id: $json.file_id || null } }];\n}\n\n// sort + merge\nrows.sort((a,b) => (a.chunk_index||0) - (b.chunk_index||0));\nconst content = rows.map(r => String(r.text||'')).join('\\n\\n');\n\nconst first = rows[0] || {};\n\n// try to read one resolver item if available, else fall back to rows\nlet resolved = {};\ntry {\n  const r = $items('ResolveEpisode', 0, 0)?.[0]?.json;\n  if (r) resolved = r;\n} catch (_) {}\n\nconst file_id  = resolved.file_id  || first.file_id  || null;\nconst filename = resolved.filename || first.filename || '';\n\nconst episode_title  = normalizeEpisodeTitle(filename, filename);\nconst numMatch = (episode_title.match(/Episode\\s+([0-9]{1,4})/i) || [])[1];\nconst episode_number = numMatch ? parseInt(numMatch, 10) : null;\n\nreturn [{\n  json: {\n    episode_content: content.slice(0, 20000),\n    episode_title,\n    episode_number,\n    file_id,\n    filename,\n    chunk_count: rows.length\n  }\n}];\n"
      },
      "id": "537f1fee-23c5-4a16-bb4f-826be5413c74",
      "name": "Combine Episode Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1808,
        544
      ]
    },
    {
      "parameters": {
        "jsCode": "// === RANK TOPICS: ROBUST PARSER + SCORER (handles non-JSON \"### ...\" inputs) ===\n\n// 1) Get raw input safely\nconst first = $input.first();\nconst raw = String((first && first.json && (first.json.output ?? first.json.text)) || '').trim();\n\n// 2) Try to parse JSON. If it's not JSON (e.g., starts with \"### INSTAGRAM REEL\"), fall back to extractor-from-text.\nlet concepts = [];\nconst stripFences = s => s.replace(/```json|```/g, '').trim();\n\nconst isLikelyJSON = (s) => {\n  const t = s.trim().slice(0, 1);\n  return t === '[' || t === '{';\n};\n\ntry {\n  if (isLikelyJSON(raw)) {\n    const clean = stripFences(raw);\n    const parsed = JSON.parse(clean);\n    // Normalize to array of concept objects\n    concepts = Array.isArray(parsed) ? parsed : (parsed.concepts || []);\n  } else {\n    // Fallback: extract concepts from non-JSON social post text with ### headers\n    const text = raw.replace(/\\r\\n/g, '\\n');\n\n    const grab = (label) => {\n      const re = new RegExp(`^###\\\\s*${label}\\\\s*\\\\n([\\\\s\\\\S]*?)(?=^###\\\\s*|\\\\Z)`, 'im');\n      const m = text.match(re);\n      return m ? m[1].trim() : '';\n    };\n\n    const ig = grab('INSTAGRAM REEL');\n    const fb = grab('FACEBOOK POST');\n    const li = grab('LINKEDIN POST');\n\n    // Helper: split into candidate lines/sentences\n    const toLines = (s) =>\n      s\n        .split('\\n')\n        .map(x => x.trim())\n        .filter(Boolean)\n        .flatMap(line => line.startsWith('- ') ? [line.slice(2)] : [line])\n        .flatMap(line => line.split(/(?<=[.!?])\\s+(?=[A-Z0-9])/)) // simple sentence split\n        .map(x => x.trim())\n        .filter(Boolean);\n\n    const igLines = toLines(ig).filter(l => !l.startsWith('#'));\n    const fbLines = toLines(fb);\n    const liLines = toLines(li).map(l => l.replace(/^-\\s*/, '').trim());\n\n    // Derive titles from first few words\n    const toTitle = (s) => (s.length > 70 ? s.slice(0, 67) + '…' : s);\n\n    // Build concept objects (aim for 15–20 total)\n    const buildConceptsFrom = (lines, tag) => {\n      return lines.slice(0, 8).map(l => ({\n        title: toTitle(l.replace(/https?:\\/\\/\\S+/g, '').trim() || `${tag} Insight`),\n        summary: l,\n        evidence_snippet: l.slice(0, 200),\n        tags: [tag, 'mindset', 'risk'].slice(0, 3),\n        // Defaults to satisfy downstream scoring if your JSON normally includes these:\n        actionability: 'medium',\n        proof_type: /%|lower|reduce|increase|mitigat|data|metric/i.test(l) ? 'data' : (/framework|steps|tips|how/i.test(l) ? 'framework' : 'story'),\n        platform_fit: 'all',\n        hook_potential: 7\n      }));\n    };\n\n    concepts = [\n      ...buildConceptsFrom(igLines, 'instagram'),\n      ...buildConceptsFrom(fbLines, 'facebook'),\n      ...buildConceptsFrom(liLines, 'linkedin'),\n    ];\n\n    // If still < 15, backfill with hashtags or keywords\n    if (concepts.length < 15) {\n      const hash = (ig.match(/#[\\w]+/g) || []).slice(0, 10);\n      for (const h of hash) {\n        concepts.push({\n          title: `Hashtag angle: ${h}`,\n          summary: `Talking point anchored on ${h}.`,\n          evidence_snippet: h,\n          tags: ['hashtag', h.replace('#','')],\n          actionability: 'low',\n          proof_type: 'story',\n          platform_fit: 'all',\n          hook_potential: 6\n        });\n        if (concepts.length >= 15) break;\n      }\n    }\n\n    // Hard guarantee 15–20 by deduping and trimming\n    const seen = new Set();\n    concepts = concepts.filter(c => {\n      const k = c.title.toLowerCase();\n      if (seen.has(k)) return false;\n      seen.add(k);\n      return true;\n    }).slice(0, 20);\n  }\n} catch (e) {\n  throw new Error('Concept JSON parse fail: ' + e.message);\n}\n\n// 3) Scoring\nconst W = { a: 0.35, p: 0.25, r: 0.20, v: 0.15, e: 0.05 };\n\nconst pick = (obj, key, fallback) => (obj && obj[key] != null ? obj[key] : fallback);\n\nconst scored = concepts.map(c => {\n  const actionability = String(pick(c, 'actionability', 'medium'));\n  const proofType = String(pick(c, 'proof_type', 'story'));\n  const platformFit = String(pick(c, 'platform_fit', 'all'));\n  const hookPotential = Number(pick(c, 'hook_potential', 7)) || 7;\n\n  const a = 7 + (actionability === 'high' ? 2 : actionability === 'medium' ? 1 : 0) + (proofType !== 'none' ? 1 : 0);\n  const p = platformFit === 'all' ? 10 : 8;\n  const r = proofType === 'data' ? 9 : (proofType === 'framework' ? 8 : 7);\n  const v = Math.max(1, Math.min(10, hookPotential));\n  const en = 7;\n\n  const wt = a * W.a + p * W.p + r * W.r + v * W.v + en * W.e;\n  return { \n    ...c, \n    scores: { weighted_total: Math.round(wt * 100) / 100 } \n  };\n});\n\n// 4) Select top 10 and enrich with episode metadata\nlet ep;\ntry {\n  const arr = $items('Combine Episode Content', 0, 0);\n  ep = (arr && arr[0] && arr[0].json) || {};\n} catch (_) {\n  ep = {};\n}\n\nconst top = scored\n  .sort((a, b) => b.scores.weighted_total - a.scores.weighted_total)\n  .slice(0, 10);\n\nreturn top.map((c, i) => ({\n  day_number: i + 1,\n  ...c,\n  episode_title: ep.episode_title || $json?.episode_title || '',\n  episode_number: ep.episode_number || $json?.episode_number || '',\n  file_id: ep.file_id || $json?.file_id || ''\n}));\n"
      },
      "id": "13ee8f05-f935-4a9f-9381-86ea5831262d",
      "name": "Rank Topics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        576
      ]
    },
    {
      "parameters": {
        "jsCode": "// Build robust enrichment queries without \"default\" leaks or empty strings\nconst cRaw = ($json.concept ?? '').trim();\nconst epRaw = ($json.episode_title ?? '').trim();\nconst catRaw = ($json.category ?? '').toLowerCase().trim();\n\n// Fallbacks that still read well if fields are missing\nconst topic = cRaw || epRaw || 'insurance agency growth';\nconst catWhitelist = ['sales_strategy','lead_gen','objection_handling','mindset','case_study'];\nconst category = catWhitelist.includes(catRaw) ? catRaw : (catRaw ? catRaw : 'mixed');\n\n// Helper to clamp strings safely\nconst clamp = (s, n) => String(s || '').slice(0, n);\n\n// Human-readable label for category intent inside strings\nconst catLabel = category === 'mixed'\n  ? 'agency growth'\n  : category.replace(/_/g, ' ');\n\n// Core themed banks\nconst BANK = {\n  sales_strategy: [\n    `proven sales techniques for ${clamp(topic, 60)}`,\n    `successful agent strategies in ${catLabel}`,\n    `step-by-step sales framework for ${clamp(topic, 60)}`,\n    `high-conversion discovery calls for ${clamp(topic, 60)}`,\n    `pipeline hygiene and follow-up cadences for ${clamp(topic, 60)}`\n  ],\n  lead_gen: [\n    `lead flow mechanics for ${clamp(topic, 60)}`,\n    `Internet Lead Secrets prospecting tactics`,\n    `Million Dollar Agency lead generation systems`,\n    `inbound vs outbound mix for ${clamp(topic, 60)}`,\n    `retention-driven referral loops for ${clamp(topic, 60)}`\n  ],\n  objection_handling: [\n    `overcoming objections in ${clamp(topic, 60)}`,\n    `objection handling scripts that convert`,\n    `client resistance and closing techniques`,\n    `price vs value reframes for ${clamp(topic, 60)}`,\n    `risk transfer explanations clients understand`\n  ],\n  mindset: [\n    `agent mindset for ${clamp(topic, 60)}`,\n    `mental toughness for insurance pros`,\n    `motivation and consistency systems`,\n    `Chaos vs Order narrative to frame risk`,\n    `habit stacks for daily production`\n  ],\n  case_study: [\n    `agent success stories related to ${clamp(topic, 60)}`,\n    `real results case studies (before/after)`,\n    `proven strategies and measurable outcomes`,\n    `field-tested playbooks for ${clamp(topic, 60)}`,\n    `risk mitigation narratives clients share`\n  ]\n};\n\n// If category is \"mixed\" or unknown, include **all themes**.\n// Otherwise: include all themes + a few extras biased to the chosen category.\nlet queries = [];\nif (category === 'mixed') {\n  queries = [\n    ...BANK.sales_strategy,\n    ...BANK.lead_gen,\n    ...BANK.objection_handling,\n    ...BANK.mindset,\n    ...BANK.case_study\n  ];\n} else {\n  const extra = [\n    `deep dive on ${catLabel} for ${clamp(topic, 60)}`,\n    `playbooks: ${catLabel} → ${clamp(topic, 60)}`,\n    `quick wins in ${catLabel} for busy agents`\n  ];\n  queries = [\n    ...BANK.sales_strategy,\n    ...BANK.lead_gen,\n    ...BANK.objection_handling,\n    ...BANK.mindset,\n    ...BANK.case_study,\n    ...extra\n  ];\n}\n\n// Clean up: dedupe, strip empties, trim, clamp length for embedding safety\nconst seen = new Set();\nconst enrichment_queries = queries\n  .map(q => (q || '').toString().trim())\n  .filter(q => q.length > 0)\n  .map(q => clamp(q, 200)) // keep each under ~200 chars for embeddings\n  .filter(q => {\n    const k = q.toLowerCase();\n    if (seen.has(k)) return false;\n    seen.add(k);\n    return true;\n  });\n\n// Absolute fallback to avoid empty array in edge cases\nif (enrichment_queries.length === 0) {\n  enrichment_queries.push(\n    `foundational strategies for ${clamp(topic, 60)}`\n  );\n}\n\nreturn {\n  ...$json,\n  enrichment_queries\n};\n"
      },
      "id": "a0d134b5-e372-4cb5-a5e0-1b15ad45eb7d",
      "name": "Generate Enrichment Queries",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3200,
        896
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$env.OPENAI_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  model: \"text-embedding-3-small\",\n  input: (Array.isArray($json.embedding_input) ? $json.embedding_input : [$json.embedding_input])\n    .filter(x => x != null)\n    .map(x => String(x).trim())\n    .filter(x => x.length > 0)\n}) }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "6e244358-9f7a-42bd-8c2e-4fef6e0d0e97",
      "name": "Build Query Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2544,
        1040
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract Embeddings (after Merge Embeddings Response)\nconst resp = $json; // merged item\nconst api = resp.data ? resp : (resp.response || resp); // some HTTP nodes nest data\nconst data = Array.isArray(api.data) ? api.data : [];\n\nif (data.length === 0) {\n  throw new Error('Embeddings response missing `data`.');\n}\n\nconst embeddings = data.map(d => d.embedding);\nreturn [{\n  json: {\n    ...resp,            // keep original context (file_id, etc.)\n    embeddings,\n    q1: embeddings[0]   // first vector for ANN\n  }\n}];\n"
      },
      "id": "6879a41e-ca4d-4865-b3a3-6096c1931171",
      "name": "Extract Embeddings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        864
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  e.text,\n  e.filename,\n  1 - (e.embedding <=> $1::vector(1536)) AS similarity\nFROM core.embeddings e\nWHERE COALESCE(e.file_id, '') <> COALESCE($2, '')\nORDER BY similarity DESC\nLIMIT 5;\n",
        "options": {
          "queryReplacement": "={{ [ JSON.stringify($json.q1), $json.file_id || '' ] }}"
        }
      },
      "id": "637f8cd5-5cc2-45f5-b3c6-118287d0d9fa",
      "name": "Search Similar (Q1)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -640,
        864
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// FULL DUMP - see everything\n  console.log('=== FULL $json DUMP ===');\n  console.log('All keys:', Object.keys($json));\n  console.log('Full object:', JSON.stringify($json, null, 2).substring(0, 500));\n\n  console.log('=== FIELD CHECKS ===');\n  console.log('response_data exists?', 'response_data' in $json);\n  console.log('response_data type:', typeof $json.response_data);\n  console.log('response_data value:', $json.response_data);\n\n  console.log('generated_content exists?', 'generated_content' in $json);\n  console.log('generated_content type:', typeof $json.generated_content);\n  console.log('generated_content value:', $json.generated_content);\n\n  console.log('=== INPUT ALL ===');\n  const all = $input.all();\n  console.log('Input count:', all.length);\n  all.forEach((item, i) => {\n    console.log(`Item ${i} keys:`, Object.keys(item.json || {}));\n  });\n\n  // Now try to find the content\n  let content = '';\n\n  // Check $json first\n  if ($json.response_data) {\n    content = typeof $json.response_data === 'string' ? $json.response_data :\n  JSON.stringify($json.response_data);\n    console.log('Found in $json.response_data, length:', content.length);\n  }\n\n  if (!content && $json.generated_content) {\n    content = typeof $json.generated_content === 'string' ? $json.generated_content :\n  JSON.stringify($json.generated_content);\n    console.log('Found in $json.generated_content, length:', content.length);\n  }\n\n  // Check all inputs\n  if (!content) {\n    for (const item of all) {\n      const j = item.json || {};\n      if (j.response_data) {\n        content = typeof j.response_data === 'string' ? j.response_data : JSON.stringify(j.response_data);\n        console.log('Found in input item response_data, length:', content.length);\n        break;\n      }\n      if (j.generated_content) {\n        content = typeof j.generated_content === 'string' ? j.generated_content :\n  JSON.stringify(j.generated_content);\n        console.log('Found in input item generated_content, length:', content.length);\n        break;\n      }\n    }\n  }\n\n  console.log('=== FINAL CONTENT ===');\n  console.log('Content found?', content.length > 0);\n  console.log('Content preview:', content.substring(0, 200));\n\n  // Parse sections\n  const instagram_content = (content.match(/###\\s*INSTAGRAM REEL\\s*\\n([\\s\\S]*?)(?=###|$)/i) || [])[1] ||\n  '';\n  const facebook_content = (content.match(/###\\s*FACEBOOK POST\\s*\\n([\\s\\S]*?)(?=###|$)/i) || [])[1] || '';\n  const linkedin_content = (content.match(/###\\s*LINKEDIN POST\\s*\\n([\\s\\S]*?)(?=###|$)/i) || [])[1] || '';\n\n  console.log('Parsed Instagram length:', instagram_content.length);\n  console.log('Parsed Facebook length:', facebook_content.length);\n  console.log('Parsed LinkedIn length:', linkedin_content.length);\n\n  return [{\n    json: {\n      ...$json,\n      instagram_content,\n      facebook_content,\n      linkedin_content,\n      generated_content: content,\n      parsed: true,\n      _debug_found_content: true,\n      _debug_keys: Object.keys($json).join(',')\n    }\n  }];"
      },
      "id": "f1c95729-a11c-45e6-8a9f-739062bf6ea8",
      "name": "Parse Generated Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2752,
        832
      ]
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "low"
        }
      },
      "id": "22011bb4-a049-45ce-a7e7-a6ace1d51861",
      "name": "Expert Review (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3488,
        1008
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prefer already-parsed JSON if n8n parsed it:\n  if (typeof $json === 'object' && $json.overall_recommendation) {\n    return [{ json: $json }];\n  }\n\n  // Get the raw string\n  const raw =\n    (typeof $json.output === 'string' && $json.output) ||\n    (typeof $json.text === 'string' && $json.text) ||\n    '';\n\n  if (!raw) {\n    return [{\n      json: {\n        overall_recommendation: \"REJECT\",\n        summary: \"No output field found in Expert Reviewer response.\",\n        action_items: [\"Check Expert Reviewer node configuration.\"]\n      }\n    }];\n  }\n\n  let obj;\n\n  // Try direct parse first (handles escaped newlines and quotes)\n  try {\n    obj = JSON.parse(raw);\n    console.log('Direct parse succeeded:', obj);\n  } catch (directError) {\n    console.log('Direct parse failed:', directError.message);\n\n    // Try removing markdown fences\n    try {\n      const cleaned = raw.replace(/```json|```/g, '').trim();\n      obj = JSON.parse(cleaned);\n      console.log('Fence-stripped parse succeeded');\n    } catch (fenceError) {\n      console.log('Fence-stripped parse failed:', fenceError.message);\n\n      // Last resort: extract first {...}\n      const s = raw.indexOf('{');\n      const e = raw.lastIndexOf('}');\n      if (s >= 0 && e > s) {\n        try {\n          obj = JSON.parse(raw.slice(s, e + 1));\n          console.log('Extraction parse succeeded');\n        } catch (extractError) {\n          console.log('Extraction parse failed:', extractError.message);\n        }\n      }\n    }\n  }\n\n  // Validate we got something useful\n  if (!obj || !obj.overall_recommendation) {\n    console.log('All parsing attempts failed, returning REJECT');\n    obj = {\n      overall_recommendation: \"REJECT\",\n      summary: \"Reviewer output was not valid JSON; ensure response_format=json_object and no quotes/fences.\",\n      action_items: [\"Re-run Expert Review with strict JSON output.\"],\n      debug_raw_output: raw.substring(0, 500)  // Include first 500 chars for debugging\n    };\n  }\n\n  return [{ json: obj }];"
      },
      "id": "3b4c5bb2-9caa-4072-929a-e237b46e951e",
      "name": "Parse Review JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3760,
        832
      ]
    },
    {
      "parameters": {
        "jsCode": "const x=$input.first().json;\nreturn [{json:{\n day_number:x.day_number,\n day_theme:x.day_theme,\n episode_title:x.episode_title,\n topic_title:x.topic_title,\n instagram_content:x.instagram_final,\n facebook_content:x.facebook_final,\n linkedin_content:x.linkedin_final,\n schedule_data: JSON.stringify(x.schedule||{}),\n review_scores: JSON.stringify(x.review_scores||{}),\n status:'pending_schedule'\n}}];"
      },
      "id": "e175a8f1-d0f2-420d-83b5-278d9bf5d413",
      "name": "Prepare Insert Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4512,
        1616
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.social_content_generated (\n  day_number,\n  day_theme,\n  episode_title,\n  topic_title,\n  instagram_content,\n  facebook_content,\n  linkedin_content,\n  schedule_data,\n  review_scores,\n  status,\n  created_at,\n  updated_at\n)\nVALUES (\n  $1,  -- day_number\n  $2,  -- day_theme\n  $3,  -- episode_title\n  $4,  -- topic_title\n  $5,  -- instagram_content\n  $6,  -- facebook_content\n  $7,  -- linkedin_content\n  $8::jsonb,  -- schedule_data (JSON)\n  $9::jsonb,  -- review_scores (JSON)\n  'pending_schedule',\n  NOW(),\n  NOW()\n)\nRETURNING id, day_number, day_theme, episode_title, topic_title;",
        "options": {
          "queryReplacement": "={{ [ $json.day_number, $json.day_theme, $json.episode_title, $json.topic_title,  $json.instagram_final, $json.facebook_final, $json.linkedin_final, JSON.stringify($json.schedule || {}), JSON.stringify($json.review_scores || {})]}}"
        }
      },
      "id": "a4a0d655-3822-42be-b608-c8133d8a9839",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        4656,
        1616
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "linkedin",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3eb7138a-8122-44e6-8383-15c85b867b2d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "linkedIn"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "690bc24b-edae-467c-b266-b463434fd384",
                    "leftValue": "facebook",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "facebook"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7d7e6d08-d4dd-4e9f-b7c9-417c5cb6de3e",
                    "leftValue": "instagram",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "instagram"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        256,
        1808
      ],
      "id": "a9ca3478-077c-4f68-a72a-02e8d7ae6f1c",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2160,
        832
      ],
      "id": "ef9d505d-e2bf-4398-b2b7-dac7f5fc339d",
      "name": "Generate Content"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}\n\n{{ $json.instagram_content }}\n\n{{ $json.facebook_content }}\n\n{{ $json.linkedin_content }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3488,
        832
      ],
      "id": "6766f2c0-0439-4a18-93d2-9d87a3661222",
      "name": "Expert Review"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a concept extractor.\n\nINPUT\nEpisode: {{ $json.episode_title }}\n\nContent (truncated to ~3,500 chars):\n{{ $json.episode_content.slice(0, 3500) }}\n\nTASK\nExtract 15–20 distinct, high-signal concepts from the content that could power social posts or talking points. Each concept should be specific, self-contained, and grounded in the text (no made-up facts).\n\nOUTPUT (valid JSON array only; no markdown, no comments)\n[\n  {\n    \"title\": \"string (concise concept name)\",\n    \"summary\": \"1–2 sentence explanation grounded in the text\",\n    \"evidence_snippet\": \"short quote or paraphrase from the content\",\n    \"tags\": [\"mindset\",\"risk\",\"tech\"]  // 2–5 topical tags\n  }\n  // ...15–20 total objects\n]\n\nSTRICT\n- 15–20 objects required.\n- No keys beyond the four specified.\n- Keep quotes/paraphrases short; do not exceed 220 chars per field.\n",
        "options": {
          "systemMessage": "=You are a world-class social copy generator for The Insurance Dudes. Produce platform-native copy that is brand-safe, specific, and immediately useful. Follow ALL rules exactly.\n\n## CONTEXT (variables)\nGenerate social content for DAY {{ $json.day_number }} — {{ $json.day_theme }}\n\nEPISODE: {{ $json.episode_title }} ({{ $json.episode_number }})\nTOPIC: {{ $json.concept }}  |  Category: {{ $json.category }}\nPriority Score: {{ $json.scores.weighted_total }} / 10\n\nPRIMARY SOURCE (truncated):\n{{ $node[\"Combine Episode Content\"].json.episode_content.substring(0, 3000) }}\n\nENRICHMENT CONTENT:\n{{ $json.enriched_content_chunks }}\n\n## BRAND & TONE\n- Voice: Clear, confident, practical. Helpful teacher, not hype.\n- Avoid jargon unless it adds clarity. Prefer concrete outcomes and next steps.\n- Never invent facts. If a metric is not in the source, use general framing (e.g., “lower premiums,” “reduced claim severity”) without numbers.\n\n## HARD OUTPUT RULES (DO NOT BREAK)\n1) OUTPUT **ONLY** these three sections, in this exact order, with these exact headers:\n   - ### INSTAGRAM REEL\n   - ### FACEBOOK POST\n   - ### LINKEDIN POST\n2) No extra text, no preamble, no epilogue, no code fences—just the three headers and their content.\n3) Each section MUST be non-empty and derived from the provided sources.\n4) Preserve any links exactly as provided.\n5) Newlines inside sections are allowed.\n\n## PLATFORM GUARDRAILS\n- Instagram Reel: 1–3 punchy lines, end with 3–6 relevant hashtags. Include a micro-CTA (save/share/listen).\n- Facebook Post: 2–4 sentences or 2–4 short bullets; one clear CTA; may include a link.\n- LinkedIn Post: Professional, concise; 2–4 bullets allowed; leadership framing; one clear CTA.\n\n## PROHIBITED\n- No medical/financial/legal claims beyond what’s in the source.\n- No disparagement, politics, or unsafe advice.\n- No placeholders like “[insert]” or “TBD”.\n\n## FORMAT (OUTPUT EXACTLY LIKE THIS)\n### INSTAGRAM REEL\n<instagram copy here>\n\n### FACEBOOK POST\n<facebook copy here>\n\n### LINKEDIN POST\n<linkedin copy here>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -544,
        576
      ],
      "id": "bae6346d-1d2f-48d1-a251-d74323939be6",
      "name": "Extract Concepts"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1792,
        1248
      ],
      "id": "dc1c89c3-ac08-4486-a0d9-4b603ece6990",
      "name": "Optimize Instagram"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4368,
        1216
      ],
      "id": "d3fb59f9-9f79-40fe-b7c3-96af671e3a49",
      "name": "Optimize LinkedIn"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2928,
        1248
      ],
      "id": "1562f59a-cdae-40d4-bee2-7a074d031760",
      "name": "Optimize Facebook"
    },
    {
      "parameters": {
        "jsCode": " // Input: $json from \"Combine Episode Content\" node\n  // Expected keys: episode_content, episode_title, episode_number, file_id, filename, chunk_count\n\n  function decodeHtml(str) {\n    if (!str) return '';\n    var s = String(str);\n    s = s.replace(/&nbsp;/g, ' ')\n         .replace(/&amp;/g, '&')\n         .replace(/&lt;/g, '<')\n         .replace(/&gt;/g, '>')\n         .replace(/&quot;/g, '\"')\n         .replace(/&apos;/g, \"'\")\n         .replace(/&#(\\d+);/g, function(_, d){\n           var n = parseInt(d,10);\n           return isFinite(n) ? String.fromCharCode(n) : _;\n         })\n         .replace(/&#x([0-9a-fA-F]+);/g, function(_, h){\n           var n = parseInt(h,16);\n           return isFinite(n) ? String.fromCharCode(n) : _;\n         });\n    return s;\n  }\n\n  function stripTags(str) {\n    if (!str) return '';\n    return String(str)\n        .replace(/<[^>]+>/g, ' ')\n        .replace(/[\\/]?[a-z]+>/gi, ' ');\n  }\n\n  function tighten(str) {\n    return String(str)\n        .replace(/[ \\t]+/g, ' ')\n        .replace(/\\s*\\n\\s*/g, '\\n')\n        .replace(/\\n{3,}/g, '\\n\\n')\n        .trim();\n  }\n\n  function denoise(str) {\n    var lines = String(str).split(/\\r?\\n/).map(function(l){ return l.trim(); });\n    var seen = new Set();\n    var out = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      var raw = lines[i];\n      if (!raw) continue;\n      if (/^[-=]{3,}/.test(raw)) continue;\n      if (/^\\d{1,2}:\\d{2}(:\\d{2})?$/.test(raw)) continue;\n      if (/^speaker\\s*\\d*[:.\\\\-]?\\s*$/i.test(raw)) continue;\n      if (/^[^\\w]+$/.test(raw)) continue;\n      if (/^(cite|time|p|te|\\/time)\\s*:?$/i.test(raw)) continue;\n\n      raw = raw.replace(/^\\s*speaker\\s*\\d*\\s*[:.\\\\-]\\s*/i, '');\n      var norm = raw.toLowerCase().replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\n\n      if (norm.length < 4) continue;\n      if (seen.has(norm)) continue;\n\n      seen.add(norm);\n      out.push(raw);\n    }\n\n    return out.join('\\n');\n  }\n\n  function cleanTitle(title, content) {\n    var t = (title || '').toString().trim();\n    var first = (content || '').toString().split(/\\r?\\n/).find(Boolean) || '';\n    var re = /(?:^|\\b)(?:ep(?:isode)?|episode)\\s*[:#-]\\s([0-9]{1,4})/i;\n\n    var m = t.match(re);\n    if (m) return 'Episode ' + m[1];\n\n    m = first.match(re);\n    if (m) return 'Episode ' + m[1];\n\n    return t || 'Episode';\n  }\n\n  // Main processing\n  var rawContent = $json.episode_content || '';\n  var rawTitle = $json.episode_title || $json.filename || '';\n\n  var decoded = decodeHtml(rawContent);\n  var noTags = stripTags(decoded);\n  var compact = tighten(noTags);\n  var cleaned = denoise(compact);\n\n  var titleClean = cleanTitle(rawTitle, cleaned);\n  var numMatch = (titleClean.match(/Episode\\s+([0-9]{1,4})/i) || [])[1];\n  var episode_number = numMatch ? parseInt(numMatch, 10) : null;\n\n  return [{\n    json: {\n      episode_title: titleClean,\n      episode_number: episode_number,\n      episode_content: cleaned,\n      file_id: $json.file_id,\n      filename: $json.filename,\n      chunk_count: $json.chunk_count\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -912,
        576
      ],
      "id": "1874d992-e7c8-4f6c-b995-aaee945d4a72",
      "name": "cleanAndPrep"
    },
    {
      "parameters": {
        "options": {
          "responseKey": "={{ 'Content Completed' }}"
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        4848,
        1536
      ],
      "id": "3c7acecc-cdc5-417e-818d-5478ceefdcff",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.is_duplicate }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "ee33090b-d785-41de-8898-c34ca4ff04ff"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TRUE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "06227c5a-f679-4ae3-8c3d-4a82560717f1",
                    "leftValue": "={{ $json.is_ready }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Ready"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -1200,
        288
      ],
      "id": "1660c011-63d8-4721-ab90-598c7665d4f3",
      "name": "Switch1"
    },
    {
      "parameters": {
        "jsCode": "// Build a clean string[] for the embeddings \"input\"\nconst v = $json.enrichment_queries;\nconst arr = Array.isArray(v) ? v : [v];\n\nconst input = arr\n  .filter(x => x != null)\n  .map(x => (typeof x === 'string' ? x : (x.query ?? x.text ?? x.title ?? x.content ?? JSON.stringify(x))))\n  .map(String)\n  .map(s => s.trim())\n  .filter(Boolean)\n  .map(s => s.slice(0, 8000))\n  .slice(0, 2048);\n\nreturn [{ json: { ...$json, embedding_input: input } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2768,
        896
      ],
      "id": "8a8d55c8-8f56-43ec-a5f3-9a7a0f3c49b1",
      "name": "buildBody"
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "0ADNv-WFOlNroUk9PVA",
          "mode": "list",
          "cachedResultName": "RAG-idudes-RAG-System",
          "cachedResultUrl": "https://drive.google.com/drive/folders/0ADNv-WFOlNroUk9PVA"
        },
        "folderId": {
          "__rl": true,
          "value": "1fSOIBLxf4bhz_ZeSlJSqqpCypYMfCSms",
          "mode": "list",
          "cachedResultName": "RAG-Completed",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1fSOIBLxf4bhz_ZeSlJSqqpCypYMfCSms"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -288,
        -96
      ],
      "id": "58d2cd12-3fe3-4c50-a638-1947cf98d62e",
      "name": "MoveToCompleted",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "OtvrT7x8YG4Mrx7n",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -960,
        832
      ],
      "id": "10d65c48-80e1-45b2-bc35-1a52d150b2f6",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"work_id\": \"{{$json.work_id}}\",\n  \"day_number\": \"{{$json.day_number}}\",\n  \"episode_title\": \"{{$json.episode_title}}\",\n  \"topic_title\": \"{{$json.topic_title}}\",\n  \"instagram_content\": \"{{$json.instagram_content}}\",\n  \"facebook_content\": \"{{$json.facebook_content}}\",\n  \"linkedin_content\": \"{{$json.linkedin_content}}\",\n  \"review_summary\": \"{{$json.review.summary}}\",\n  \"review_scores\": \"{{$json.review}}\",\n  \"attempt\": \"{{$json.attempt}}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5008,
        544
      ],
      "id": "ad602b35-d975-497d-8fb1-680c3fbf6afd",
      "name": "setFields"
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\n\nconst items = $input.all();\nreturn items.map(item => {\n  const model = 'gpt-5-nano';\n  const system_prompt_id = 'insurance_dudes_social_gen_v3'; // FIXED identifier\n\n  const user_content = {\n    day_number: item.json.day_number,\n    episode_title: item.json.episode_title,\n    enriched_chunks: item.json.enriched_content_chunks\n  };\n\n  const key_hash = crypto.createHash('sha256')\n    .update(JSON.stringify({model, system_prompt_id, user_content}))\n    .digest('hex');\n\n  return {\n    json: {\n      ...item.json,\n      gen_cache_key: key_hash,\n      gen_model: model,\n      gen_prompt_version: system_prompt_id\n    }\n  };\n});"
      },
      "id": "b4401a99-0ede-4677-903b-b5241fb8e786",
      "name": "Combine Enrichment Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        896
      ]
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\nconst items = $input.all();\n\nreturn items.map(item => {\n  const model = 'gpt-5-nano';\n\n  // prefer mapped prompt_library user_prompt; then packed enrichment; then a safe fallback\n  const user_prompt = String(\n    item.json.user_prompt\n    || item.json.enriched_content_chunks\n    || `${item.json.episode_title || ''} | Day ${item.json.day_number || '?'} | ${item.json.concept || ''}`\n  );\n\n  // align version with prompt_library (see #3)\n  const prompt_version = item.json.prompt_version || 'v2';\n  const system_prompt_id = `generator_${prompt_version}`;\n\n  const key_hash = crypto.createHash('sha256')\n    .update(JSON.stringify({\n      model,\n      system_prompt_id,\n      user_prompt,\n      episode_id: item.json.file_id || 'none'\n    }))\n    .digest('hex');\n\n  return {\n    json: {\n      ...item.json,\n      gen_cache_key: key_hash,\n      gen_model: model,\n      gen_prompt_version: prompt_version,   // <<< align with prompt library\n      system_prompt_id,\n      user_prompt\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        528
      ],
      "id": "5b98d2ee-99d5-431a-9507-b4612304be90",
      "name": "Build Gen Cache Key"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  key_hash,\n  response_data,\n  hit_count,\n  created_at\nFROM core.api_cache\nWHERE key_hash = $1\n  AND cache_type = 'generation'\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ [ $json.gen_cache_key ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        400,
        512
      ],
      "id": "2220c2af-376c-4543-a4d1-acb0a293fe24",
      "name": "Check Gen Cache",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ffab43f8-61ad-45ff-99ec-b768829635a7",
              "leftValue": "={{ $json.response_data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "98a652e8-ab03-4b17-be5c-c900d44c739b",
              "leftValue": "={{ $json.key_hash }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        592,
        624
      ],
      "id": "a3ab66f0-dc27-4eb2-b202-ac3d8edec488",
      "name": "Cache Hit?"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n  console.log('=== USE CACHED GENERATION DEBUG ===');\n  console.log('Number of items:', items.length);\n  console.log('First item keys:', Object.keys(items[0]?.json || {}));\n  console.log('response_data exists?', items[0]?.json?.response_data !== undefined);\n  console.log('response_data value:', JSON.stringify(items[0]?.json?.response_data ||\n  'MISSING').substring(0, 200));\n\n  return items.map(({ json }) => {\n    const cached = json.response_data;\n\n    const content =\n      typeof cached === 'string'\n        ? cached\n        : (cached?.content ?? cached?.data ?? cached);\n\n    const prevHits = Number(json.hit_count ?? json.cache_hit_count ?? 0);\n    const displayHits = prevHits + 1;\n\n    return {\n      json: {\n        ...json,\n        generated_content: content,\n        from_cache: true,\n        cache_hit_count_prev: prevHits,\n        cache_hit_count: displayHits,\n        cache: {\n          key: json.gen_cache_key,\n          source: 'generation',\n          hit_count: displayHits,\n          bumped_in_ui: true\n        }\n      }\n    };\n  });"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1728,
        336
      ],
      "id": "004870dc-b117-4747-b53b-8dcae9faf3fc",
      "name": "Use Cached Generation"
    },
    {
      "parameters": {
        "jsCode": "const hasAll = ['instagram_content','facebook_content','linkedin_content'].every(k => ($json[k]||'').trim());\nif (!hasAll) throw new Error('One or more sections empty before review routing.');\nreturn [{json:$json}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5472,
        1088
      ],
      "id": "55348c5e-a58a-4a5f-b554-a0777b28432a",
      "name": "contentValidator"
    },
    {
      "parameters": {
        "jsCode": "// Init Context (place after Combine Enrichment Data)\nconst crypto = require('crypto');\nconst file_id  = $json.file_id || 'non-episode';\nconst concept  = $json.concept || $json.topic_title || 'untitled';\nconst episode  = $json.episode_number || '';\nconst work_id  = crypto.createHash('sha256').update(JSON.stringify({file_id,concept,episode})).digest('hex');\nconst attempt  = Number.isFinite($json.attempt) ? $json.attempt : 0;\nreturn [{ json: { ...$json, work_id, attempt } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -32,
        784
      ],
      "id": "5dede096-0874-45c0-a678-60f39c96b941",
      "name": "InitializeContext"
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { review: $json, recommendation: $json.overall_recommendation || 'REJECT' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3904,
        832
      ],
      "id": "aa58a3fb-a1f9-4e3a-8980-218d66bdc224",
      "name": "WrapReview"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.social_content_generated\n(work_id, day_number, episode_title, topic_title,\n instagram_content, facebook_content, linkedin_content,\n status, review_summary, review_scores, attempt, updated_at)\nVALUES\n($1, $2, $3, $4, $5, $6, $7, 'approved', $8, $9::jsonb, $10, now())\nON CONFLICT (work_id) DO UPDATE SET\n  day_number        = EXCLUDED.day_number,\n  episode_title     = EXCLUDED.episode_title,\n  topic_title       = EXCLUDED.topic_title,\n  instagram_content = EXCLUDED.instagram_content,\n  facebook_content  = EXCLUDED.facebook_content,\n  linkedin_content  = EXCLUDED.linkedin_content,\n  status            = 'approved',\n  review_summary    = EXCLUDED.review_summary,\n  review_scores     = EXCLUDED.review_scores,\n  attempt           = EXCLUDED.attempt,\n  updated_at        = now();\n",
        "options": {
          "queryReplacement": "={{ [   $json.work_id, $json.day_number, $json.episode_title, $json.topic_title,   $json.instagram_content, $json.facebook_content, $json.linkedin_content,   $json.review_summary, JSON.stringify($json.review), $json.attempt ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5152,
        544
      ],
      "id": "fc531e5a-49b6-4de2-b8e8-84f4579e2f7d",
      "name": "UpsertApproved",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const apply = (fixes, txt) => {\n  if (!Array.isArray(fixes) || !txt) return txt || '';\n  let out = String(txt);\n  for (const f of fixes) {\n    const from = (f?.current || '').trim();\n    const to   = (f?.fix || '').trim();\n    if (!from || !to) continue;\n    if (!out.includes(from)) continue;\n    out = out.replace(from, to);\n  }\n  return out;\n};\n\nreturn [{\n  json: {\n    ...$json,\n    instagram_content: apply($json.review?.instagram_review?.required_fixes, $json.instagram_content),\n    facebook_content:  apply($json.review?.facebook_review?.required_fixes,  $json.facebook_content),\n    linkedin_content:  apply($json.review?.linkedin_review?.required_fixes,  $json.linkedin_content)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4672,
        896
      ],
      "id": "9a644184-4dda-411e-a991-1ac12505b5db",
      "name": "ApplyReviewFixes"
    },
    {
      "parameters": {
        "jsCode": "// Parse 3 Sections (Local) — tight version\n// INPUT accepted on this item: { strict_output? | output? | text? | content? }\n// OUTPUT: { instagram_content, facebook_content, linkedin_content, strict_output, day_number?, episode_title?, topic_title? }\n\n// ---------- helpers ----------\nconst prefer = (...vals) => {\n  for (const v of vals) if (v != null && String(v).trim() !== '') return v;\n  return '';\n};\n\nconst clean = (s) => {\n  let t = String(s ?? '');\n  return t\n    .replace(/\\r\\n/g, '\\n')\n    .replace(/[\\u200B\\u200C\\u200D\\uFEFF]/g, '')\n    .replace(/\\t/g, '  ')\n    .replace(/```[\\s\\S]*?```/g, m => m.replace(/```/g,''))   // code fences\n    .replace(/`{1,3}([^`]+)`{1,3}/g, '$1')                   // inline code\n    .replace(/^\\s*#{1,6}\\s*/gm, '')                          // md headers\n    .replace(/^\\s*[-*•·]+[\\t ]*/gm, '')                      // bullets\n    .replace(/[•·]/g, '')                                    // stray bullets\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1').replace(/__(.*?)__/g, '$1').replace(/_(.*?)_/g, '$1') // bold/italics\n    .replace(/--+/g, '—')                                    // double dashes\n    .replace(/\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g, '$1 ($2)') // [text](url) -> text (url)\n    .replace(/(^|\\s)#{2,}(?=\\s|$)/g, '$1')                   // remove bare ## clusters\n    .replace(/\\s+([.,!?;:])(?!\\w)/g, '$1')                   // space before punct\n    .replace(/[ \\t]+\\n/g, '\\n')                              // trim line-end spaces\n    .replace(/\\n{3,}/g, '\\n\\n')                              // collapse 3+ newlines\n    .replace(/[^\\S\\r\\n]{2,}/g, ' ')                          // collapse spaces\n    .trim();\n};\n\nconst getSection = (src, label) => {\n  const re = new RegExp(String.raw`^[\\t ]*###\\s*${label}\\s*:?\\s*\\n?([\\s\\S]*?)(?=^[\\t ]*###\\s*|\\Z)`,'im');\n  const m  = src.match(re);\n  return m ? m[1].trim() : '';\n};\n\nconst fallbackBlock = (src, labelRegex) => {\n  const re = new RegExp(String.raw`^\\s*${labelRegex}\\s*:\\s*`, 'im');\n  if (!re.test(src)) return '';\n  const after = src.split(re)[1] || '';\n  const next  = after.search(/^[\\t ]*###\\s*/m);\n  return (next >= 0 ? after.slice(0, next) : after).trim();\n};\n\n// ---------- 1) read input text ----------\nlet rawText = String(\n  prefer($json.strict_output, $json.output, $json.text, $json.content)\n).replace(/\\r\\n/g, '\\n').replace(/[\\u200B\\u200C\\u200D\\uFEFF]/g, '').trim();\n\nif (!rawText) throw new Error('Parse3Sections: no input text found');\n\n// ---------- 2) extract sections (with fallbacks) ----------\nlet ig = getSection(rawText, 'INSTAGRAM\\\\s*REEL');\nlet fb = getSection(rawText, 'FACEBOOK\\\\s*POST');\nlet li = getSection(rawText, 'LINKEDIN\\\\s*POST');\n\nif (!ig) ig = fallbackBlock(rawText, 'Instagram\\\\s*Reel');\nif (!fb) fb = fallbackBlock(rawText, 'Facebook');\nif (!li) li = fallbackBlock(rawText, 'LinkedIn');\n\n// ---------- 3) clean ----------\nig = clean(ig);\nfb = clean(fb);\nli = clean(li);\n\n// ---------- 4) validate ----------\nconst empty = [];\nif (!ig) empty.push('INSTAGRAM REEL');\nif (!fb) empty.push('FACEBOOK POST');\nif (!li) empty.push('LINKEDIN POST');\nif (empty.length) throw new Error('Parse3Sections: empty sections → ' + empty.join(', '));\n\n// ---------- 5) rebuild canonical strict_output ----------\nconst strict_output =\n  '### INSTAGRAM REEL\\n' + ig + '\\n\\n' +\n  '### FACEBOOK POST\\n' + fb + '\\n\\n' +\n  '### LINKEDIN POST\\n' + li;\n\n// ---------- 6) pass through light meta if present ----------\nconst out = {\n  instagram_content: ig,\n  facebook_content:  fb,\n  linkedin_content:  li,\n  strict_output\n};\nfor (const k of ['day_number','episode_title','topic_title']) {\n  if ($json[k] != null) out[k] = $json[k];\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4832,
        896
      ],
      "id": "c1852501-4df5-41b0-8431-21c3c385424c",
      "name": "Parse 3 Sections"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nreturn items.map(item => {\n  return {\n    json: {\n      ...item.json,\n      generated_content: item.json.output || item.json, // Adjust based on your node output\n      from_cache: false,\n      cache_hit_count: 0\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2464,
        832
      ],
      "id": "a7db8c86-387d-4a1c-b6f1-e326abccd17f",
      "name": "Format Fresh Generation"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.api_cache (\n  key_hash,\n  cache_type,\n  model,\n  model_version,\n  request_payload,\n  response_data,\n  cost_usd,\n  hit_count\n) VALUES (\n  $1,\n  'generation',\n  $2,\n  $3,\n  $4::jsonb,\n  $5::jsonb,\n  $6,\n  0\n)\nON CONFLICT (key_hash)\nDO UPDATE SET\n  hit_count = core.api_cache.hit_count + 1,\n  response_data = EXCLUDED.response_data;",
        "options": {
          "queryReplacement": "={{ [ $('Build Gen Cache Key').first().json.gen_cache_key, $('Build Gen Cache Key').first().json.gen_model, $('Build Gen Cache Key').first().json.gen_prompt_version, JSON.stringify($('Combine Enrichment Data').first().json), JSON.stringify($json.generated_content),0.001 ] }}",
          "replaceEmptyStrings": false
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2560,
        112
      ],
      "id": "bf67e596-4f64-4201-bd68-037205a64251",
      "name": "Store Gen Cache",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2576,
        336
      ],
      "id": "668bbd0e-78a1-457f-8bb5-3d7ee04e368f",
      "name": "Merge Cached + Store Gen"
    },
    {
      "parameters": {
        "jsCode": "// Persona (Marcus) + Brand memory consolidated\nconst persona = {\n  name: \"Marcus\",\n  archetype: \"Mid-Growth P&C Agency Owner\",\n  pain_points: [\n    \"burnout from endless follow-up calls\",\n    \"high producer turnover\",\n    \"carrier pressure and shrinking commissions\",\n    \"clunky AMS and inefficient processes\"\n  ],\n  goals: [\n    \"automate sales and service follow-up\",\n    \"build a self-sustaining team\",\n    \"reclaim time and freedom\"\n  ],\n  voice: \"straight-talking, practical, confident — mentor energy, not corporate fluff\",\n  mindset: \"growth-driven but exhausted by chaos\",\n  objections: [\n    \"my team won’t adopt new tools\",\n    \"automation makes us sound robotic\",\n    \"we tried this and it didn’t stick\"\n  ],\n  triggers: [\"time freedom\",\"chaos-to-control\",\"producers that stick\"],\n  cta_preferences: [\"Save/Share/Listen\", \"Join Agent Elite\", \"Comment your scenario\"]\n};\n\nconst brand = {\n  pillars: [\"clear\",\"confident\",\"practical\"],\n  tone_rules: [\n    \"teacher > hype\",\n    \"plain language\",\n    \"concrete outcomes only if present; else generalize\"\n  ],\n  telefunnel: [\"lead capture\",\"appointment setting\",\"follow-up automation\",\"nurture\",\"retention\"]\n};\n\nconst persona_tags = [\"mid_growth_owner\",\"burnout\",\"automation\",\"team\",\"retention\",\"time_freedom\",\"telefunnel\"];\nconst review_bias = { prefer_voice_authenticity_min: 8, persona: \"Marcus\" };\n\nreturn [{\n  json: {\n    ...$json,\n    persona, brand, persona_tags, review_bias\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2992,
        896
      ],
      "id": "b552b668-6f47-4789-8a5f-eae61707cd44",
      "name": "InjectPersonaContext"
    },
    {
      "parameters": {
        "jsCode": "const j = { ...$json };\ndelete j.enriched_content_chunks;\ndelete j.generator_raw;\ndelete j.strict_output;      // parser can rebuild from 'output'\ndelete j.openai_response;\ndelete j.results;            // rerank/raw results\nreturn [{ json: j }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2608,
        832
      ],
      "id": "e5de016a-e052-49e7-a669-649363774354",
      "name": "Trim Payload"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v3')\nORDER BY role;\n",
        "options": {
          "queryReplacement": "={{ [ $json.prompt_key, $json.prompt_version ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1632,
        816
      ],
      "id": "7b56e9b3-9d7e-4806-ba3c-4789a0e60f59",
      "name": "SelectPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v3')\nORDER BY role;\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3056,
        832
      ],
      "id": "f078cbc2-8584-4ed5-a03c-b656134d6910",
      "name": "SelectReviewerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE core.social_content_generated\nSET persona_segment = COALESCE($2, persona_segment),\n    emotion_tone    = COALESCE($3, emotion_tone),\n    updated_at      = now()\nWHERE work_id = $1;\n",
        "options": {
          "queryReplacement": "={{ [\n  $json.work_id,\n  'mid_growth_owner',     \n  'burnout_to_control'   \n] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5328,
        544
      ],
      "id": "94fbb4ee-e6a4-4f66-84c3-4c68636210a7",
      "name": "UpdatePersona",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// setPromptVersion — v3 default; v2 only when NOT approved\nconst force = String($json.force_version || '').toLowerCase();\nlet v = null;\n\nif (force === 'v2' || force === 'v3') {\n  v = force;\n} else {\n  const status = String($json.review_status || '').toUpperCase();\n  const needsStrict = (status === 'REJECT' || status === 'APPROVE_WITH_EDITS' || status === 'CHANGES_REQUESTED');\n  v = needsStrict ? 'v2' : 'v3'; // first-time (no status) falls here → 'v3'\n}\n\nreturn [{ json: { ...$json, prompt_key: 'gemini_quick_review', prompt_version: v } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4992,
        896
      ],
      "id": "997e6370-6577-4654-aa97-421465904dc0",
      "name": "SetReReviewerPrompt"
    },
    {
      "parameters": {
        "jsCode": "// setPromptVersion — v3 default; v2 only when NOT approved\nconst force = String($json.force_version || '').toLowerCase();\nlet v = null;\n\nif (force === 'v2' || force === 'v3') {\n  v = force;\n} else {\n  const status = String($json.review_status || '').toUpperCase();\n  const needsStrict = (status === 'REJECT' || status === 'APPROVE_WITH_EDITS' || status === 'CHANGES_REQUESTED');\n  v = needsStrict ? 'v2' : 'v3'; // first-time (no status) falls here → 'v3'\n}\n\nreturn [{ json: { ...$json, prompt_key: 'optimizer_instagram', prompt_version: v } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        1280
      ],
      "id": "4de62a10-fb21-48e6-8026-00bc651955f6",
      "name": "SetInstaOptimizer"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v3');\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1168,
        1264
      ],
      "id": "6fe5587d-15fc-413a-af0c-ece93377147b",
      "name": "IG:SelectOptimizerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// setPromptVersion — v3 default; v2 only when NOT approved\nconst force = String($json.force_version || '').toLowerCase();\nlet v = null;\n\nif (force === 'v2' || force === 'v3') {\n  v = force;\n} else {\n  const status = String($json.review_status || '').toUpperCase();\n  const needsStrict = (status === 'REJECT' || status === 'APPROVE_WITH_EDITS' || status === 'CHANGES_REQUESTED');\n  v = needsStrict ? 'v2' : 'v3'; // first-time (no status) falls here → 'v3'\n}\n\nreturn [{ json: { ...$json, prompt_key: 'optimizer_facebook', prompt_version: v } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2144,
        1248
      ],
      "id": "94179b67-a66e-4c35-ac97-ca4e1d3b2d76",
      "name": "SetFacebookOptimizerPrompt"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v3')\nORDER BY role;\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2288,
        1232
      ],
      "id": "8b3e9f2a-d3ae-4d70-99c6-bafc2e84aa4b",
      "name": "Facebook: OptimizerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// setPromptVersion — v3 default; v2 only when NOT approved\nconst force = String($json.force_version || '').toLowerCase();\nlet v = null;\n\nif (force === 'v2' || force === 'v3') {\n  v = force;\n} else {\n  const status = String($json.review_status || '').toUpperCase();\n  const needsStrict = (status === 'REJECT' || status === 'APPROVE_WITH_EDITS' || status === 'CHANGES_REQUESTED');\n  v = needsStrict ? 'v2' : 'v3'; // first-time (no status) falls here → 'v3'\n}\n\nreturn [{ json: { ...$json, prompt_key: 'optimizer_linkedin', prompt_version: v } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3472,
        1216
      ],
      "id": "085ce709-6805-42b6-9284-8f7abbd61dee",
      "name": "SetLinkedInOptimizerPrompt"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v3')\nORDER BY role;\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3680,
        1216
      ],
      "id": "832a6f73-bc7a-49db-ab0f-0568da383a20",
      "name": "LinkedIn: OptimizerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const t = String($json.output || $json.text || '').trim();\nconst must = ['OPTIMIZED HOOK:', 'OPTIMIZED SCRIPT:', 'OPTIMIZED CTA:', 'OPTIMIZED HASHTAGS:', 'VISUAL SUGGESTIONS:'];\nconst missing = must.filter(h => !t.includes(h));\nif (missing.length) throw new Error('IG optimizer format error: ' + missing.join(', '));\nreturn [{ json: { ...$json, optimized_instagram: t } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2192,
        1520
      ],
      "id": "18730c49-45a7-463f-9e4c-096901616689",
      "name": "IG Validator"
    },
    {
      "parameters": {
        "jsCode": "const base=$items('Apply Review Fixes',0,0)[0].json;\nconst ig=$items('Optimize Instagram (GPT-5-Nano)',0,0)[0].json.text||base.instagram_content;\nconst fb=$items('Optimize Facebook (GPT-5-Nano)',0,0)[0].json.text||base.facebook_content;\nconst li=$items('Optimize LinkedIn (GPT-5-Nano)',0,0)[0].json.text||base.linkedin_content;\nreturn { ...base, instagram_final: ig, facebook_final: fb, linkedin_final: li, ready_for_scheduling: true };"
      },
      "id": "a86fdd71-f710-4a51-bf6b-8ff801fc1e4e",
      "name": "Combine Optimized Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4352,
        1616
      ]
    },
    {
      "parameters": {
        "jsCode": "const t = String($json.output || $json.text || '').trim();\nconst must = ['OPTIMIZED LINKEDIN POST:', 'ENGAGEMENT STRATEGY NOTES:'];\nconst missing = must.filter(h => !t.includes(h));\nif (missing.length) throw new Error('LI optimizer format error: ' + missing.join(', '));\nreturn [{ json: { ...$json, optimized_linkedin: t } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4192,
        1616
      ],
      "id": "9595e793-b4ce-40dd-9d8c-7fd39d43ae83",
      "name": "LinkedIn Validator"
    },
    {
      "parameters": {
        "jsCode": "const t = String($json.output || $json.text || '').trim();\nconst must = ['OPTIMIZED FACEBOOK POST:', 'SUGGESTED COMMENT RESPONSES:'];\nconst missing = must.filter(h => !t.includes(h));\nif (missing.length) throw new Error('FB optimizer format error: ' + missing.join(', '));\nreturn [{ json: { ...$json, optimized_facebook: t } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3792,
        1344
      ],
      "id": "b9aa7707-ab3d-4e23-b629-8d213e6adbea",
      "name": "FB Validator"
    },
    {
      "parameters": {
        "jsCode": "const data = Array.isArray($json) ? $json[0] : $json;\n\nif (!data || !data.file_id) return [];\n\nreturn [{\n  json: {\n    file_id: data.file_id,\n    filename: data.filename,\n    status: data.status,\n    count: data.count,\n    total_chunks: data.total_chunks,\n    social_status: data.social_status,\n    is_duplicate: data.is_duplicate,\n    ready: true\n  }\n}];"
      },
      "id": "58aa2ed1-2c22-48eb-8f49-6bf047b42c70",
      "name": "Gate Ready",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2000,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "const b = $json.body || {};\nif (!b.file_id || !b.filename) {\n  return [{ json: { ok: false, status: 400, error: 'file_id and filename required' } }];\n}\nreturn [{ json: { ok: true, file_id: b.file_id, filename: b.filename } }];"
      },
      "id": "05e0cca3-7ddd-4c82-b245-976ad27d38bb",
      "name": "Validate Episode Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2256,
        288
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  fps.file_id,\n  fps.filename,\n  fps.rag_status AS status,\n  COALESCE(emb.cnt, 0)           AS count,\n  COALESCE(fps.rag_chunks_count,0) AS total_chunks,\n  fps.social_status,\n  (fps.social_status = 'completed')          AS is_duplicate,\n  ((fps.rag_status = 'completed') OR COALESCE(emb.cnt,0) > 0) AS is_ready\nFROM core.file_pipeline_status fps\nLEFT JOIN (\n  SELECT file_id, COUNT(*)::int AS cnt\n  FROM core.embeddings\n  GROUP BY file_id\n) emb USING (file_id)\nWHERE fps.file_id = $1;\n",
        "options": {
          "queryReplacement": "={{ [$json.file_id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1568,
        288
      ],
      "id": "dc29db68-6841-423b-abca-ae30079d7e67",
      "name": "FetchFileStatus",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Convert 0-row result to a single placeholder; keep first row if exists.\nconst rows = $input.all().map(i => i.json);\nconst r = rows[0] || {};\nconst out = {\n  file_id: $json.file_id,\n  filename: $json.filename,\n  status: r.status || 'missing',\n  count: r.count ?? 0,\n  total_chunks: r.total_chunks ?? 0,\n  social_status: r.social_status || null,\n  is_duplicate: !!r.is_duplicate,\n  is_ready: !!r.is_ready\n};\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1376,
        288
      ],
      "id": "81f6e3b3-bb58-41c2-bfd7-8906402a5cee",
      "name": "FoldStatus"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH chosen AS (\n  SELECT fps.file_id, fps.filename, fps.updated_at\n  FROM core.file_pipeline_status fps\n  WHERE\n    -- if a file_id is provided, pick it\n    (fps.file_id = $1)\n    OR\n    -- else pick the most recent completed with embeddings\n    ($1 IS NULL\n     AND fps.rag_status = 'completed'\n     AND COALESCE(fps.rag_embedding_count, 0) > 0)\n  ORDER BY fps.updated_at DESC\n  LIMIT 1\n)\nSELECT c.file_id, c.filename\nFROM chosen c;\n",
        "options": {
          "queryReplacement": "={{ [ $json.file_id || null ] }}"
        }
      },
      "id": "351c770e-054c-4a46-bb58-ab31bdd9d423",
      "name": "ResolveEpisode",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -2672,
        544
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1792,
        288
      ],
      "id": "2217ed9e-8e3c-4c83-b69a-561ad4f102b7",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "// Pack Enrichment (after Search Similar (Q1))\nconst sims = $input.all().map(i => i.json.text).filter(Boolean);\nconst enriched = sims.map((t,i)=>`[${i+1}] ${t}`).join('\\n---\\n');\n\n// pull the day metadata back in from BEFORE the DB call\nconst day = $items('Merge', 0, 0)?.[0]?.json || {};  // 'Merge' is the node right before Extract Embeddings\nreturn [{\n  json: {\n    ...day,\n    enriched_content_chunks: enriched\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        880
      ],
      "id": "7064167b-38fd-4aca-a75e-c29b95a4d17b",
      "name": "packAndRejoin"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE core.api_cache SET hit_count = hit_count + 1, updated_at = now() WHERE key_hash = $1 AND cache_type = 'generation' RETURNING response_data, hit_count, key_hash, cache_type, created_at, updated_at;",
        "options": {
          "queryReplacement": "={{ [ $json.gen_cache_key] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1008,
        416
      ],
      "id": "921bf2e7-6a64-4073-af47-243930ace133",
      "name": "bumpCacheCount",
      "executeOnce": false,
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// setPromptVersion — v3 default; v2 only when NOT approved\nconst force = String($json.force_version || '').toLowerCase();\nlet v = null;\n\nif (force === 'v2' || force === 'v3') {\n  v = force;\n} else {\n  const status = String($json.review_status || '').toUpperCase();\n  const needsStrict = (status === 'REJECT' || status === 'APPROVE_WITH_EDITS' || status === 'CHANGES_REQUESTED');\n  v = needsStrict ? 'v2' : 'v3'; // first-time (no status) falls here → 'v3'\n}\n\nreturn [{ json: { ...$json, prompt_key: 'generator', prompt_version: v } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        768
      ],
      "id": "cb08e43b-d687-4dfa-91a9-3ac53e26bf5d",
      "name": "setPromptVersion"
    },
    {
      "parameters": {
        "jsCode": "// setPromptVersion — v3 default; v2 only when NOT approved\nconst force = String($json.force_version || '').toLowerCase();\nlet v = null;\n\nif (force === 'v2' || force === 'v3') {\n  v = force;\n} else {\n  const status = String($json.review_status || '').toUpperCase();\n  const needsStrict = (status === 'REJECT' || status === 'APPROVE_WITH_EDITS' || status === 'CHANGES_REQUESTED');\n  v = needsStrict ? 'v2' : 'v3'; // first-time (no status) falls here → 'v3'\n}\n\nreturn [{ json: { ...$json, prompt_key: 'expert_review', prompt_version: v } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2912,
        832
      ],
      "id": "a99a60d0-d3d5-4e49-8810-8a1e213fd1cf",
      "name": "setPromptVersionLLMS"
    },
    {
      "parameters": {
        "jsCode": "// Just pass everything through unchanged\n  return [{\n    json: {\n      ...$json\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        528
      ],
      "id": "ceb03306-790e-47cf-961f-0ac30972432d",
      "name": "StoreCacheData"
    },
    {
      "parameters": {
        "jsCode": "// Gather fetched prompts from the Postgres node and pack for the mapper\nconst prompts = $items('SelectPrompt', 0, 0).map(i => i.json);\n\nreturn [{\n  json: {\n    prompt_key: $json.prompt_key,           // e.g., \"generator\"\n    version: $json.prompt_version,          // \"v2\" | \"v3\"\n    persona: $json.persona || {},           // provide upstream\n    brand: $json.brand || {},               // provide upstream\n    enriched: $json.enriched || {},         // provide upstream\n    payload: $json.payload || {},           // varies by node\n    prompts                                  // array of {role, content}\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2448,
        1248
      ],
      "id": "061b23f7-be86-487d-8fcf-89ddc1655565",
      "name": "packInputs"
    },
    {
      "parameters": {
        "jsCode": "// Gather fetched prompts from the Postgres node and pack for the mapper\nconst prompts = $items('SelectPrompt', 0, 0).map(i => i.json);\n\nreturn [{\n  json: {\n    prompt_key: $json.prompt_key,           // e.g., \"generator\"\n    version: $json.prompt_version,          // \"v2\" | \"v3\"\n    persona: $json.persona || {},           // provide upstream\n    brand: $json.brand || {},               // provide upstream\n    enriched: $json.enriched || {},         // provide upstream\n    payload: $json.payload || {},           // varies by node\n    prompts                                  // array of {role, content}\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3792,
        1216
      ],
      "id": "fca58855-a612-4b73-bf4b-fa07938907e7",
      "name": "packInputs1"
    },
    {
      "parameters": {
        "jsCode": "// Gather fetched prompts from the Postgres node and pack for the mapper\nconst prompts = $items('SelectPrompt', 0, 0).map(i => i.json);\n\nreturn [{\n  json: {\n    prompt_key: $json.prompt_key,           // e.g., \"generator\"\n    version: $json.prompt_version,          // \"v2\" | \"v3\"\n    persona: $json.persona || {},           // provide upstream\n    brand: $json.brand || {},               // provide upstream\n    enriched: $json.enriched || {},         // provide upstream\n    payload: $json.payload || {},           // varies by node\n    prompts                                  // array of {role, content}\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        1264
      ],
      "id": "8b6d9a97-4570-4cda-acbb-4cec257e5c11",
      "name": "packInputs2"
    },
    {
      "parameters": {
        "jsCode": "// Gather fetched prompts from the Postgres node and pack for the mapper\nconst prompts = $items('SelectPrompt', 0, 0).map(i => i.json);\n\nreturn [{\n  json: {\n    prompt_key: $json.prompt_key,           // e.g., \"generator\"\n    version: $json.prompt_version,          // \"v2\" | \"v3\"\n    persona: $json.persona || {},           // provide upstream\n    brand: $json.brand || {},               // provide upstream\n    enriched: $json.enriched || {},         // provide upstream\n    payload: $json.payload || {},           // varies by node\n    prompts                                  // array of {role, content}\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        848
      ],
      "id": "e6797133-2426-40c2-84df-31273e4dcf5e",
      "name": "packInputs3"
    },
    {
      "parameters": {
        "jsCode": "// Get prompts from SelectReviewerPrompt\nconst prompts = $items('SelectReviewerPrompt', 0, 0).map(i => i.json);\n\n// Get ALL upstream data from setPromptVersionLLMS (which has Parse Generated Content data)\nconst upstream = $('setPromptVersionLLMS').first().json || {};\n\nreturn [{\n  json: {\n    prompt_key: $json.prompt_key || upstream.prompt_key,\n    version: $json.prompt_version || upstream.prompt_version,\n    persona: upstream.persona || {},\n    brand: upstream.brand || {},\n    enriched: upstream.enriched || {},\n    payload: {\n      instagram: upstream.instagram_content || '',\n      facebook: upstream.facebook_content || '',\n      linkedin: upstream.linkedin_content || ''\n    },\n    // CRITICAL: Preserve ALL enriched fields for DB insert\n    episode_title: upstream.episode_title,\n    day_number: upstream.day_number,\n    day_theme: upstream.day_theme,\n    topic_title: upstream.topic_title,\n    topic_category: upstream.topic_category,\n    file_id: upstream.file_id,\n    work_id: upstream.work_id,\n    instagram_content: upstream.instagram_content,\n    facebook_content: upstream.facebook_content,\n    linkedin_content: upstream.linkedin_content,\n    prompts\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3200,
        832
      ],
      "id": "b2480da3-5613-4949-a94a-31ede9d04320",
      "name": "packInputs4"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "MEey0mO1avbFaAIJ",
          "mode": "list",
          "cachedResultUrl": "/workflow/MEey0mO1avbFaAIJ",
          "cachedResultName": "Prompt Mapper"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        1936,
        896
      ],
      "id": "6d5c411d-b97c-41c6-abf3-a10a8a7750fd",
      "name": "Call 'PromptMapper'"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "MEey0mO1avbFaAIJ",
          "mode": "list",
          "cachedResultUrl": "/workflow/MEey0mO1avbFaAIJ",
          "cachedResultName": "Prompt Mapper"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        3344,
        832
      ],
      "id": "c67bd1bd-1353-44a0-9584-a02b2bdcb70d",
      "name": "Call 'PromptMapper'1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "MEey0mO1avbFaAIJ",
          "mode": "list",
          "cachedResultUrl": "/workflow/MEey0mO1avbFaAIJ",
          "cachedResultName": "Prompt Mapper"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        2656,
        1248
      ],
      "id": "d72ef95f-7d52-45a5-af4f-f621e7bf02eb",
      "name": "Call 'PromptMapper'2"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "MEey0mO1avbFaAIJ",
          "mode": "list",
          "cachedResultUrl": "/workflow/MEey0mO1avbFaAIJ",
          "cachedResultName": "Prompt Mapper"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        1504,
        1296
      ],
      "id": "48d765ed-782f-4b66-ad8b-3b11b40fce85",
      "name": "Call 'PromptMapper'3"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "MEey0mO1avbFaAIJ",
          "mode": "list",
          "cachedResultUrl": "/workflow/MEey0mO1avbFaAIJ",
          "cachedResultName": "Prompt Mapper"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        4176,
        1216
      ],
      "id": "95e93daf-8f48-46c7-b80a-6a14a9f35a0d",
      "name": "Call 'PromptMapper'4"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    day_number,\n    COUNT(*) as total_posts,\n    COUNT(instagram_content) as has_instagram,\n    COUNT(facebook_content) as has_facebook,\n    COUNT(linkedin_content) as has_linkedin,\n    COUNT(CASE WHEN instagram_content IS NOT NULL\n               AND facebook_content IS NOT NULL\n               AND linkedin_content IS NOT NULL THEN 1 END) as complete_sets\n  FROM core.social_content_generated\n  WHERE created_at >= NOW() - INTERVAL '7 days'\n  GROUP BY day_number\n  ORDER BY day_number;",
        "options": {}
      },
      "id": "289af63d-8b37-4650-b6e7-7d255457abf0",
      "name": "Check Status of Posts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -2496,
        1568
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4016,
        1040
      ],
      "id": "b0551cfa-9722-461f-9cb3-7f446f3a6179",
      "name": "Merge1"
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "low"
        }
      },
      "id": "83bd2fc1-02ac-4c3b-9319-1fa3ab0f595b",
      "name": "Expert Review (GPT-5-Nano)1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4368,
        1360
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "low"
        }
      },
      "id": "b7a5fc88-0a09-4845-a89d-ca52e726fafd",
      "name": "Expert Review (GPT-5-Nano)3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2992,
        1488
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "temperature": 0.7,
          "reasoningEffort": "medium"
        }
      },
      "id": "53d7162b-f106-49d0-8c4d-97918b831982",
      "name": "Expert Review (GPT-5-Nano)4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2112,
        1088
      ],
      "credentials": {
        "openAiApi": {
          "id": "SKlesqKDEYktKT37",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "low"
        }
      },
      "id": "07358ba8-955f-4406-8793-53ef6a365002",
      "name": "Expert Review (GPT-5-Nano)5",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1744,
        1456
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "low"
        }
      },
      "id": "231d2605-f174-447d-b8e8-c654edfa3af2",
      "name": "Expert Review (GPT-5-Nano)6",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -576,
        800
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3344,
        976
      ],
      "id": "cf396584-aa73-4196-9529-f53bbfeee66e",
      "name": "Merge3"
    },
    {
      "parameters": {
        "content": "## I'm a note \nCahe hit ro setprompt version\n\nInitialize content to build cache key"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        464,
        544
      ],
      "typeVersion": 1,
      "id": "e2da9ec8-1aac-4c40-97d9-a80eb5625da4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## I'm a note \nFormat fresh to store gen cachce\n\nMerge cached + stpore egen trim\n\n"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2720,
        160
      ],
      "typeVersion": 1,
      "id": "8dba1bf5-cda9-4525-a30f-a07bd50139a3",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "jsCode": "// DEBUG: Log what we actually received\n  console.log('=== REVIEW DEBUG ===');\n  console.log('Full $json:', JSON.stringify($json, null, 2));\n\n  // CORRECTED: Check nested path AND root level\n  const rec = $json.review?.overall_recommendation || $json.overall_recommendation || $json.recommendation\n   || 'REJECT';\n  const approved = ['APPROVE','APPROVE_WITH_EDITS'].includes(rec);\n\n  console.log('overall_recommendation (nested):', $json.review?.overall_recommendation);\n  console.log('recommendation (root):', $json.recommendation);\n  console.log('Final rec:', rec);\n  console.log('Approved?', approved);\n\n  return [{\n    json: {\n      ...$json,\n      review: $json.review || $json,\n      recommendation: rec,\n      approved\n    }\n  }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4032,
        832
      ],
      "id": "3d9ad3a2-7f4c-4eb6-a7d8-0f7af12a2fec",
      "name": "cosile"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        5168,
        896
      ],
      "id": "d71e642b-3bd5-4a84-add9-069adb8b9cd9",
      "name": "Expert Review1"
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "low"
        }
      },
      "id": "b17dda3d-dc43-404b-9a68-762c56f4322b",
      "name": "Expert Review (GPT-5-Nano)2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        5152,
        1280
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "68906ea8-aba6-4158-a174-d7e0c148bf47",
              "leftValue": "={{ $json.review.overall_recommendation }}",
              "rightValue": "APPROVE",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4192,
        832
      ],
      "id": "09f44cd0-7306-4b12-8832-7697e51692f4",
      "name": "If"
    }
  ],
  "pinData": {
    "Episode Ready Webhook": [
      {
        "json": {
          "headers": {
            "host": "ai.thirdeyediagnostics.com",
            "user-agent": "axios/1.12.0",
            "content-length": "80",
            "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "ai.thirdeyediagnostics.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "3caf2985a006",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "file_id": "1q0L9_DpHWNyqPXkpqEApO1ulkiQ6djE6jv0aXdjQlHw",
            "filename": "posdcat_"
          },
          "webhookUrl": "https://ai.thirdeyediagnostics.com/webhook/events/episode-ready",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Episode Ready Webhook": {
      "main": [
        [
          {
            "node": "Validate Episode Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "ResolveEpisode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Episode Chunks": {
      "main": [
        [
          {
            "node": "Combine Episode Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Episode Content": {
      "main": [
        [
          {
            "node": "cleanAndPrep",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rank Topics": {
      "main": [
        [
          {
            "node": "Generate Enrichment Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Enrichment Queries": {
      "main": [
        [
          {
            "node": "InjectPersonaContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Query Embeddings": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract Embeddings": {
      "main": [
        [
          {
            "node": "Search Similar (Q1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Similar (Q1)": {
      "main": [
        [
          {
            "node": "packAndRejoin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Generated Content": {
      "main": [
        [
          {
            "node": "setPromptVersionLLMS",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Expert Review",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse Review JSON": {
      "main": [
        [
          {
            "node": "WrapReview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Insert Payload": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "SetLinkedInOptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SetFacebookOptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SetInstaOptimizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content": {
      "main": [
        [
          {
            "node": "Format Fresh Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review": {
      "main": [
        [
          {
            "node": "Parse Review JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Concepts": {
      "main": [
        [
          {
            "node": "Rank Topics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Instagram": {
      "main": [
        [
          {
            "node": "IG Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize LinkedIn": {
      "main": [
        [
          {
            "node": "LinkedIn Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Facebook": {
      "main": [
        [
          {
            "node": "FB Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanAndPrep": {
      "main": [
        [
          {
            "node": "Extract Concepts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Respond Duplicate",
            "type": "main",
            "index": 0
          },
          {
            "node": "MoveToCompleted",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Accepted",
            "type": "main",
            "index": 0
          },
          {
            "node": "ResolveEpisode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "buildBody": {
      "main": [
        [
          {
            "node": "Build Query Embeddings",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Extract Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setFields": {
      "main": [
        [
          {
            "node": "UpsertApproved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Enrichment Data": {
      "main": [
        [
          {
            "node": "InitializeContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Gen Cache Key": {
      "main": [
        [
          {
            "node": "Check Gen Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Gen Cache": {
      "main": [
        [
          {
            "node": "Cache Hit?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Hit?": {
      "main": [
        [
          {
            "node": "StoreCacheData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use Cached Generation": {
      "main": [
        [
          {
            "node": "Merge Cached + Store Gen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "contentValidator": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InitializeContext": {
      "main": [
        [
          {
            "node": "setPromptVersion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WrapReview": {
      "main": [
        [
          {
            "node": "cosile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UpsertApproved": {
      "main": [
        [
          {
            "node": "contentValidator",
            "type": "main",
            "index": 0
          },
          {
            "node": "UpdatePersona",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ApplyReviewFixes": {
      "main": [
        [
          {
            "node": "Parse 3 Sections",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse 3 Sections": {
      "main": [
        [
          {
            "node": "SetReReviewerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Fresh Generation": {
      "main": [
        [
          {
            "node": "Trim Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Gen Cache": {
      "main": [
        [
          {
            "node": "Merge Cached + Store Gen",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "InjectPersonaContext": {
      "main": [
        [
          {
            "node": "buildBody",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trim Payload": {
      "main": [
        [
          {
            "node": "Parse Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SelectPrompt": {
      "main": [
        [
          {
            "node": "packInputs3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SelectReviewerPrompt": {
      "main": [
        [
          {
            "node": "packInputs4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetReReviewerPrompt": {
      "main": [
        [
          {
            "node": "Expert Review1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetInstaOptimizer": {
      "main": [
        [
          {
            "node": "IG:SelectOptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IG:SelectOptimizerPrompt": {
      "main": [
        [
          {
            "node": "packInputs2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetFacebookOptimizerPrompt": {
      "main": [
        [
          {
            "node": "Facebook: OptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook: OptimizerPrompt": {
      "main": [
        [
          {
            "node": "packInputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetLinkedInOptimizerPrompt": {
      "main": [
        [
          {
            "node": "LinkedIn: OptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn: OptimizerPrompt": {
      "main": [
        [
          {
            "node": "packInputs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IG Validator": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Optimized Content": {
      "main": [
        [
          {
            "node": "Prepare Insert Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn Validator": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FB Validator": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate Ready": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Episode Payload": {
      "main": [
        [
          {
            "node": "Gate Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FetchFileStatus": {
      "main": [
        [
          {
            "node": "FoldStatus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FoldStatus": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ResolveEpisode": {
      "main": [
        [
          {
            "node": "Get Episode Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "FetchFileStatus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "packAndRejoin": {
      "main": [
        [
          {
            "node": "Combine Enrichment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setPromptVersion": {
      "main": [
        [
          {
            "node": "SelectPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setPromptVersionLLMS": {
      "main": [
        [
          {
            "node": "SelectReviewerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "StoreCacheData": {
      "main": [
        [
          {
            "node": "bumpCacheCount",
            "type": "main",
            "index": 0
          },
          {
            "node": "Use Cached Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "packInputs": {
      "main": [
        [
          {
            "node": "Call 'PromptMapper'2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "packInputs1": {
      "main": [
        [
          {
            "node": "Call 'PromptMapper'4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "packInputs2": {
      "main": [
        [
          {
            "node": "Call 'PromptMapper'3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "packInputs3": {
      "main": [
        [
          {
            "node": "Call 'PromptMapper'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "packInputs4": {
      "main": [
        [
          {
            "node": "Call 'PromptMapper'1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'PromptMapper'": {
      "main": [
        [
          {
            "node": "Generate Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'PromptMapper'1": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Call 'PromptMapper'2": {
      "main": [
        [
          {
            "node": "Optimize Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'PromptMapper'3": {
      "main": [
        [
          {
            "node": "Optimize Instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'PromptMapper'4": {
      "main": [
        [
          {
            "node": "Optimize LinkedIn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)1": {
      "ai_languageModel": [
        [
          {
            "node": "Optimize LinkedIn",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)3": {
      "ai_languageModel": [
        [
          {
            "node": "Optimize Facebook",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)4": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)5": {
      "ai_languageModel": [
        [
          {
            "node": "Optimize Instagram",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)6": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Concepts",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Expert Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cosile": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review1": {
      "main": [
        [
          {
            "node": "contentValidator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)2": {
      "ai_languageModel": [
        [
          {
            "node": "Expert Review1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e6b386df-4ca8-4358-bf6d-690d29340f75",
  "meta": {
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  },
  "id": "GAZS5v8zBJFtChup",
  "tags": []
}