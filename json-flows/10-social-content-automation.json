{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/events/episode-ready",
        "options": {
          "responseData": "={{ 'success' }}"
        }
      },
      "id": "0a9d36a8-d25e-4ace-8416-3230e47cf95e",
      "name": "Episode Ready Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1392,
        -192
      ],
      "webhookId": "0c8869b7-c940-4654-b4d9-480e20f87aca"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'duplicate', file_id: $json.file_id } }}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "7d00f004-06d3-4eca-8722-6319a15b1c8c",
      "name": "Respond Duplicate",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        528,
        -432
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'accepted', file_id: $json.file_id } }}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "1220c0fc-af45-4e9b-822f-5a2b96aff8dd",
      "name": "Respond Accepted",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        544,
        -240
      ]
    },
    {
      "parameters": {},
      "id": "e29a5a01-fa16-4c5a-a762-5760544ba139",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1952,
        16
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n    id, file_id, filename, chunk_index, text,\n    COUNT(*) OVER (PARTITION BY file_id) AS total_chunks\n  FROM core.embeddings\n  WHERE file_id = $1\n  ORDER BY chunk_index ASC;\n\n  SELECT\n    id, file_id, filename, chunk_index, text,\n    COUNT(*) OVER (PARTITION BY file_id) AS total_chunks\n  FROM core.embeddings\n  WHERE file_id = $1\n  ORDER BY chunk_index ASC\n  LIMIT 10000;",
        "options": {
          "queryReplacement": "={{ [ $json.file_id ] }}"
        }
      },
      "id": "8fed1cfa-040d-4764-9883-5c6021878a3c",
      "name": "Get Episode Chunks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1424,
        64
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function normalizeEpisodeTitle(candidateTitle, candidateFilename) {\n  const pick = s => (s || '').toString();\n  const t = pick(candidateTitle);\n  const f = pick(candidateFilename);\n  const rx = /(?:^|\\b)(?:ep(?:isode)?|episode)\\s*[:#-]?\\s*([0-9]{1,4})/i;\n  let m = t.match(rx); if (m) return 'Episode ' + m[1];\n  m = f.match(rx);     if (m) return 'Episode ' + m[1];\n  return t || 'Episode';\n}\n\n// read all chunk rows from this node's input\nconst rows = $input.all().map(i => i.json);\nif (!rows.length) {\n  return [{ json: { error: 'no_chunks_found', file_id: $json.file_id || null } }];\n}\n\n// sort + merge\nrows.sort((a,b) => (a.chunk_index||0) - (b.chunk_index||0));\nconst content = rows.map(r => String(r.text||'')).join('\\n\\n');\n\nconst first = rows[0] || {};\n\n// try to read one resolver item if available, else fall back to rows\nlet resolved = {};\ntry {\n  const r = $items('ResolveEpisode', 0, 0)?.[0]?.json;\n  if (r) resolved = r;\n} catch (_) {}\n\nconst file_id  = resolved.file_id  || first.file_id  || null;\nconst filename = resolved.filename || first.filename || '';\n\nconst episode_title  = normalizeEpisodeTitle(filename, filename);\nconst numMatch = (episode_title.match(/Episode\\s+([0-9]{1,4})/i) || [])[1];\nconst episode_number = numMatch ? parseInt(numMatch, 10) : null;\n\nreturn [{\n  json: {\n    episode_content: content.slice(0, 20000),\n    episode_title,\n    episode_number,\n    file_id,\n    filename,\n    chunk_count: rows.length\n  }\n}];\n"
      },
      "id": "ab87e3c6-802e-4911-ad2c-318821571a72",
      "name": "Combine Episode Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1264,
        64
      ]
    },
    {
      "parameters": {
        "jsCode": "// === RANK TOPICS: ROBUST PARSER + SCORER (handles non-JSON \"### ...\" inputs) ===\n\n// 1) Get raw input safely\nconst first = $input.first();\nconst raw = String((first && first.json && (first.json.output ?? first.json.text)) || '').trim();\n\n// 2) Try to parse JSON. If it's not JSON (e.g., starts with \"### INSTAGRAM REEL\"), fall back to extractor-from-text.\nlet concepts = [];\nconst stripFences = s => s.replace(/```json|```/g, '').trim();\n\nconst isLikelyJSON = (s) => {\n  const t = s.trim().slice(0, 1);\n  return t === '[' || t === '{';\n};\n\ntry {\n  if (isLikelyJSON(raw)) {\n    const clean = stripFences(raw);\n    const parsed = JSON.parse(clean);\n    // Normalize to array of concept objects\n    concepts = Array.isArray(parsed) ? parsed : (parsed.concepts || []);\n  } else {\n    // Fallback: extract concepts from non-JSON social post text with ### headers\n    const text = raw.replace(/\\r\\n/g, '\\n');\n\n    const grab = (label) => {\n      const re = new RegExp(`^###\\\\s*${label}\\\\s*\\\\n([\\\\s\\\\S]*?)(?=^###\\\\s*|\\\\Z)`, 'im');\n      const m = text.match(re);\n      return m ? m[1].trim() : '';\n    };\n\n    const ig = grab('INSTAGRAM REEL');\n    const fb = grab('FACEBOOK POST');\n    const li = grab('LINKEDIN POST');\n\n    // Helper: split into candidate lines/sentences\n    const toLines = (s) =>\n      s\n        .split('\\n')\n        .map(x => x.trim())\n        .filter(Boolean)\n        .flatMap(line => line.startsWith('- ') ? [line.slice(2)] : [line])\n        .flatMap(line => line.split(/(?<=[.!?])\\s+(?=[A-Z0-9])/)) // simple sentence split\n        .map(x => x.trim())\n        .filter(Boolean);\n\n    const igLines = toLines(ig).filter(l => !l.startsWith('#'));\n    const fbLines = toLines(fb);\n    const liLines = toLines(li).map(l => l.replace(/^-\\s*/, '').trim());\n\n    // Derive titles from first few words\n    const toTitle = (s) => (s.length > 70 ? s.slice(0, 67) + '…' : s);\n\n    // Build concept objects (aim for 15–20 total)\n    const buildConceptsFrom = (lines, tag) => {\n      return lines.slice(0, 8).map(l => ({\n        title: toTitle(l.replace(/https?:\\/\\/\\S+/g, '').trim() || `${tag} Insight`),\n        summary: l,\n        evidence_snippet: l.slice(0, 200),\n        tags: [tag, 'mindset', 'risk'].slice(0, 3),\n        // Defaults to satisfy downstream scoring if your JSON normally includes these:\n        actionability: 'medium',\n        proof_type: /%|lower|reduce|increase|mitigat|data|metric/i.test(l) ? 'data' : (/framework|steps|tips|how/i.test(l) ? 'framework' : 'story'),\n        platform_fit: 'all',\n        hook_potential: 7\n      }));\n    };\n\n    concepts = [\n      ...buildConceptsFrom(igLines, 'instagram'),\n      ...buildConceptsFrom(fbLines, 'facebook'),\n      ...buildConceptsFrom(liLines, 'linkedin'),\n    ];\n\n    // If still < 15, backfill with hashtags or keywords\n    if (concepts.length < 15) {\n      const hash = (ig.match(/#[\\w]+/g) || []).slice(0, 10);\n      for (const h of hash) {\n        concepts.push({\n          title: `Hashtag angle: ${h}`,\n          summary: `Talking point anchored on ${h}.`,\n          evidence_snippet: h,\n          tags: ['hashtag', h.replace('#','')],\n          actionability: 'low',\n          proof_type: 'story',\n          platform_fit: 'all',\n          hook_potential: 6\n        });\n        if (concepts.length >= 15) break;\n      }\n    }\n\n    // Hard guarantee 15–20 by deduping and trimming\n    const seen = new Set();\n    concepts = concepts.filter(c => {\n      const k = c.title.toLowerCase();\n      if (seen.has(k)) return false;\n      seen.add(k);\n      return true;\n    }).slice(0, 20);\n  }\n} catch (e) {\n  throw new Error('Concept JSON parse fail: ' + e.message);\n}\n\n// 3) Scoring\nconst W = { a: 0.35, p: 0.25, r: 0.20, v: 0.15, e: 0.05 };\n\nconst pick = (obj, key, fallback) => (obj && obj[key] != null ? obj[key] : fallback);\n\nconst scored = concepts.map(c => {\n  const actionability = String(pick(c, 'actionability', 'medium'));\n  const proofType = String(pick(c, 'proof_type', 'story'));\n  const platformFit = String(pick(c, 'platform_fit', 'all'));\n  const hookPotential = Number(pick(c, 'hook_potential', 7)) || 7;\n\n  const a = 7 + (actionability === 'high' ? 2 : actionability === 'medium' ? 1 : 0) + (proofType !== 'none' ? 1 : 0);\n  const p = platformFit === 'all' ? 10 : 8;\n  const r = proofType === 'data' ? 9 : (proofType === 'framework' ? 8 : 7);\n  const v = Math.max(1, Math.min(10, hookPotential));\n  const en = 7;\n\n  const wt = a * W.a + p * W.p + r * W.r + v * W.v + en * W.e;\n  return { \n    ...c, \n    scores: { weighted_total: Math.round(wt * 100) / 100 } \n  };\n});\n\n// 4) Select top 10 and enrich with episode metadata\nlet ep;\ntry {\n  const arr = $items('Combine Episode Content', 0, 0);\n  ep = (arr && arr[0] && arr[0].json) || {};\n} catch (_) {\n  ep = {};\n}\n\nconst top = scored\n  .sort((a, b) => b.scores.weighted_total - a.scores.weighted_total)\n  .slice(0, 10);\n\nreturn top.map((c, i) => ({\n  day_number: i + 1,\n  ...c,\n  episode_title: ep.episode_title || $json?.episode_title || '',\n  episode_number: ep.episode_number || $json?.episode_number || '',\n  file_id: ep.file_id || $json?.file_id || ''\n}));\n"
      },
      "id": "d511b9a3-31de-4a8a-a7e9-e3b4036df0c2",
      "name": "Rank Topics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "// Build robust enrichment queries without \"default\" leaks or empty strings\nconst cRaw = ($json.concept ?? '').trim();\nconst epRaw = ($json.episode_title ?? '').trim();\nconst catRaw = ($json.category ?? '').toLowerCase().trim();\n\n// Fallbacks that still read well if fields are missing\nconst topic = cRaw || epRaw || 'insurance agency growth';\nconst catWhitelist = ['sales_strategy','lead_gen','objection_handling','mindset','case_study'];\nconst category = catWhitelist.includes(catRaw) ? catRaw : (catRaw ? catRaw : 'mixed');\n\n// Helper to clamp strings safely\nconst clamp = (s, n) => String(s || '').slice(0, n);\n\n// Human-readable label for category intent inside strings\nconst catLabel = category === 'mixed'\n  ? 'agency growth'\n  : category.replace(/_/g, ' ');\n\n// Core themed banks\nconst BANK = {\n  sales_strategy: [\n    `proven sales techniques for ${clamp(topic, 60)}`,\n    `successful agent strategies in ${catLabel}`,\n    `step-by-step sales framework for ${clamp(topic, 60)}`,\n    `high-conversion discovery calls for ${clamp(topic, 60)}`,\n    `pipeline hygiene and follow-up cadences for ${clamp(topic, 60)}`\n  ],\n  lead_gen: [\n    `lead flow mechanics for ${clamp(topic, 60)}`,\n    `Internet Lead Secrets prospecting tactics`,\n    `Million Dollar Agency lead generation systems`,\n    `inbound vs outbound mix for ${clamp(topic, 60)}`,\n    `retention-driven referral loops for ${clamp(topic, 60)}`\n  ],\n  objection_handling: [\n    `overcoming objections in ${clamp(topic, 60)}`,\n    `objection handling scripts that convert`,\n    `client resistance and closing techniques`,\n    `price vs value reframes for ${clamp(topic, 60)}`,\n    `risk transfer explanations clients understand`\n  ],\n  mindset: [\n    `agent mindset for ${clamp(topic, 60)}`,\n    `mental toughness for insurance pros`,\n    `motivation and consistency systems`,\n    `Chaos vs Order narrative to frame risk`,\n    `habit stacks for daily production`\n  ],\n  case_study: [\n    `agent success stories related to ${clamp(topic, 60)}`,\n    `real results case studies (before/after)`,\n    `proven strategies and measurable outcomes`,\n    `field-tested playbooks for ${clamp(topic, 60)}`,\n    `risk mitigation narratives clients share`\n  ]\n};\n\n// If category is \"mixed\" or unknown, include **all themes**.\n// Otherwise: include all themes + a few extras biased to the chosen category.\nlet queries = [];\nif (category === 'mixed') {\n  queries = [\n    ...BANK.sales_strategy,\n    ...BANK.lead_gen,\n    ...BANK.objection_handling,\n    ...BANK.mindset,\n    ...BANK.case_study\n  ];\n} else {\n  const extra = [\n    `deep dive on ${catLabel} for ${clamp(topic, 60)}`,\n    `playbooks: ${catLabel} → ${clamp(topic, 60)}`,\n    `quick wins in ${catLabel} for busy agents`\n  ];\n  queries = [\n    ...BANK.sales_strategy,\n    ...BANK.lead_gen,\n    ...BANK.objection_handling,\n    ...BANK.mindset,\n    ...BANK.case_study,\n    ...extra\n  ];\n}\n\n// Clean up: dedupe, strip empties, trim, clamp length for embedding safety\nconst seen = new Set();\nconst enrichment_queries = queries\n  .map(q => (q || '').toString().trim())\n  .filter(q => q.length > 0)\n  .map(q => clamp(q, 200)) // keep each under ~200 chars for embeddings\n  .filter(q => {\n    const k = q.toLowerCase();\n    if (seen.has(k)) return false;\n    seen.add(k);\n    return true;\n  });\n\n// Absolute fallback to avoid empty array in edge cases\nif (enrichment_queries.length === 0) {\n  enrichment_queries.push(\n    `foundational strategies for ${clamp(topic, 60)}`\n  );\n}\n\nreturn {\n  ...$json,\n  enrichment_queries\n};\n"
      },
      "id": "2c38fef9-4fa4-42c0-917e-2002782e507c",
      "name": "Generate Enrichment Queries",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2176,
        416
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$env.OPENAI_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  model: \"text-embedding-3-small\",\n  input: (Array.isArray($json.embedding_input) ? $json.embedding_input : [$json.embedding_input])\n    .filter(x => x != null)\n    .map(x => String(x).trim())\n    .filter(x => x.length > 0)\n}) }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "7defc2f3-0726-4731-9970-003056af4d9d",
      "name": "Build Query Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1520,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract Embeddings (after Merge Embeddings Response)\nconst resp = $json; // merged item\nconst api = resp.data ? resp : (resp.response || resp); // some HTTP nodes nest data\nconst data = Array.isArray(api.data) ? api.data : [];\n\nif (data.length === 0) {\n  throw new Error('Embeddings response missing `data`.');\n}\n\nconst embeddings = data.map(d => d.embedding);\nreturn [{\n  json: {\n    ...resp,            // keep original context (file_id, etc.)\n    embeddings,\n    q1: embeddings[0]   // first vector for ANN\n  }\n}];\n"
      },
      "id": "c98cf213-3567-4e6e-b078-914eb860aa18",
      "name": "Extract Embeddings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        544
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  e.text,\n  e.filename,\n  1 - (e.embedding <=> $1::vector(1536)) AS similarity\nFROM core.embeddings e\nWHERE COALESCE(e.file_id, '') <> COALESCE($2, '')\nORDER BY similarity DESC\nLIMIT 5;\n",
        "options": {
          "queryReplacement": "={{ [ JSON.stringify($json.q1), $json.file_id || '' ] }}"
        }
      },
      "id": "90c286bb-5b27-455a-b836-59ac1ce01abf",
      "name": "Search Similar (Q1)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -32,
        416
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// PARSE + CLEAN — extracts 3 sections and sanitizes junk characters/markdown.\n// Keeps real hashtags (#Tag) but removes markdown headers, bullets, **bold**, etc.\n\n// ---------- helpers ----------\nconst prefer = (...vals) => {\n  for (const v of vals) if (v != null && String(v).trim() !== '') return v;\n  return '';\n};\n\nconst safeGetNodeJson = (name) => {\n  try {\n    const arr = $items(name, 0, 0);\n    if (Array.isArray(arr) && arr[0]?.json) return arr[0].json;\n  } catch {}\n  try {\n    const j = $node[name]?.json;\n    if (j) return j;\n  } catch {}\n  return null;\n};\n\nconst readFromInputs = () => {\n  const all = $input.all();\n  for (const it of all) {\n    const j = it.json || {};\n    if (typeof j.strict_output === 'string' && j.strict_output.trim()) return j.strict_output;\n    if (typeof j.output        === 'string' && j.output.trim())        return j.output;\n    if (typeof j.text          === 'string' && j.text.trim())          return j.text;\n    if (typeof j.content       === 'string' && j.content.trim())       return j.content;\n  }\n  return '';\n};\n\n// Cleanup: remove markdown/bullets/excess whitespace but KEEP real hashtags.\nconst clean = (s) => {\n  let t = String(s ?? '');\n  t = t\n    .replace(/\\r\\n/g, '\\n')\n    .replace(/[\\u200B\\u200C\\u200D\\uFEFF]/g, '') // zero-width\n    .replace(/\\t/g, '  ');\n  t = t.replace(/```[\\s\\S]*?```/g, m => m.replace(/```/g, '')); // code fences\n  t = t.replace(/`{1,3}([^`]+)`{1,3}/g, '$1');                  // inline code\n  t = t.replace(/^\\s*#{1,6}\\s*/gm, '');                         // md headers\n  t = t.replace(/^\\s*[-*•·]+[\\t ]*/gm, '');                     // bullets at BOl\n  t = t.replace(/[•·]/g, '');                                   // stray bullets\n  t = t.replace(/\\*\\*(.*?)\\*\\*/g, '$1').replace(/__(.*?)__/g, '$1').replace(/_(.*?)_/g, '$1'); // bold/italics\n  t = t.replace(/--+/g, '—');                                   // double dash\n  t = t.replace(/\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g, '$1 ($2)'); // [text](url)\n  t = t.replace(/(^|\\s)#{2,}(?=\\s|$)/g, '$1');                  // bare ##\n  t = t.replace(/\\s+([.,!?;:])(?!\\w)/g, '$1');                  // space before punct\n  t = t.replace(/[ \\t]+\\n/g, '\\n');                             // trim line-end spaces\n  t = t.replace(/\\n{3,}/g, '\\n\\n');                             // collapse 3+ newlines\n  t = t.replace(/[^\\S\\r\\n]{2,}/g, ' ');                         // collapse spaces\n  return t.trim();\n};\n\n// ---------- 1) SOURCE TEXT ----------\nconst cur = $json || {};\nlet rawText = String(\n  prefer(cur.strict_output, cur.output, cur.text, cur.content, readFromInputs())\n);\n\n// Normalize outer text\nrawText = rawText\n  .replace(/\\r\\n/g, '\\n')\n  .replace(/[\\u200B\\u200C\\u200D\\uFEFF]/g, '')\n  .trim();\n\nif (!rawText) {\n  return [{\n    json: {\n      day_number: null,\n      day_theme: '',\n      episode_title: '',\n      topic_title: '',\n      instagram_content: '',\n      facebook_content: '',\n      linkedin_content: '',\n      _parser_note: 'No generator output found.'\n    }\n  }];\n}\n\n// Soft header enforcement (optional)\nconst STRICT_HEADERS = false;\nconst hasIG = /^([\\t ]*)###\\s*INSTAGRAM\\s*REEL\\s*:?$/im.test(rawText);\nconst hasFB = /^([\\t ]*)###\\s*FACEBOOK\\s*POST\\s*:?$/im.test(rawText);\nconst hasLI = /^([\\t ]*)###\\s*LINKEDIN\\s*POST\\s*:?$/im.test(rawText);\nif (STRICT_HEADERS && !(hasIG && hasFB && hasLI)) {\n  throw new Error('Format error: expected all three headers (### INSTAGRAM REEL / ### FACEBOOK POST / ### LINKEDIN POST).');\n}\n\n// ---------- 2) SECTION EXTRACTION ----------\nconst getSection = (src, label) => {\n  const re = new RegExp(\n    String.raw`^[\\t ]*###\\s*${label}\\s*:?\\s*\\n?([\\s\\S]*?)(?=^[\\t ]*###\\s*|\\Z)`,\n    'im'\n  );\n  const m = src.match(re);\n  return m ? m[1].trim() : '';\n};\n\nlet instagram_content = getSection(rawText, 'INSTAGRAM\\\\s*REEL');\nlet facebook_content  = getSection(rawText, 'FACEBOOK\\\\s*POST');\nlet linkedin_content  = getSection(rawText, 'LINKEDIN\\\\s*POST');\n\n// Fallback label-style blocks\nconst fallbackByLabel = (labelRegex) => {\n  const re = new RegExp(String.raw`^\\s*${labelRegex}\\s*:\\s*`, 'im');\n  if (!re.test(rawText)) return '';\n  const after = rawText.split(re)[1] || '';\n  const nextHeader = after.search(/^[\\t ]*###\\s*/m);\n  return (nextHeader >= 0 ? after.slice(0, nextHeader) : after).trim();\n};\n\nif (!instagram_content) instagram_content = fallbackByLabel('Instagram\\\\s*Reel');\nif (!facebook_content)  facebook_content  = fallbackByLabel('Facebook');\nif (!linkedin_content)  linkedin_content  = fallbackByLabel('LinkedIn');\n\n// Clean sections\ninstagram_content = clean(instagram_content);\nfacebook_content  = clean(facebook_content);\nlinkedin_content  = clean(linkedin_content);\n\n// ---------- 2b) VALIDATOR ----------\nconst missing = [];\nif (!instagram_content) missing.push('INSTAGRAM REEL');\nif (!facebook_content)  missing.push('FACEBOOK POST');\nif (!linkedin_content)  missing.push('LINKEDIN POST');\nif (missing.length) {\n  throw new Error('Empty sections after parsing: ' + missing.join(', '));\n}\n\n// ---------- 2c) REBUILD strict_output ----------\nconst strict_output =\n  '### INSTAGRAM REEL\\n' + instagram_content + '\\n\\n' +\n  '### FACEBOOK POST\\n' + facebook_content  + '\\n\\n' +\n  '### LINKEDIN POST\\n' + linkedin_content;\n\n// ---------- 3) METADATA (prefer Combine Enrichment Data) ----------\nconst CED = safeGetNodeJson('Combine Enrichment Data') || {};\nconst EP  = safeGetNodeJson('Combine Episode Content') || {};\n\nconst out = {\n  day_number:    prefer(cur.day_number,  CED.day_number,  EP.day_number)  || null,\n  day_theme:     prefer(cur.day_theme,   CED.day_theme,   EP.day_theme)   || '',\n  episode_title: prefer(cur.episode_title, CED.episode_title, EP.episode_title) || '',\n  topic_title:   prefer(cur.concept, cur.topic_title, CED.concept, CED.title, CED.topic_title, EP.concept) || '',\n  instagram_content,\n  facebook_content,\n  linkedin_content,\n  strict_output\n};\n\nif (![out.instagram_content, out.facebook_content, out.linkedin_content].some(s => String(s).trim())) {\n  out._parser_note = 'Parsed sections were empty after cleanup. Check upstream output formatting.';\n}\n\nreturn [{ json: out }];\n"
      },
      "id": "0f288ac7-441c-4c10-974a-9210eded63a2",
      "name": "Parse Generated Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2656,
        32
      ]
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "low"
        }
      },
      "id": "db8b5715-4060-4ee0-b0c2-588ce0c58b77",
      "name": "Expert Review (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2880,
        720
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prefer already-parsed JSON if n8n parsed it:\nif (typeof $json === 'object' && $json.overall_recommendation) {\n  return [{ json: $json }];\n}\n\n// Otherwise, look for a string field and parse:\nconst raw =\n  (typeof $json.output === 'string' && $json.output) ||\n  (typeof $json.text === 'string' && $json.text) ||\n  '';\n\nlet obj;\ntry {\n  obj = JSON.parse(raw.replace(/```json|```/g, '').trim());\n} catch {\n  // Last resort: extract first {...}\n  const s = raw.indexOf('{');\n  const e = raw.lastIndexOf('}');\n  if (s >= 0 && e > s) {\n    try { obj = JSON.parse(raw.slice(s, e + 1)); } catch {}\n  }\n}\n\nif (!obj || !obj.overall_recommendation) {\n  obj = {\n    overall_recommendation: \"REJECT\",\n    summary: \"Reviewer output was not valid JSON; ensure response_format=json_object and no quotes/fences.\",\n    action_items: [\"Re-run Expert Review with strict JSON output.\"]\n  };\n}\n\nreturn [{ json: obj }];\n"
      },
      "id": "77f40240-06a0-44ae-a9e1-d6201005bcbe",
      "name": "Parse Review JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3696,
        416
      ]
    },
    {
      "parameters": {
        "jsCode": "const x=$input.first().json;\nreturn [{json:{\n day_number:x.day_number,\n day_theme:x.day_theme,\n episode_title:x.episode_title,\n topic_title:x.topic_title,\n instagram_content:x.instagram_final,\n facebook_content:x.facebook_final,\n linkedin_content:x.linkedin_final,\n schedule_data: JSON.stringify(x.schedule||{}),\n review_scores: JSON.stringify(x.review_scores||{}),\n status:'pending_schedule'\n}}];"
      },
      "id": "68591dc5-5dff-43c7-912c-47d2601da430",
      "name": "Prepare Insert Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3728,
        1152
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.social_content_generated (\n  day_number,\n  day_theme,\n  episode_title,\n  topic_title,\n  instagram_content,\n  facebook_content,\n  linkedin_content,\n  schedule_data,\n  review_scores,\n  status,\n  created_at,\n  updated_at\n)\nVALUES (\n  $1,  -- day_number\n  $2,  -- day_theme\n  $3,  -- episode_title\n  $4,  -- topic_title\n  $5,  -- instagram_content\n  $6,  -- facebook_content\n  $7,  -- linkedin_content\n  $8::jsonb,  -- schedule_data (JSON)\n  $9::jsonb,  -- review_scores (JSON)\n  'pending_schedule',\n  NOW(),\n  NOW()\n)\nRETURNING id, day_number, day_theme, episode_title, topic_title;",
        "options": {
          "queryReplacement": "={{ [ $json.day_number, $json.day_theme, $json.episode_title, $json.topic_title,  $json.instagram_final, $json.facebook_final, $json.linkedin_final, JSON.stringify($json.schedule || {}), JSON.stringify($json.review_scores || {})]}}"
        }
      },
      "id": "1e00dfe6-1da7-4afa-9d87-554278434ea1",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        3888,
        1152
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "linkedin",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3eb7138a-8122-44e6-8383-15c85b867b2d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "linkedIn"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "690bc24b-edae-467c-b266-b463434fd384",
                    "leftValue": "facebook",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "facebook"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7d7e6d08-d4dd-4e9f-b7c9-417c5cb6de3e",
                    "leftValue": "instagram",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "instagram"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        656,
        1328
      ],
      "id": "35a27bb9-e777-46f9-8a04-04b497a448a4",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.system_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1696,
        416
      ],
      "id": "29304aaf-1014-4fb8-8e38-6d385e34b764",
      "name": "Generate Content"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3392,
        416
      ],
      "id": "3cca5996-caf5-4559-b4eb-75f4a5b240fd",
      "name": "Expert Review"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a concept extractor.\n\nINPUT\nEpisode: {{ $json.episode_title }}\n\nContent (truncated to ~3,500 chars):\n{{ $json.episode_content.slice(0, 3500) }}\n\nTASK\nExtract 15–20 distinct, high-signal concepts from the content that could power social posts or talking points. Each concept should be specific, self-contained, and grounded in the text (no made-up facts).\n\nOUTPUT (valid JSON array only; no markdown, no comments)\n[\n  {\n    \"title\": \"string (concise concept name)\",\n    \"summary\": \"1–2 sentence explanation grounded in the text\",\n    \"evidence_snippet\": \"short quote or paraphrase from the content\",\n    \"tags\": [\"mindset\",\"risk\",\"tech\"]  // 2–5 topical tags\n  }\n  // ...15–20 total objects\n]\n\nSTRICT\n- 15–20 objects required.\n- No keys beyond the four specified.\n- Keep quotes/paraphrases short; do not exceed 220 chars per field.\n",
        "options": {
          "systemMessage": "=You are a world-class social copy generator for The Insurance Dudes. Produce platform-native copy that is brand-safe, specific, and immediately useful. Follow ALL rules exactly.\n\n## CONTEXT (variables)\nGenerate social content for DAY {{ $json.day_number }} — {{ $json.day_theme }}\n\nEPISODE: {{ $json.episode_title }} ({{ $json.episode_number }})\nTOPIC: {{ $json.concept }}  |  Category: {{ $json.category }}\nPriority Score: {{ $json.scores.weighted_total }} / 10\n\nPRIMARY SOURCE (truncated):\n{{ $node[\"Combine Episode Content\"].json.episode_content.substring(0, 3000) }}\n\nENRICHMENT CONTENT:\n{{ $json.enriched_content_chunks }}\n\n## BRAND & TONE\n- Voice: Clear, confident, practical. Helpful teacher, not hype.\n- Avoid jargon unless it adds clarity. Prefer concrete outcomes and next steps.\n- Never invent facts. If a metric is not in the source, use general framing (e.g., “lower premiums,” “reduced claim severity”) without numbers.\n\n## HARD OUTPUT RULES (DO NOT BREAK)\n1) OUTPUT **ONLY** these three sections, in this exact order, with these exact headers:\n   - ### INSTAGRAM REEL\n   - ### FACEBOOK POST\n   - ### LINKEDIN POST\n2) No extra text, no preamble, no epilogue, no code fences—just the three headers and their content.\n3) Each section MUST be non-empty and derived from the provided sources.\n4) Preserve any links exactly as provided.\n5) Newlines inside sections are allowed.\n\n## PLATFORM GUARDRAILS\n- Instagram Reel: 1–3 punchy lines, end with 3–6 relevant hashtags. Include a micro-CTA (save/share/listen).\n- Facebook Post: 2–4 sentences or 2–4 short bullets; one clear CTA; may include a link.\n- LinkedIn Post: Professional, concise; 2–4 bullets allowed; leadership framing; one clear CTA.\n\n## PROHIBITED\n- No medical/financial/legal claims beyond what’s in the source.\n- No disparagement, politics, or unsafe advice.\n- No placeholders like “[insert]” or “TBD”.\n\n## FORMAT (OUTPUT EXACTLY LIKE THIS)\n### INSTAGRAM REEL\n<instagram copy here>\n\n### FACEBOOK POST\n<facebook copy here>\n\n### LINKEDIN POST\n<linkedin copy here>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -144,
        96
      ],
      "id": "9e956b03-83c1-4098-8462-3659092e2941",
      "name": "Extract Concepts"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1360,
        784
      ],
      "id": "3c27199c-930b-47e1-ab31-5705f11bec1e",
      "name": "Optimize Instagram"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3520,
        736
      ],
      "id": "89dffacc-c2b2-4b86-a6b7-d39dd132272c",
      "name": "Optimize LinkedIn"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.user_prompt }}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2288,
        768
      ],
      "id": "b5ca3554-b16c-4706-92ed-5348c34fb422",
      "name": "Optimize Facebook"
    },
    {
      "parameters": {
        "jsCode": " // Input: $json from \"Combine Episode Content\" node\n  // Expected keys: episode_content, episode_title, episode_number, file_id, filename, chunk_count\n\n  function decodeHtml(str) {\n    if (!str) return '';\n    var s = String(str);\n    s = s.replace(/&nbsp;/g, ' ')\n         .replace(/&amp;/g, '&')\n         .replace(/&lt;/g, '<')\n         .replace(/&gt;/g, '>')\n         .replace(/&quot;/g, '\"')\n         .replace(/&apos;/g, \"'\")\n         .replace(/&#(\\d+);/g, function(_, d){\n           var n = parseInt(d,10);\n           return isFinite(n) ? String.fromCharCode(n) : _;\n         })\n         .replace(/&#x([0-9a-fA-F]+);/g, function(_, h){\n           var n = parseInt(h,16);\n           return isFinite(n) ? String.fromCharCode(n) : _;\n         });\n    return s;\n  }\n\n  function stripTags(str) {\n    if (!str) return '';\n    return String(str)\n        .replace(/<[^>]+>/g, ' ')\n        .replace(/[\\/]?[a-z]+>/gi, ' ');\n  }\n\n  function tighten(str) {\n    return String(str)\n        .replace(/[ \\t]+/g, ' ')\n        .replace(/\\s*\\n\\s*/g, '\\n')\n        .replace(/\\n{3,}/g, '\\n\\n')\n        .trim();\n  }\n\n  function denoise(str) {\n    var lines = String(str).split(/\\r?\\n/).map(function(l){ return l.trim(); });\n    var seen = new Set();\n    var out = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      var raw = lines[i];\n      if (!raw) continue;\n      if (/^[-=]{3,}/.test(raw)) continue;\n      if (/^\\d{1,2}:\\d{2}(:\\d{2})?$/.test(raw)) continue;\n      if (/^speaker\\s*\\d*[:.\\\\-]?\\s*$/i.test(raw)) continue;\n      if (/^[^\\w]+$/.test(raw)) continue;\n      if (/^(cite|time|p|te|\\/time)\\s*:?$/i.test(raw)) continue;\n\n      raw = raw.replace(/^\\s*speaker\\s*\\d*\\s*[:.\\\\-]\\s*/i, '');\n      var norm = raw.toLowerCase().replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\n\n      if (norm.length < 4) continue;\n      if (seen.has(norm)) continue;\n\n      seen.add(norm);\n      out.push(raw);\n    }\n\n    return out.join('\\n');\n  }\n\n  function cleanTitle(title, content) {\n    var t = (title || '').toString().trim();\n    var first = (content || '').toString().split(/\\r?\\n/).find(Boolean) || '';\n    var re = /(?:^|\\b)(?:ep(?:isode)?|episode)\\s*[:#-]\\s([0-9]{1,4})/i;\n\n    var m = t.match(re);\n    if (m) return 'Episode ' + m[1];\n\n    m = first.match(re);\n    if (m) return 'Episode ' + m[1];\n\n    return t || 'Episode';\n  }\n\n  // Main processing\n  var rawContent = $json.episode_content || '';\n  var rawTitle = $json.episode_title || $json.filename || '';\n\n  var decoded = decodeHtml(rawContent);\n  var noTags = stripTags(decoded);\n  var compact = tighten(noTags);\n  var cleaned = denoise(compact);\n\n  var titleClean = cleanTitle(rawTitle, cleaned);\n  var numMatch = (titleClean.match(/Episode\\s+([0-9]{1,4})/i) || [])[1];\n  var episode_number = numMatch ? parseInt(numMatch, 10) : null;\n\n  return [{\n    json: {\n      episode_title: titleClean,\n      episode_number: episode_number,\n      episode_content: cleaned,\n      file_id: $json.file_id,\n      filename: $json.filename,\n      chunk_count: $json.chunk_count\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -512,
        96
      ],
      "id": "82dacd86-21fe-4ed2-ae06-c5b81e1e29c1",
      "name": "cleanAndPrep"
    },
    {
      "parameters": {
        "options": {
          "responseKey": "={{ 'Content Completed' }}"
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        4080,
        1152
      ],
      "id": "d634fecb-9e13-4386-9408-5c21bcab92f7",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.is_duplicate }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "ee33090b-d785-41de-8898-c34ca4ff04ff"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TRUE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "06227c5a-f679-4ae3-8c3d-4a82560717f1",
                    "leftValue": "={{ $json.is_ready }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Ready"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "91fb158a-f54f-4ef3-a508-4d48a29a6c92",
                    "leftValue": "={{ $json.is_ready }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Not Ready"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -384,
        -192
      ],
      "id": "56bf96c2-ef45-4b7b-84c4-66c8835f5438",
      "name": "Switch1"
    },
    {
      "parameters": {
        "jsCode": "// Build a clean string[] for the embeddings \"input\"\nconst v = $json.enrichment_queries;\nconst arr = Array.isArray(v) ? v : [v];\n\nconst input = arr\n  .filter(x => x != null)\n  .map(x => (typeof x === 'string' ? x : (x.query ?? x.text ?? x.title ?? x.content ?? JSON.stringify(x))))\n  .map(String)\n  .map(s => s.trim())\n  .filter(Boolean)\n  .map(s => s.slice(0, 8000))\n  .slice(0, 2048);\n\nreturn [{ json: { ...$json, embedding_input: input } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1744,
        416
      ],
      "id": "99426ee4-b87e-4a59-a354-c0757b2efaed",
      "name": "buildBody"
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "0ADNv-WFOlNroUk9PVA",
          "mode": "list",
          "cachedResultName": "RAG-idudes-RAG-System",
          "cachedResultUrl": "https://drive.google.com/drive/folders/0ADNv-WFOlNroUk9PVA"
        },
        "folderId": {
          "__rl": true,
          "value": "1fSOIBLxf4bhz_ZeSlJSqqpCypYMfCSms",
          "mode": "list",
          "cachedResultName": "RAG-Completed",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1fSOIBLxf4bhz_ZeSlJSqqpCypYMfCSms"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        528,
        -576
      ],
      "id": "7fd5e9c5-edd5-4280-9878-ebd7c06ee43a",
      "name": "MoveToCompleted",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "OtvrT7x8YG4Mrx7n",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -560,
        352
      ],
      "id": "917c69a9-b0db-4aa5-8a61-295c51ba04ec",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"work_id\": \"{{$json.work_id}}\",\n  \"day_number\": \"{{$json.day_number}}\",\n  \"episode_title\": \"{{$json.episode_title}}\",\n  \"topic_title\": \"{{$json.topic_title}}\",\n  \"instagram_content\": \"{{$json.instagram_content}}\",\n  \"facebook_content\": \"{{$json.facebook_content}}\",\n  \"linkedin_content\": \"{{$json.linkedin_content}}\",\n  \"review_summary\": \"{{$json.review.summary}}\",\n  \"review_scores\": \"{{$json.review}}\",\n  \"attempt\": \"{{$json.attempt}}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4784,
        352
      ],
      "id": "742f3362-3896-4a8e-b1bd-1069f3e68252",
      "name": "setFields"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        960,
        304
      ],
      "id": "db8720db-fe7c-444d-a40a-bce869c98e07",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\n\nconst items = $input.all();\nreturn items.map(item => {\n  const model = 'gpt-5-nano';\n  const system_prompt_id = 'insurance_dudes_social_gen_v3'; // FIXED identifier\n\n  const user_content = {\n    day_number: item.json.day_number,\n    episode_title: item.json.episode_title,\n    enriched_chunks: item.json.enriched_content_chunks\n  };\n\n  const key_hash = crypto.createHash('sha256')\n    .update(JSON.stringify({model, system_prompt_id, user_content}))\n    .digest('hex');\n\n  return {\n    json: {\n      ...item.json,\n      gen_cache_key: key_hash,\n      gen_model: model,\n      gen_prompt_version: system_prompt_id\n    }\n  };\n});"
      },
      "id": "bafd0217-2931-4653-8ab0-1b236ada9dc5",
      "name": "Combine Enrichment Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        416
      ]
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\n\nconst items = $input.all();\nreturn items.map(item => {\n  const model = 'gpt-5-nano';\n\n  // ✅ Use a template literal (backticks) so multi-line is valid\n  const system = String.raw`You are a formatting-strict social copy generator for The Insurance Dudes.\n\nOUTPUT CONTRACT (MUST PASS ALL)\n1) Output EXACTLY three sections, in this order, with these exact headers:\n   ### INSTAGRAM REEL\n   ### FACEBOOK POST\n   ### LINKEDIN POST\n2) No text before the first header or after the last section.\n3) Each section MUST be non-empty text (may include newlines). Do not include code fences.\n4) Do not invent facts. Preserve links as given.\n\nFORMAT (OUTPUT EXACTLY LIKE THIS)\n### INSTAGRAM REEL\n<instagram copy here>\n\n### FACEBOOK POST\n<facebook copy here>\n\n### LINKEDIN POST\n<linkedin copy here>\n\nSELF-CHECK (STRICT)\n- If any header is missing, or any section is empty, REWRITE UNTIL ALL CHECKS PASS.\n- If any extra text exists outside the three sections, REMOVE IT.\n- When finished, ensure the output starts with \"### INSTAGRAM REEL\" and ends with the LinkedIn section text (no trailing blank lines beyond one newline).`;\n\n  const user = String(item.json.enriched_content_chunks || '');\n  const episode_id = item.json.file_id || 'none';\n  const prompt_version = 'gen_v3';\n\n  const key_hash = crypto.createHash('sha256')\n    .update(JSON.stringify({ model, system, user, episode_id, prompt_version }))\n    .digest('hex');\n\n  return {\n    json: {\n      ...item.json,\n      gen_cache_key: key_hash,\n      gen_model: model,\n      gen_prompt_version: prompt_version,\n      // optionally pass the prompts along if you want to inspect them downstream\n      system_prompt: system,\n      user_prompt: user\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        416
      ],
      "id": "52125537-cae3-42c4-bb54-a254b3173664",
      "name": "Build Gen Cache Key"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  key_hash,\n  response_data,\n  hit_count,\n  created_at\nFROM core.api_cache\nWHERE key_hash = $1\n  AND cache_type = 'generation'\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ $json.gen_cache_key }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        624,
        416
      ],
      "id": "5a3fa323-a0dc-446c-8444-a4ee3cc5be83",
      "name": "Check Gen Cache",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ffab43f8-61ad-45ff-99ec-b768829635a7",
              "leftValue": "={{ $json.response_data }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "98a652e8-ab03-4b17-be5c-c900d44c739b",
              "leftValue": "={{ $json.key_hash }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        768,
        416
      ],
      "id": "b7bb69c0-246f-4170-8211-a4bd5e11a5b2",
      "name": "Cache Hit?"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nreturn items.map(item => {\n  const cached = item.json.response_data;\n\n  return {\n    json: {\n      ...item.json,\n      generated_content: cached.content || cached,\n      from_cache: true,\n      cache_hit_count: item.json.hit_count || 0\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        224
      ],
      "id": "94055e52-9f5a-4332-9bab-4bccdf3fa8c6",
      "name": "Use Cached Generation"
    },
    {
      "parameters": {
        "jsCode": "// Wrap + normalize for routing\nconst rec = $json.overall_recommendation || 'REJECT';\nconst approved = ['APPROVE','APPROVE_WITH_EDITS'].includes(rec);\nreturn [{ json: { ...$json, review: $json, recommendation: rec, approved } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4192,
        416
      ],
      "id": "81da5c36-ebfa-4ca4-a564-85fb1c57ae0d",
      "name": "setupRouter"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4048,
        256
      ],
      "id": "155b8d0b-da6d-4d8c-8f08-c8f44998626c",
      "name": "Merge content + Review"
    },
    {
      "parameters": {
        "jsCode": "const hasAll = ['instagram_content','facebook_content','linkedin_content'].every(k => ($json[k]||'').trim());\nif (!hasAll) throw new Error('One or more sections empty before review routing.');\nreturn [{json:$json}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5152,
        352
      ],
      "id": "72690b8e-17cb-40aa-98a0-eb1b67bd3de4",
      "name": "contentValidator"
    },
    {
      "parameters": {
        "jsCode": "// Init Context (place after Combine Enrichment Data)\nconst crypto = require('crypto');\nconst file_id  = $json.file_id || 'non-episode';\nconst concept  = $json.concept || $json.topic_title || 'untitled';\nconst episode  = $json.episode_number || '';\nconst work_id  = crypto.createHash('sha256').update(JSON.stringify({file_id,concept,episode})).digest('hex');\nconst attempt  = Number.isFinite($json.attempt) ? $json.attempt : 0;\nreturn [{ json: { ...$json, work_id, attempt } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        512
      ],
      "id": "e75b440c-d305-4714-b7b4-dbb2ee2164cc",
      "name": "InitializeContext"
    },
    {
      "parameters": {
        "jsCode": "// Increment Attempt (Route C)\nconst nextAttempt = (Number($json.attempt) || 0) + 1;\nreturn [{ json: { ...$json, attempt: nextAttempt } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4656,
        816
      ],
      "id": "9f9a29a5-b560-4888-b729-95cda812b5b7",
      "name": "incrementCounter"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.social_content_generated\n(work_id, status, review_summary, review_scores, attempt, updated_at)\nVALUES\n($1, 'rejected', $2, $3::jsonb, $4, now())\nON CONFLICT (work_id) DO UPDATE SET\n  status         = 'rejected',\n  review_summary = EXCLUDED.review_summary,\n  review_scores  = EXCLUDED.review_scores,\n  attempt        = EXCLUDED.attempt,\n  updated_at     = now();\n",
        "options": {
          "queryReplacement": "={{ [$json.work_id, $json.review.summary || '', JSON.stringify($json.review), $json.attempt] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4800,
        816
      ],
      "id": "564a517f-ac3f-4b56-8cf4-9e000222f442",
      "name": "UPSERT Failed Attempt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.recommendation}}",
                    "rightValue": "APPROVE",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "95897a2c-88c3-41c6-bdd7-b92c6b177bd5"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "APPROVE"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4ed7457c-d098-44d9-bf9a-900d04863836",
                    "leftValue": "={{$json.recommendation}}",
                    "rightValue": "APPROVE_WITH_EDITS",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "APPROVE_WITH_EDITS"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6463f661-457f-40c6-8ef6-e663697f6f9d",
                    "leftValue": "={{$json.recommendation}}",
                    "rightValue": "REJECT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "REJECT"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        4320,
        400
      ],
      "id": "a56a1fc2-2d55-4228-8675-5ad257a16ed8",
      "name": "Recommendation"
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { review: $json, recommendation: $json.overall_recommendation || 'REJECT' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3856,
        416
      ],
      "id": "cfcbf70c-4154-4321-bbe6-a4090a33d589",
      "name": "WrapReview"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.social_content_generated\n(work_id, day_number, episode_title, topic_title,\n instagram_content, facebook_content, linkedin_content,\n status, review_summary, review_scores, attempt, updated_at)\nVALUES\n($1, $2, $3, $4, $5, $6, $7, 'approved', $8, $9::jsonb, $10, now())\nON CONFLICT (work_id) DO UPDATE SET\n  day_number        = EXCLUDED.day_number,\n  episode_title     = EXCLUDED.episode_title,\n  topic_title       = EXCLUDED.topic_title,\n  instagram_content = EXCLUDED.instagram_content,\n  facebook_content  = EXCLUDED.facebook_content,\n  linkedin_content  = EXCLUDED.linkedin_content,\n  status            = 'approved',\n  review_summary    = EXCLUDED.review_summary,\n  review_scores     = EXCLUDED.review_scores,\n  attempt           = EXCLUDED.attempt,\n  updated_at        = now();\n",
        "options": {
          "queryReplacement": "={{ [   $json.work_id, $json.day_number, $json.episode_title, $json.topic_title,   $json.instagram_content, $json.facebook_content, $json.linkedin_content,   $json.review_summary, JSON.stringify($json.review), $json.attempt ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4960,
        352
      ],
      "id": "607b47bc-641e-404d-a835-56da4ab70100",
      "name": "UpsertApproved",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const apply = (fixes, txt) => {\n  if (!Array.isArray(fixes) || !txt) return txt || '';\n  let out = String(txt);\n  for (const f of fixes) {\n    const from = (f?.current || '').trim();\n    const to   = (f?.fix || '').trim();\n    if (!from || !to) continue;\n    if (!out.includes(from)) continue;\n    out = out.replace(from, to);\n  }\n  return out;\n};\n\nreturn [{\n  json: {\n    ...$json,\n    instagram_content: apply($json.review?.instagram_review?.required_fixes, $json.instagram_content),\n    facebook_content:  apply($json.review?.facebook_review?.required_fixes,  $json.facebook_content),\n    linkedin_content:  apply($json.review?.linkedin_review?.required_fixes,  $json.linkedin_content)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4144,
        608
      ],
      "id": "b24450e0-ede9-48a3-b544-1c0b575a0580",
      "name": "ApplyReviewFixes"
    },
    {
      "parameters": {
        "jsCode": "// Parse 3 Sections (Local) — tight version\n// INPUT accepted on this item: { strict_output? | output? | text? | content? }\n// OUTPUT: { instagram_content, facebook_content, linkedin_content, strict_output, day_number?, episode_title?, topic_title? }\n\n// ---------- helpers ----------\nconst prefer = (...vals) => {\n  for (const v of vals) if (v != null && String(v).trim() !== '') return v;\n  return '';\n};\n\nconst clean = (s) => {\n  let t = String(s ?? '');\n  return t\n    .replace(/\\r\\n/g, '\\n')\n    .replace(/[\\u200B\\u200C\\u200D\\uFEFF]/g, '')\n    .replace(/\\t/g, '  ')\n    .replace(/```[\\s\\S]*?```/g, m => m.replace(/```/g,''))   // code fences\n    .replace(/`{1,3}([^`]+)`{1,3}/g, '$1')                   // inline code\n    .replace(/^\\s*#{1,6}\\s*/gm, '')                          // md headers\n    .replace(/^\\s*[-*•·]+[\\t ]*/gm, '')                      // bullets\n    .replace(/[•·]/g, '')                                    // stray bullets\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1').replace(/__(.*?)__/g, '$1').replace(/_(.*?)_/g, '$1') // bold/italics\n    .replace(/--+/g, '—')                                    // double dashes\n    .replace(/\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g, '$1 ($2)') // [text](url) -> text (url)\n    .replace(/(^|\\s)#{2,}(?=\\s|$)/g, '$1')                   // remove bare ## clusters\n    .replace(/\\s+([.,!?;:])(?!\\w)/g, '$1')                   // space before punct\n    .replace(/[ \\t]+\\n/g, '\\n')                              // trim line-end spaces\n    .replace(/\\n{3,}/g, '\\n\\n')                              // collapse 3+ newlines\n    .replace(/[^\\S\\r\\n]{2,}/g, ' ')                          // collapse spaces\n    .trim();\n};\n\nconst getSection = (src, label) => {\n  const re = new RegExp(String.raw`^[\\t ]*###\\s*${label}\\s*:?\\s*\\n?([\\s\\S]*?)(?=^[\\t ]*###\\s*|\\Z)`,'im');\n  const m  = src.match(re);\n  return m ? m[1].trim() : '';\n};\n\nconst fallbackBlock = (src, labelRegex) => {\n  const re = new RegExp(String.raw`^\\s*${labelRegex}\\s*:\\s*`, 'im');\n  if (!re.test(src)) return '';\n  const after = src.split(re)[1] || '';\n  const next  = after.search(/^[\\t ]*###\\s*/m);\n  return (next >= 0 ? after.slice(0, next) : after).trim();\n};\n\n// ---------- 1) read input text ----------\nlet rawText = String(\n  prefer($json.strict_output, $json.output, $json.text, $json.content)\n).replace(/\\r\\n/g, '\\n').replace(/[\\u200B\\u200C\\u200D\\uFEFF]/g, '').trim();\n\nif (!rawText) throw new Error('Parse3Sections: no input text found');\n\n// ---------- 2) extract sections (with fallbacks) ----------\nlet ig = getSection(rawText, 'INSTAGRAM\\\\s*REEL');\nlet fb = getSection(rawText, 'FACEBOOK\\\\s*POST');\nlet li = getSection(rawText, 'LINKEDIN\\\\s*POST');\n\nif (!ig) ig = fallbackBlock(rawText, 'Instagram\\\\s*Reel');\nif (!fb) fb = fallbackBlock(rawText, 'Facebook');\nif (!li) li = fallbackBlock(rawText, 'LinkedIn');\n\n// ---------- 3) clean ----------\nig = clean(ig);\nfb = clean(fb);\nli = clean(li);\n\n// ---------- 4) validate ----------\nconst empty = [];\nif (!ig) empty.push('INSTAGRAM REEL');\nif (!fb) empty.push('FACEBOOK POST');\nif (!li) empty.push('LINKEDIN POST');\nif (empty.length) throw new Error('Parse3Sections: empty sections → ' + empty.join(', '));\n\n// ---------- 5) rebuild canonical strict_output ----------\nconst strict_output =\n  '### INSTAGRAM REEL\\n' + ig + '\\n\\n' +\n  '### FACEBOOK POST\\n' + fb + '\\n\\n' +\n  '### LINKEDIN POST\\n' + li;\n\n// ---------- 6) pass through light meta if present ----------\nconst out = {\n  instagram_content: ig,\n  facebook_content:  fb,\n  linkedin_content:  li,\n  strict_output\n};\nfor (const k of ['day_number','episode_title','topic_title']) {\n  if ($json[k] != null) out[k] = $json[k];\n}\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4288,
        608
      ],
      "id": "8e221e5b-7213-4cf3-9735-74fb2de32e31",
      "name": "Parse 3 Sections"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.user_prompt }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "systemMessage": "={{ $json.system_prompt }}",
          "frequencyPenalty": 0,
          "maxOutputTokens": 1000,
          "candidateCount": 1,
          "presencePenalty": 0,
          "temperature": 0.2,
          "topP": 1,
          "topK": 40
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        4848,
        608
      ],
      "id": "db3198f6-0511-4ebf-b14c-bd23215ca6ae",
      "name": "Re-Review",
      "credentials": {
        "googlePalmApi": {
          "id": "Vn8aHuolEUQbTpfv",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nreturn items.map(item => {\n  return {\n    json: {\n      ...item.json,\n      generated_content: item.json.output || item.json, // Adjust based on your node output\n      from_cache: false,\n      cache_hit_count: 0\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        416
      ],
      "id": "d367facb-846d-4e66-b1cc-2587715e8762",
      "name": "Format Fresh Generation"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.api_cache (\n  key_hash,\n  cache_type,\n  model,\n  model_version,\n  request_payload,\n  response_data,\n  cost_usd,\n  hit_count\n) VALUES (\n  $1,\n  'generation',\n  $2,\n  $3,\n  $4::jsonb,\n  $5::jsonb,\n  $6,\n  0\n)\nON CONFLICT (key_hash)\nDO UPDATE SET\n  hit_count = core.api_cache.hit_count + 1,\n  response_data = EXCLUDED.response_data;",
        "options": {
          "queryReplacement": "={{ [ $('Build Gen Cache Key').first().json.gen_cache_key, $('Build Gen Cache Key').first().json.gen_model, $('Build Gen Cache Key').first().json.gen_prompt_version, JSON.stringify($('Combine Enrichment Data').first().json), JSON.stringify($json.generated_content),0.001 ] }}",
          "replaceEmptyStrings": false
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2096,
        288
      ],
      "id": "5cd4cf6d-22da-4a48-89d2-cd0ed09e70e3",
      "name": "Store Gen Cache",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2352,
        0
      ],
      "id": "6478285a-0e0a-44da-aa17-757722175a1a",
      "name": "Merge Cached + Store Gen"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    review: $json,\n    recommendation: $json.overall_recommendation || 'REJECT'\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5280,
        608
      ],
      "id": "4b0be200-c521-476d-98d3-5d40bebe8d4a",
      "name": "Parse Re-Review"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "426532dd-9984-4347-a981-d76c429763dc",
              "leftValue": "={{ ['APPROVE','APPROVE_WITH_EDITS'].includes($json.recommendation) }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5488,
        608
      ],
      "id": "3b01bf75-6c66-437d-af21-4738126dc597",
      "name": "If:Approved"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.social_content_generated\n(work_id, day_number, episode_title, topic_title,\n instagram_content, facebook_content, linkedin_content,\n status, review_summary, review_scores, attempt, updated_at)\nVALUES\n($1, $2, $3, $4, $5, $6, $7, 'approved', $8, $9::jsonb, $10, now())\nON CONFLICT (work_id) DO UPDATE SET\n  day_number        = EXCLUDED.day_number,\n  episode_title     = EXCLUDED.episode_title,\n  topic_title       = EXCLUDED.topic_title,\n  instagram_content = EXCLUDED.instagram_content,\n  facebook_content  = EXCLUDED.facebook_content,\n  linkedin_content  = EXCLUDED.linkedin_content,\n  status            = 'approved',\n  review_summary    = EXCLUDED.review_summary,\n  review_scores     = EXCLUDED.review_scores,\n  attempt           = EXCLUDED.attempt,\n  updated_at        = now();\n",
        "options": {
          "queryReplacement": "={{ [   $json.work_id, $json.day_number, $json.episode_title, $json.topic_title,   $json.instagram_content, $json.facebook_content, $json.linkedin_content,   $json.review_summary, JSON.stringify($json.review), $json.attempt ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5504,
        832
      ],
      "id": "e09bcb06-5a96-487c-b8c8-e1c3248eeaf8",
      "name": "UpsertApprovedOnReReview",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "05c0e2a5-c0e2-469b-af62-4a1910de5706",
              "leftValue": "={{ $json.attempt < 2 }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5008,
        816
      ],
      "id": "c7e61369-9a1c-4c96-b36d-0cefd095d65f",
      "name": "If: Less Than 2 Attempts"
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { ...$json, prompt_version: 'gen_v3_strict' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5200,
        800
      ],
      "id": "f04f75fb-091d-43e8-a6ee-a6025104d6e5",
      "name": "useStrictPrompt"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE core.social_content_generated\nSET status='needs_manual', updated_at=now()\nWHERE work_id=$1;\n",
        "options": {
          "queryReplacement": "={{ [$json.work_id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5200,
        1056
      ],
      "id": "27392b82-5faa-45d1-a0b3-b5ed5c63ca0d",
      "name": "statusManual",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.file_id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "0ADNv-WFOlNroUk9PVA",
          "mode": "list",
          "cachedResultName": "RAG-idudes-RAG-System",
          "cachedResultUrl": "https://drive.google.com/drive/folders/0ADNv-WFOlNroUk9PVA"
        },
        "folderId": {
          "__rl": true,
          "value": "1hy5SJQVgP43NUB_xC5i7fpnjng-rpJpD",
          "mode": "list",
          "cachedResultName": "RAG-ManualReview",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1hy5SJQVgP43NUB_xC5i7fpnjng-rpJpD"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        5200,
        1184
      ],
      "id": "aab398fb-a770-4ad4-b4ca-cedbbb87d37d",
      "name": "Move2ManualReview",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "OtvrT7x8YG4Mrx7n",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Persona (Marcus) + Brand memory consolidated\nconst persona = {\n  name: \"Marcus\",\n  archetype: \"Mid-Growth P&C Agency Owner\",\n  pain_points: [\n    \"burnout from endless follow-up calls\",\n    \"high producer turnover\",\n    \"carrier pressure and shrinking commissions\",\n    \"clunky AMS and inefficient processes\"\n  ],\n  goals: [\n    \"automate sales and service follow-up\",\n    \"build a self-sustaining team\",\n    \"reclaim time and freedom\"\n  ],\n  voice: \"straight-talking, practical, confident — mentor energy, not corporate fluff\",\n  mindset: \"growth-driven but exhausted by chaos\",\n  objections: [\n    \"my team won’t adopt new tools\",\n    \"automation makes us sound robotic\",\n    \"we tried this and it didn’t stick\"\n  ],\n  triggers: [\"time freedom\",\"chaos-to-control\",\"producers that stick\"],\n  cta_preferences: [\"Save/Share/Listen\", \"Join Agent Elite\", \"Comment your scenario\"]\n};\n\nconst brand = {\n  pillars: [\"clear\",\"confident\",\"practical\"],\n  tone_rules: [\n    \"teacher > hype\",\n    \"plain language\",\n    \"concrete outcomes only if present; else generalize\"\n  ],\n  telefunnel: [\"lead capture\",\"appointment setting\",\"follow-up automation\",\"nurture\",\"retention\"]\n};\n\nconst persona_tags = [\"mid_growth_owner\",\"burnout\",\"automation\",\"team\",\"retention\",\"time_freedom\",\"telefunnel\"];\nconst review_bias = { prefer_voice_authenticity_min: 8, persona: \"Marcus\" };\n\nreturn [{\n  json: {\n    ...$json,\n    persona, brand, persona_tags, review_bias\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1968,
        416
      ],
      "id": "dcc929c6-bca3-4434-92db-87278d9d5188",
      "name": "InjectPersonaContext"
    },
    {
      "parameters": {
        "jsCode": "const j = { ...$json };\ndelete j.enriched_content_chunks;\ndelete j.generator_raw;\ndelete j.strict_output;      // parser can rebuild from 'output'\ndelete j.openai_response;\ndelete j.results;            // rerank/raw results\nreturn [{ json: j }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2512,
        16
      ],
      "id": "766d4d92-27f3-4055-9347-984f63e65828",
      "name": "Trim Payload"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v2');\n",
        "options": {
          "queryReplacement": "=$1 = {{$json.prompt_key}}\n$2 = {{$json.prompt_version}}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1392,
        384
      ],
      "id": "6249cc75-ffba-4f03-8a0f-345807b5951b",
      "name": "SelectPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all().map(it => it.json);\nconst sys = rows.find(r => r.role==='system')?.content || '';\nconst usr = rows.find(r => r.role==='user')?.content   || '';\nreturn [{ json: { ...$json, system_prompt: sys, user_prompt: usr } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1536,
        416
      ],
      "id": "b182b1f0-b000-40a9-b48d-274c1e50c66e",
      "name": "MapperFunction"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v2');\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2880,
        416
      ],
      "id": "34bcad25-dcd6-4aee-99c9-1c1daf3aaff9",
      "name": "SelectReviewerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all().map(it => it.json);\nconst sys = rows.find(r => r.role==='system')?.content || '';\nconst usr = rows.find(r => r.role==='user')?.content   || '';\nreturn [{ json: { ...$json, system_prompt: sys, user_prompt: usr } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3008,
        416
      ],
      "id": "881697d7-afbc-4315-9ce7-3daa385b23e5",
      "name": "MapperFunctionReviewer"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE core.social_content_generated\nSET persona_segment = COALESCE($2, persona_segment),\n    emotion_tone    = COALESCE($3, emotion_tone),\n    updated_at      = now()\nWHERE work_id = $1;\n",
        "options": {
          "queryReplacement": "={{ [\n  $json.work_id,\n  'mid_growth_owner',     \n  'burnout_to_control'   \n] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        5072,
        160
      ],
      "id": "f00642e0-a77c-4423-b731-1a8da78a3291",
      "name": "UpdatePersona",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3232,
        416
      ],
      "id": "1c2b3ee5-54a3-4c78-b02f-6b6c3260f0e2",
      "name": "Merge content + ReviewPrompts"
    },
    {
      "parameters": {
        "jsCode": "{\n  \"prompt_key\": \"gemini_quick_review\",           // or 'expert_review', 'gemini_quick_review', 'optimizer_linkedin', etc.\n  \"prompt_version\": \"v2\"               // persona-aware; use 'v1' if you want neutral\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4416,
        608
      ],
      "id": "dad80fa4-feba-41e4-908c-6e5d7187d81c",
      "name": "SetReReviewerPrompt"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v2');\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4560,
        608
      ],
      "id": "faa93898-5cd8-489c-b283-f56f721ab514",
      "name": "SelectReReviewerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all().map(it => it.json);\nconst sys = rows.find(r => r.role==='system')?.content || '';\nconst usr = rows.find(r => r.role==='user')?.content   || '';\nreturn [{ json: { ...$json, system_prompt: sys, user_prompt: usr } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4688,
        608
      ],
      "id": "1aaddd34-7a47-4cbb-8161-d29623bc1fa5",
      "name": "MapperFunctionReReviewer"
    },
    {
      "parameters": {
        "jsCode": "// Map Gemini response to `output` (string)\nconst txt =\n  $json.candidates?.[0]?.content?.parts?.[0]?.text\n  || $json.text\n  || '';\n\n// Build new payload\nconst j = { ...$json, output: txt };\n\n// Safe trim of known heavies that are NOT needed for re-review routing\ndelete j.enriched_content_chunks;  // big, not needed here\ndelete j.generator_raw;\ndelete j.strict_output;            // parser doesn’t use this on re-review path\ndelete j.openai_response;\ndelete j.results;                  // rerank/raw\n\nreturn [{ json: j }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5136,
        608
      ],
      "id": "1d3933e8-da31-418c-8550-451946b8ec4c",
      "name": "map + safe trim"
    },
    {
      "parameters": {
        "jsCode": "{\n  \"prompt_key\": \"optimizer_instagram\",           // or 'expert_review', 'gemini_quick_review', 'optimizer_linkedin', etc.\n  \"prompt_version\": \"v2\"               // persona-aware; use 'v1' if you want neutral\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        784
      ],
      "id": "11451ce4-75dc-4073-afd9-2e3071012097",
      "name": "SetInstaOptimizer"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v2');\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        880,
        784
      ],
      "id": "95c42d4b-365a-44a4-9311-d3db2c851937",
      "name": "IG:SelectOptimizerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all().map(it => it.json);\nconst sys = rows.find(r => r.role==='system')?.content || '';\nconst usr = rows.find(r => r.role==='user')?.content   || '';\nreturn [{ json: { ...$json, system_prompt: sys, user_prompt: usr } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1216,
        784
      ],
      "id": "38121d8c-d1d0-4188-8db0-32430cf6f9b4",
      "name": "MapperFunctionInsta"
    },
    {
      "parameters": {
        "jsCode": "{\n  \"prompt_key\": \"optimizer_facebook\",           // or 'expert_review', 'gemini_quick_review', 'optimizer_linkedin', etc.\n  \"prompt_version\": \"v2\"               // persona-aware; use 'v1' if you want neutral\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1808,
        768
      ],
      "id": "fe86e124-b88e-42b5-8549-5a44e15c813f",
      "name": "SetFacebookOptimizerPrompt"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v2');\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1952,
        768
      ],
      "id": "56040de5-6fa0-49ab-8ba8-591e8db89210",
      "name": "Facebook: OptimizerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all().map(it => it.json);\nconst sys = rows.find(r => r.role==='system')?.content || '';\nconst usr = rows.find(r => r.role==='user')?.content   || '';\nreturn [{ json: { ...$json, system_prompt: sys, user_prompt: usr } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2080,
        768
      ],
      "id": "e461c864-79fe-4e65-b575-227292342c32",
      "name": "MapperFunctionFacebookOptimizer"
    },
    {
      "parameters": {
        "jsCode": "{\n  \"prompt_key\": \"optimizer_linkedin\",           // or 'expert_review', 'gemini_quick_review', 'optimizer_linkedin', etc.\n  \"prompt_version\": \"v2\"               // persona-aware; use 'v1' if you want neutral\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3040,
        736
      ],
      "id": "ed187a19-0beb-4e8e-864d-e9294bd28fce",
      "name": "SetLinkedInOptimizerPrompt"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT role, content\nFROM core.prompt_library\nWHERE prompt_key = $1\n  AND version    = COALESCE($2, 'v2');\n",
        "options": {
          "queryReplacement": "={{ [$json.prompt_key, $json.prompt_version] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3184,
        736
      ],
      "id": "19652ef5-31b2-4f9f-81d5-4dce8f6e47be",
      "name": "LinkedIn: OptimizerPrompt",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all().map(it => it.json);\nconst sys = rows.find(r => r.role==='system')?.content || '';\nconst usr = rows.find(r => r.role==='user')?.content   || '';\nreturn [{ json: { ...$json, system_prompt: sys, user_prompt: usr } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3312,
        736
      ],
      "id": "457b18a3-a416-40a4-b663-14a64e4d137b",
      "name": "MapperFunctionLinkedInOptimizer"
    },
    {
      "parameters": {
        "jsCode": "const t = String($json.output || $json.text || '').trim();\nconst must = ['OPTIMIZED HOOK:', 'OPTIMIZED SCRIPT:', 'OPTIMIZED CTA:', 'OPTIMIZED HASHTAGS:', 'VISUAL SUGGESTIONS:'];\nconst missing = must.filter(h => !t.includes(h));\nif (missing.length) throw new Error('IG optimizer format error: ' + missing.join(', '));\nreturn [{ json: { ...$json, optimized_instagram: t } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1808,
        880
      ],
      "id": "0c34aea4-4b09-4191-abd4-590fbcf989f6",
      "name": "IG Validator"
    },
    {
      "parameters": {
        "jsCode": "const base=$items('Apply Review Fixes',0,0)[0].json;\nconst ig=$items('Optimize Instagram (GPT-5-Nano)',0,0)[0].json.text||base.instagram_content;\nconst fb=$items('Optimize Facebook (GPT-5-Nano)',0,0)[0].json.text||base.facebook_content;\nconst li=$items('Optimize LinkedIn (GPT-5-Nano)',0,0)[0].json.text||base.linkedin_content;\nreturn { ...base, instagram_final: ig, facebook_final: fb, linkedin_final: li, ready_for_scheduling: true };"
      },
      "id": "b61dfdff-9b44-427d-b0ae-08d5696e4fae",
      "name": "Combine Optimized Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3600,
        1152
      ]
    },
    {
      "parameters": {
        "jsCode": "const t = String($json.output || $json.text || '').trim();\nconst must = ['OPTIMIZED LINKEDIN POST:', 'ENGAGEMENT STRATEGY NOTES:'];\nconst missing = must.filter(h => !t.includes(h));\nif (missing.length) throw new Error('LI optimizer format error: ' + missing.join(', '));\nreturn [{ json: { ...$json, optimized_linkedin: t } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3376,
        1024
      ],
      "id": "78340d5f-4c6a-4dd8-928b-981d89ffb627",
      "name": "LinkedIn Validator"
    },
    {
      "parameters": {
        "jsCode": "const t = String($json.output || $json.text || '').trim();\nconst must = ['OPTIMIZED FACEBOOK POST:', 'SUGGESTED COMMENT RESPONSES:'];\nconst missing = must.filter(h => !t.includes(h));\nif (missing.length) throw new Error('FB optimizer format error: ' + missing.join(', '));\nreturn [{ json: { ...$json, optimized_facebook: t } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2944,
        864
      ],
      "id": "8bf81f3c-5523-43d5-b64f-c5d74fa8fed7",
      "name": "FB Validator"
    },
    {
      "parameters": {
        "jsCode": "const data = Array.isArray($json) ? $json[0] : $json;\n\nif (!data || !data.file_id) return [];\n\nreturn [{\n  json: {\n    file_id: data.file_id,\n    filename: data.filename,\n    status: data.status,\n    count: data.count,\n    total_chunks: data.total_chunks,\n    social_status: data.social_status,\n    is_duplicate: data.is_duplicate,\n    ready: true\n  }\n}];"
      },
      "id": "965c8bda-b1f1-43e7-b22e-c2b0eb472c34",
      "name": "Gate Ready",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        -192
      ]
    },
    {
      "parameters": {
        "jsCode": "const b = $json.body || {};\nif (!b.file_id || !b.filename) {\n  return [{ json: { ok: false, status: 400, error: 'file_id and filename required' } }];\n}\nreturn [{ json: { ok: true, file_id: b.file_id, filename: b.filename } }];"
      },
      "id": "15beadb0-eada-4ca7-8283-f68c4feb1af8",
      "name": "Validate Episode Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        -192
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  fps.file_id,\n  fps.filename,\n  fps.rag_status AS status,\n  COALESCE(emb.cnt, 0)           AS count,\n  COALESCE(fps.rag_chunks_count,0) AS total_chunks,\n  fps.social_status,\n  (fps.social_status = 'completed')          AS is_duplicate,\n  ((fps.rag_status = 'completed') OR COALESCE(emb.cnt,0) > 0) AS is_ready\nFROM core.file_pipeline_status fps\nLEFT JOIN (\n  SELECT file_id, COUNT(*)::int AS cnt\n  FROM core.embeddings\n  GROUP BY file_id\n) emb USING (file_id)\nWHERE fps.file_id = $1;\n",
        "options": {
          "queryReplacement": "={{ [$json.file_id] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -752,
        -192
      ],
      "id": "0293ebdb-331d-445a-8f41-cf7c20b50c7d",
      "name": "FetchFileStatus",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Convert 0-row result to a single placeholder; keep first row if exists.\nconst rows = $input.all().map(i => i.json);\nconst r = rows[0] || {};\nconst out = {\n  file_id: $json.file_id,\n  filename: $json.filename,\n  status: r.status || 'missing',\n  count: r.count ?? 0,\n  total_chunks: r.total_chunks ?? 0,\n  social_status: r.social_status || null,\n  is_duplicate: !!r.is_duplicate,\n  is_ready: !!r.is_ready\n};\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        -192
      ],
      "id": "8a9d9b5e-b0e6-4eb4-aad0-4f45a0ffb569",
      "name": "FoldStatus"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        48,
        -112
      ],
      "id": "91207179-bb04-4bfc-a9a2-513f82e41efc",
      "name": "Wait",
      "webhookId": "5d015ff5-22b6-4186-a67b-9b30d92c0cbd"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH chosen AS (\n  SELECT fps.file_id, fps.filename, fps.updated_at\n  FROM core.file_pipeline_status fps\n  WHERE\n    -- if a file_id is provided, pick it\n    (fps.file_id = $1)\n    OR\n    -- else pick the most recent completed with embeddings\n    ($1 IS NULL\n     AND fps.rag_status = 'completed'\n     AND COALESCE(fps.rag_embedding_count, 0) > 0)\n  ORDER BY fps.updated_at DESC\n  LIMIT 1\n)\nSELECT c.file_id, c.filename\nFROM chosen c;\n",
        "options": {
          "queryReplacement": "={{ [ $json.file_id || null ] }}"
        }
      },
      "id": "aca29fa3-2693-4b20-bb7e-0e9bb337fffa",
      "name": "ResolveEpisode",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1648,
        64
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT current_database() AS db, current_user AS role;\n\nSELECT COUNT(*) AS cnt\nFROM core.embeddings\nWHERE file_id = $1;\n",
        "options": {
          "queryReplacement": "={{ [ $json.file_id ] }}"
        }
      },
      "id": "02e9811a-a6ca-4197-bd18-a3fc3e11ef97",
      "name": "Get Episode Chunks1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1152,
        1040
      ],
      "credentials": {
        "postgres": {
          "id": "9YUzCl4JCgWCDD57",
          "name": "RAG_READ_KEY"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt_key\": \"generator\",\n  \"prompt_version\": \"v2\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1152,
        336
      ],
      "id": "9bc84df4-a621-4847-9809-1b5f12794023",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"prompt_key\": \"expert_review\",\n  \"prompt_version\": \"v2\"          \n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2672,
        336
      ],
      "id": "145d24fb-ae9e-4ed9-a53e-547fc9d62846",
      "name": "setPromptExpert"
    }
  ],
  "connections": {
    "Episode Ready Webhook": {
      "main": [
        [
          {
            "node": "Validate Episode Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond Duplicate": {
      "main": [
        []
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "ResolveEpisode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Episode Chunks": {
      "main": [
        [
          {
            "node": "Combine Episode Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Episode Content": {
      "main": [
        [
          {
            "node": "cleanAndPrep",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rank Topics": {
      "main": [
        [
          {
            "node": "Generate Enrichment Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Enrichment Queries": {
      "main": [
        [
          {
            "node": "InjectPersonaContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Query Embeddings": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract Embeddings": {
      "main": [
        [
          {
            "node": "Search Similar (Q1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Similar (Q1)": {
      "main": [
        [
          {
            "node": "Combine Enrichment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Generated Content": {
      "main": [
        [
          {
            "node": "Merge content + Review",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge content + ReviewPrompts",
            "type": "main",
            "index": 0
          },
          {
            "node": "setPromptExpert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Expert Review",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Generate Content",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Extract Concepts",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Optimize LinkedIn",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Optimize Instagram",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Optimize Facebook",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse Review JSON": {
      "main": [
        [
          {
            "node": "WrapReview",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Insert Payload": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "SetLinkedInOptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SetFacebookOptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SetInstaOptimizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content": {
      "main": [
        [
          {
            "node": "Format Fresh Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review": {
      "main": [
        [
          {
            "node": "Parse Review JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Concepts": {
      "main": [
        [
          {
            "node": "Rank Topics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Instagram": {
      "main": [
        [
          {
            "node": "IG Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize LinkedIn": {
      "main": [
        [
          {
            "node": "LinkedIn Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Facebook": {
      "main": [
        [
          {
            "node": "FB Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanAndPrep": {
      "main": [
        [
          {
            "node": "Extract Concepts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Respond Duplicate",
            "type": "main",
            "index": 0
          },
          {
            "node": "MoveToCompleted",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Accepted",
            "type": "main",
            "index": 0
          },
          {
            "node": "ResolveEpisode",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "buildBody": {
      "main": [
        [
          {
            "node": "Build Query Embeddings",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Extract Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setFields": {
      "main": [
        [
          {
            "node": "UpsertApproved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Enrichment Data": {
      "main": [
        [
          {
            "node": "InitializeContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Gen Cache Key": {
      "main": [
        [
          {
            "node": "Check Gen Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Gen Cache": {
      "main": [
        [
          {
            "node": "Cache Hit?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cache Hit?": {
      "main": [
        [
          {
            "node": "Use Cached Generation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Use Cached Generation": {
      "main": [
        [
          {
            "node": "Merge Cached + Store Gen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setupRouter": {
      "main": [
        [
          {
            "node": "Recommendation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge content + Review": {
      "main": [
        [
          {
            "node": "setupRouter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "contentValidator": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InitializeContext": {
      "main": [
        [
          {
            "node": "Build Gen Cache Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "incrementCounter": {
      "main": [
        [
          {
            "node": "UPSERT Failed Attempt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UPSERT Failed Attempt": {
      "main": [
        [
          {
            "node": "If: Less Than 2 Attempts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recommendation": {
      "main": [
        [
          {
            "node": "setFields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ApplyReviewFixes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "incrementCounter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WrapReview": {
      "main": [
        [
          {
            "node": "Merge content + Review",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "UpsertApproved": {
      "main": [
        [
          {
            "node": "contentValidator",
            "type": "main",
            "index": 0
          },
          {
            "node": "UpdatePersona",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ApplyReviewFixes": {
      "main": [
        [
          {
            "node": "Parse 3 Sections",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse 3 Sections": {
      "main": [
        [
          {
            "node": "SetReReviewerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Re-Review": {
      "main": [
        [
          {
            "node": "map + safe trim",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Fresh Generation": {
      "main": [
        [
          {
            "node": "Store Gen Cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Gen Cache": {
      "main": [
        [
          {
            "node": "Merge Cached + Store Gen",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Cached + Store Gen": {
      "main": [
        [
          {
            "node": "Trim Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Re-Review": {
      "main": [
        [
          {
            "node": "If:Approved",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If:Approved": {
      "main": [
        [
          {
            "node": "UpsertApprovedOnReReview",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If: Less Than 2 Attempts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UpsertApprovedOnReReview": {
      "main": [
        [
          {
            "node": "contentValidator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If: Less Than 2 Attempts": {
      "main": [
        [
          {
            "node": "useStrictPrompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Move2ManualReview",
            "type": "main",
            "index": 0
          },
          {
            "node": "statusManual",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "useStrictPrompt": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InjectPersonaContext": {
      "main": [
        [
          {
            "node": "buildBody",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trim Payload": {
      "main": [
        [
          {
            "node": "Parse Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SelectPrompt": {
      "main": [
        [
          {
            "node": "MapperFunction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MapperFunction": {
      "main": [
        [
          {
            "node": "Generate Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SelectReviewerPrompt": {
      "main": [
        [
          {
            "node": "MapperFunctionReviewer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MapperFunctionReviewer": {
      "main": [
        [
          {
            "node": "Merge content + ReviewPrompts",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge content + ReviewPrompts": {
      "main": [
        [
          {
            "node": "Expert Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetReReviewerPrompt": {
      "main": [
        [
          {
            "node": "SelectReReviewerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SelectReReviewerPrompt": {
      "main": [
        [
          {
            "node": "MapperFunctionReReviewer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MapperFunctionReReviewer": {
      "main": [
        [
          {
            "node": "Re-Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "map + safe trim": {
      "main": [
        [
          {
            "node": "Parse Re-Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetInstaOptimizer": {
      "main": [
        [
          {
            "node": "IG:SelectOptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IG:SelectOptimizerPrompt": {
      "main": [
        [
          {
            "node": "MapperFunctionInsta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MapperFunctionInsta": {
      "main": [
        [
          {
            "node": "Optimize Instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetFacebookOptimizerPrompt": {
      "main": [
        [
          {
            "node": "Facebook: OptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook: OptimizerPrompt": {
      "main": [
        [
          {
            "node": "MapperFunctionFacebookOptimizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MapperFunctionFacebookOptimizer": {
      "main": [
        [
          {
            "node": "Optimize Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SetLinkedInOptimizerPrompt": {
      "main": [
        [
          {
            "node": "LinkedIn: OptimizerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn: OptimizerPrompt": {
      "main": [
        [
          {
            "node": "MapperFunctionLinkedInOptimizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MapperFunctionLinkedInOptimizer": {
      "main": [
        [
          {
            "node": "Optimize LinkedIn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IG Validator": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Optimized Content": {
      "main": [
        [
          {
            "node": "Prepare Insert Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn Validator": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate Ready": {
      "main": [
        [
          {
            "node": "FetchFileStatus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Episode Payload": {
      "main": [
        [
          {
            "node": "Gate Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FetchFileStatus": {
      "main": [
        [
          {
            "node": "FoldStatus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FoldStatus": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "FetchFileStatus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ResolveEpisode": {
      "main": [
        [
          {
            "node": "Get Episode Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "SelectPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setPromptExpert": {
      "main": [
        [
          {
            "node": "SelectReviewerPrompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Episode Ready Webhook": [
      {
        "headers": {
          "host": "ai.thirdeyediagnostics.com",
          "user-agent": "axios/1.12.0",
          "content-length": "94",
          "accept": "application/json,text/html,application/xhtml+xml,application/xml,text/*;q=0.9, image/*;q=0.8, */*;q=0.7",
          "accept-encoding": "gzip, compress, deflate, br",
          "content-type": "application/json",
          "x-forwarded-for": "172.18.0.1",
          "x-forwarded-host": "ai.thirdeyediagnostics.com",
          "x-forwarded-port": "443",
          "x-forwarded-proto": "https",
          "x-forwarded-server": "3caf2985a006",
          "x-real-ip": "172.18.0.1"
        },
        "params": {},
        "query": {},
        "body": {
          "file_id": "19_PvHNRakfzzLjL6WsYGW0VJqkv5if2aMtFDYyFh_Bo",
          "filename": "Million_dollar_agency_"
        },
        "webhookUrl": "https://ai.thirdeyediagnostics.com/webhook/events/episode-ready",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}