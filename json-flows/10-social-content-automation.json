{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/events/episode-ready",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "0a9d36a8-d25e-4ace-8416-3230e47cf95e",
      "name": "Episode Ready Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -976,
        192
      ],
      "webhookId": "0c8869b7-c940-4654-b4d9-480e20f87aca"
    },
    {
      "parameters": {
        "jsCode": "if ($json.ok) { return [{ json: $json }]; } return [];"
      },
      "id": "d89a5848-f7de-4c6a-884b-e3e81c92c897",
      "name": "Payload OK",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        96
      ]
    },
    {
      "parameters": {
        "jsCode": "if (!$json.ok) { return [{ json: $json }]; } return [];"
      },
      "id": "88aae1ec-8351-4121-bf32-78be5fd24448",
      "name": "Payload Invalid",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        288
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'bad_request', error: $json.error || 'file_id and filename required' } }}",
        "options": {
          "responseCode": 400
        }
      },
      "id": "2d5cbe1d-e66c-4b47-97ba-b855580519b8",
      "name": "Respond Bad Request",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -304,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "const b = $json.body || {};\nif (!b.file_id || !b.filename) {\n  return [{ json: { ok: false, status: 400, error: 'file_id and filename required' } }];\n}\nreturn [{ json: { ok: true, file_id: b.file_id, filename: b.filename } }];"
      },
      "id": "15beadb0-eada-4ca7-8283-f68c4feb1af8",
      "name": "Validate Episode Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -752,
        192
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT status FROM core.file_status WHERE file_id = $1",
        "options": {
          "queryReplacement": "={{ $json.file_id }}"
        }
      },
      "id": "03545db2-1eef-4d10-ad0d-4ab2b235f689",
      "name": "Check File Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -304,
        96
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COUNT(*)::int AS count FROM core.embeddings WHERE file_id = $1",
        "options": {
          "queryReplacement": "={{ $json.file_id }}"
        }
      },
      "id": "a31f3460-c7af-476f-a086-6de73b4b82c6",
      "name": "Check Embeddings Count",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -80,
        96
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const s = $items('Check File Status',0,0)[0]?.json?.status;\nconst c = Number($items('Check Embeddings Count',0,0)[0]?.json?.count || 0);\nif (s === 'completed' && c > 0) { return [{ json: { ...$json, ready: true } }]; }\nreturn [];"
      },
      "id": "965c8bda-b1f1-43e7-b22e-c2b0eb472c34",
      "name": "Gate Ready",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "const sd = this.getWorkflowStaticData('global'); sd.socialProcessed = sd.socialProcessed || {}; const fid = $json.file_id; if (!fid) return []; if (sd.socialProcessed[fid]) { return []; } sd.socialProcessed[fid] = { first_seen: new Date().toISOString() }; return [{ json: $json }];"
      },
      "id": "8fe5c9c6-c7e4-4f51-85a8-282bad98169a",
      "name": "Idempotency New",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        -96
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'duplicate', file_id: $json.file_id } }}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "7d00f004-06d3-4eca-8722-6319a15b1c8c",
      "name": "Respond Duplicate",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        592,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "const s = $items('Check File Status',0,0)[0]?.json?.status;\nconst c = Number($items('Check Embeddings Count',0,0)[0]?.json?.count || 0);\nif (!(s === 'completed' && c > 0)) { return [{ json: { ...$json, ready: false } }]; }\nreturn [];"
      },
      "id": "62719d2c-ba34-4665-a4da-b395906fbb83",
      "name": "Gate Not Ready",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        384
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'accepted', file_id: $json.file_id } }}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "1220c0fc-af45-4e9b-822f-5a2b96aff8dd",
      "name": "Respond Accepted",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        592,
        -144
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'not_ready', file_id: $json.file_id } }}",
        "options": {
          "responseCode": 202
        }
      },
      "id": "2ccfb356-ae21-4de7-b8ba-d75cd8e877d7",
      "name": "Respond Not Ready",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        368,
        384
      ]
    },
    {
      "parameters": {},
      "id": "e29a5a01-fa16-4c5a-a762-5760544ba139",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        144,
        576
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  id,\n  file_id,\n  filename,\n  chunk_index,\n  text,\n  COUNT(*) OVER (PARTITION BY file_id) AS total_chunks\n  FROM core.embeddings\n  WHERE file_id = $1\n  ORDER BY chunk_index ASC;",
        "options": {
          "queryReplacement": "= [ { file_id, filename, status, created_at } ]"
        }
      },
      "id": "aca29fa3-2693-4b20-bb7e-0e9bb337fffa",
      "name": "Get Latest Episode",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        368,
        576
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  id,\n  file_id,\n  filename,\n  chunk_index,\n  text,\n  COUNT(*) OVER (PARTITION BY file_id) AS total_chunks\n  FROM core.embeddings\n  WHERE file_id = $1\n  ORDER BY chunk_index ASC;",
        "options": {
          "queryReplacement": "={{ [ $json.file_id ] }}"
        }
      },
      "id": "8fed1cfa-040d-4764-9883-5c6021878a3c",
      "name": "Get Episode Chunks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        736,
        192
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function normalizeEpisodeTitle(candidateTitle, candidateFilename) {\n  function pick(s) { return (s || '').toString(); }\n  var t = pick(candidateTitle);\n  var f = pick(candidateFilename);\n  var rx = /(?:^|\\b)(?:ep(?:isode|isaode)?|episode)\\s*[:#-]\\s([0-9]{1,4})/i;\n  var m = t.match(rx);\n  if (m) return 'Episode ' + m[1];\n  m = f.match(rx);\n  if (m) return 'Episode ' + m[1];\n  return t || 'Episode';\n  }\n\n  var chunkItems = $items('Get Episode Chunks', 0, 0);\n  var rows = chunkItems.map(function(i){ return i.json; });\n  if (!rows.length) {\n  return [{ json: { error: 'no_chunks_found' } }];\n  }\n\n  // Sort and merge by chunk_index\n  rows.sort(function(a, b){ return (a.chunk_index || 0) - (b.chunk_index || 0); });\n  var content = rows.map(function(r){ return (r.text || '').toString(); }).join('\\n\\n');\n\n  // Prefer webhook payload → latest episode → chunks row\n  var fromWebhookItem = $items('Validate Episode Payload', 0, 0)[0] || { json: {} };\n  var fromLatestItem = $items('Get Latest Episode', 0, 0)[0] || { json: {} };\n  var fromWebhook = fromWebhookItem.json || {};\n  var fromLatest = fromLatestItem.json || {};\n  var first = rows[0] || {};\n\n  var file_id = fromWebhook.file_id || fromLatest.file_id || first.file_id || null;\n  var filename = fromWebhook.filename || fromLatest.filename || first.filename || '';\n  var episode_title = normalizeEpisodeTitle(fromWebhook.episode_title || fromLatest.filename || '', filename);\n  var numMatch = (episode_title.match(/Episode\\s+([0-9]{1,4})/i) || [])[1];\n  var episode_number = numMatch ? parseInt(numMatch, 10) : null;\n\n  return [{\n  json: {\n      episode_content: content.slice(0, 20000),\n      episode_title: episode_title,\n      episode_number: episode_number,\n      file_id: file_id,\n      filename: filename,\n      chunk_count: rows.length\n  }\n  }];"
      },
      "id": "ab87e3c6-802e-4911-ad2c-318821571a72",
      "name": "Combine Episode Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        992
      ]
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {}
      },
      "id": "3761d10e-e344-4eee-9c4b-e50b82a84606",
      "name": "Extract Concepts (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1216,
        432
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw=$input.first().json.text||'[]'; let concepts=[];\ntry{const clean=raw.replace(/```json|```/g,'').trim(); concepts=JSON.parse(clean);}catch(e){throw new Error('Concept JSON parse fail: '+e.message)}\nconst W={a:0.35,p:0.25,r:0.20,v:0.15,e:0.05};\nconst scored=concepts.map(c=>{let a=7+(c.actionability==='high'?2:0)+(c.proof_type!=='none'?1:0); let p=c.platform_fit==='all'?10:8; let r=['data','story'].includes(c.proof_type)?9:(c.proof_type==='framework'?8:7); let v=Number(c.hook_potential||7); let en=7; const wt=a*W.a+p*W.p+r*W.r+v*W.v+en*W.e; return {...c, scores:{weighted_total:Math.round(wt*100)/100}};});\nconst top=scored.sort((a,b)=>b.scores.weighted_total-a.scores.weighted_total).slice(0,10);\nconst ep=$items('Combine Episode Content',0,0)[0].json;\nreturn top.map((c,i)=>({day_number:i+1, ...c, episode_title:ep.episode_title, episode_number:ep.episode_number, file_id:ep.file_id}));"
      },
      "id": "d511b9a3-31de-4a8a-a7e9-e3b4036df0c2",
      "name": "Rank Topics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        208
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "bc923a10-ea8c-4a0b-9b83-f2662b3d6f7b",
      "name": "Loop Days",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1824,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const c=$json.concept||''; const cat=$json.category||'default';\nconst T={\n sales_strategy:[`proven sales techniques for ${c.slice(0,50)}`,`successful agent strategies ${cat}`,`step-by-step framework for ${c.slice(0,40)}`],\n lead_gen:[`lead flow mechanics ${c.slice(0,40)}`,`Million Dollar Agency lead generation systems`,`internet lead secrets prospecting tactics`],\n objection_handling:[`overcoming objections in ${c.slice(0,40)}`,`objection handling scripts`,`client resistance closing techniques`],\n mindset:[`agent mindset ${c.slice(0,40)}`,`mental toughness for insurance pros`,`motivation and persistence`],\n case_study:[`agent success stories ${c.slice(0,40)}`,`real results case studies`,`proven strategies measurable outcomes`],\n default:[c.slice(0,60),`insurance agent tips for ${cat}`,`actionable advice for ${cat}`]\n};\nreturn { ...$json, enrichment_queries: (T[cat]||T.default) };"
      },
      "id": "2c38fef9-4fa4-42c0-917e-2002782e507c",
      "name": "Generate Enrichment Queries",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2048,
        208
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$env.OPENAI_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\\\"model\\\":\\\"text-embedding-3-small\\\",\\\"input\\\":[{{$json.enrichment_queries[0] | toString()}},{{$json.enrichment_queries[1] | toString()}},{{$json.enrichment_queries[2] | toString()}}]}\",\n",
        "options": {}
      },
      "id": "7defc2f3-0726-4731-9970-003056af4d9d",
      "name": "Build Query Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2272,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const r=$input.first().json; if(!r?.data||r.data.length<3) throw new Error('Embeddings response invalid');\nreturn [{json:{q1:r.data[0].embedding,q2:r.data[1].embedding,q3:r.data[2].embedding}}];"
      },
      "id": "c98cf213-3567-4e6e-b078-914eb860aa18",
      "name": "Extract Embeddings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2496,
        208
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT e.text,\n       e.filename,\n       1 - (e.embedding <=> $1::vector(1536)) AS similarity\nFROM   core.embeddings e\nWHERE  e.file_id <> $2\nORDER  BY similarity DESC\nLIMIT  5;",
        "options": {
          "queryReplacement": "={{ [ JSON.stringify($items('Extract Embeddings',0,0)[0].json.q1), $json.file_id ] }}"
        }
      },
      "id": "90c286bb-5b27-455a-b836-59ac1ce01abf",
      "name": "Search Similar (Q1)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        2720,
        208
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const topic=$items('Generate Enrichment Queries',0,0)[0].json;\nconst q1=$items('Search Similar (Q1)',0,0).map(i=>i.json);\nconst uniq=new Map(); for(const r of q1){const k=(r.text||'').slice(0,512); if(!uniq.has(k)) uniq.set(k,r);} \nconst top=[...uniq.values()].slice(0,9).map(r=>r.text).join('\\n\\n---\\n\\n');\nreturn { ...topic, enriched_content_chunks: top };"
      },
      "id": "bafd0217-2931-4653-8ab0-1b236ada9dc5",
      "name": "Combine Enrichment Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2944,
        208
      ]
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "high"
        }
      },
      "id": "e3dcc61f-8a35-4706-b908-8f7e8f3005b7",
      "name": "Generate Content (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3152,
        416
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw=$json.text||'';\nconst ig=raw.match(/### INSTAGRAM REEL[\\s\\S]*?(?=### FACEBOOK POST|$)/i);\nconst fb=raw.match(/### FACEBOOK POST[\\s\\S]*?(?=### LINKEDIN POST|$)/i);\nconst li=raw.match(/### LINKEDIN POST[\\s\\S]*$/i);\nconst part=(m)=>m?m[0].replace(/### [A-Z ]+/i,'').trim():'';\nreturn {\n  day_number: $json.day_number,\n  day_theme: $json.day_theme,\n  episode_title: $json.episode_title,\n  topic_title: $json.concept,\n  instagram_content: part(ig),\n  facebook_content: part(fb),\n  linkedin_content: part(li)\n};"
      },
      "id": "0f288ac7-441c-4c10-974a-9210eded63a2",
      "name": "Parse Generated Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3520,
        208
      ]
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "high"
        }
      },
      "id": "db8b5715-4060-4ee0-b0c2-588ce0c58b77",
      "name": "Expert Review (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3760,
        432
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw=$items('Expert Review (GPT-5-Nano)',0,0)[0].json.text||'';\nlet review; try{review=JSON.parse(raw.replace(/```json|```/g,'').trim());}catch{review={overall_recommendation:'REJECT'}}\nreturn [{json:review}];"
      },
      "id": "77f40240-06a0-44ae-a9e1-d6201005bcbe",
      "name": "Parse Review JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4096,
        208
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "leftValue": "={{ $json.overall_recommendation }}",
              "rightValue": "APPROVE",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "leftValue": "={{ $json.overall_recommendation }}",
              "rightValue": "APPROVE_WITH_EDITS",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "any"
        },
        "options": {}
      },
      "id": "92fda7f4-5b04-4bbf-82b3-b68737205db5",
      "name": "Content Approved?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        4320,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const review=$json; const content=$items('Parse Generated Content',0,0)[0].json;\nconst apply=(list,txt)=>{if(!list) return txt; for(const f of list){ if(f.current&&f.fix) txt=txt.replace(f.current,f.fix);} return txt;};\nreturn {\n  day_number: content.day_number,\n  day_theme: content.day_theme,\n  episode_title: content.episode_title,\n  topic_title: content.topic_title,\n  instagram_content: apply(review.instagram_review?.required_fixes, content.instagram_content),\n  facebook_content: apply(review.facebook_review?.required_fixes, content.facebook_content),\n  linkedin_content: apply(review.linkedin_review?.required_fixes, content.linkedin_content)\n};"
      },
      "id": "86ac3ef6-43de-41f4-94ea-917a05e792f9",
      "name": "Apply Review Fixes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4544,
        336
      ]
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "high"
        }
      },
      "id": "b7ba7693-79ba-4fa5-b841-7394c24a1f15",
      "name": "Optimize Instagram (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4736,
        1216
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "high"
        }
      },
      "id": "717e4ba8-13af-4023-b454-d7afc6e21ce2",
      "name": "Optimize Facebook (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4944,
        736
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5-nano",
        "options": {
          "reasoningEffort": "high"
        }
      },
      "id": "2e91c972-dfcb-4ef8-b144-6e3c943d0fdd",
      "name": "Optimize LinkedIn (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4992,
        320
      ],
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const base=$items('Apply Review Fixes',0,0)[0].json;\nconst ig=$items('Optimize Instagram (GPT-5-Nano)',0,0)[0].json.text||base.instagram_content;\nconst fb=$items('Optimize Facebook (GPT-5-Nano)',0,0)[0].json.text||base.facebook_content;\nconst li=$items('Optimize LinkedIn (GPT-5-Nano)',0,0)[0].json.text||base.linkedin_content;\nreturn { ...base, instagram_final: ig, facebook_final: fb, linkedin_final: li, ready_for_scheduling: true };"
      },
      "id": "b61dfdff-9b44-427d-b0ae-08d5696e4fae",
      "name": "Combine Optimized Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5344,
        528
      ]
    },
    {
      "parameters": {
        "jsCode": "const x=$input.first().json;\nreturn [{json:{\n day_number:x.day_number,\n day_theme:x.day_theme,\n episode_title:x.episode_title,\n topic_title:x.topic_title,\n instagram_content:x.instagram_final,\n facebook_content:x.facebook_final,\n linkedin_content:x.linkedin_final,\n schedule_data: JSON.stringify(x.schedule||{}),\n review_scores: JSON.stringify(x.review_scores||{}),\n status:'pending_schedule'\n}}];"
      },
      "id": "68591dc5-5dff-43c7-912c-47d2601da430",
      "name": "Prepare Insert Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5568,
        528
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.social_content_generated (\n  day_number,\n  day_theme,\n  episode_title,\n  topic_title,\n  instagram_content,\n  facebook_content,\n  linkedin_content,\n  schedule_data,\n  review_scores,\n  status,\n  created_at,\n  updated_at\n)\nVALUES (\n  $1,  -- day_number\n  $2,  -- day_theme\n  $3,  -- episode_title\n  $4,  -- topic_title\n  $5,  -- instagram_content\n  $6,  -- facebook_content\n  $7,  -- linkedin_content\n  $8::jsonb,  -- schedule_data (JSON)\n  $9::jsonb,  -- review_scores (JSON)\n  'pending_schedule',\n  NOW(),\n  NOW()\n)\nRETURNING id, day_number, day_theme, episode_title, topic_title;",
        "options": {
          "queryReplacement": "={{ [ $json.day_number, $json.day_theme, $json.episode_title, $json.topic_title,  $json.instagram_final, $json.facebook_final, $json.linkedin_final, JSON.stringify($json.schedule || {}), JSON.stringify($json.review_scores || {})]}}"
        }
      },
      "id": "1e00dfe6-1da7-4afa-9d87-554278434ea1",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        5792,
        528
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO core.metrics (\n  metric_name,\n  metric_value,\n  tags,\n  created_at\n)\nVALUES (\n  'social_content_batch_completed',\n  1,\n  $1::jsonb,\n  NOW()\n)\nRETURNING id;",
        "options": {
          "queryReplacement": "={{ [ JSON.stringify({ workflow: 'social_automation',     episode: $items('Combine Episode Content',0,0)[0].json.episode_title }) ] }}"
        }
      },
      "id": "5c00ae69-2011-44d9-ba99-37a030e2c7c9",
      "name": "Metrics: Batch Completed",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        6016,
        208
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "name": "={{ $json.episode_title }} - Day {{ $json.day_number }}.md",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "id": "7f364ea1-8f91-4072-af00-ee1326df7b36",
      "name": "Drive Mirror (Disabled)",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -976,
        1344
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const sd = this.getWorkflowStaticData('global'); sd.socialProcessed = sd.socialProcessed || {}; const fid = $json.file_id; if (!fid) return []; if (sd.socialProcessed[fid]) { return [{ json: $json }]; } return [];"
      },
      "id": "516d3218-59d4-47e7-b9e3-b03b8e4055c9",
      "name": "Idempotency Duplicate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        192
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "linkedin",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3eb7138a-8122-44e6-8383-15c85b867b2d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "linkedIn"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "690bc24b-edae-467c-b266-b463434fd384",
                    "leftValue": "facebook",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "facebook"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7d7e6d08-d4dd-4e9f-b7c9-417c5cb6de3e",
                    "leftValue": "instagram",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "instagram"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        4768,
        320
      ],
      "id": "35a27bb9-e777-46f9-8a04-04b497a448a4",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate social media content for DAY {{ $json.day_number }}: {{ $json.day_theme }}\n\nEPISODE: {{ $json.episode_title }} ({{ $json.episode_number }})\n\nTOPIC: {{ $json.concept }} ({{ $json.category }})\n\nScore: {{ $json.scores.weighted_total }}/10\n\nPRIMARY SOURCE (truncated): {{ $node[\"Combine Episode Content\"].json.episode_content.substring(0, 3000) }}\n\nENRICHMENT: {{ $json.enriched_content_chunks }}\n\nCreate 3 posts (Instagram Reel, Facebook, LinkedIn) exactly per the required formats.",
        "options": {
          "systemMessage": "Generate social content for DAY {{ $json.day_number }} — {{ $json.day_theme }}\n\nEPISODE: {{ $json.episode_title }} ({{ $json.episode_number }})\nTOPIC: {{ $json.concept }}  |  Category: {{ $json.category }}\nPriority Score: {{ $json.scores.weighted_total }} / 10\n\nPRIMARY SOURCE (truncated):\n{{ $node[\"Combine Episode Content\"].json.episode_content.substring(0, 3000) }}\n\nENRICHMENT CONTENT:\n{{ $json.enriched_content_chunks }}\n\nProduce the three sections EXACTLY as formatted above. No extra text."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3168,
        208
      ],
      "id": "29304aaf-1014-4fb8-8e38-6d385e34b764",
      "name": "Generate Content"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Review these 3 social posts for Day {{ $json.day_number }} ({{ $json.day_theme }}). Episode: {{ $json.episode_title }} \nTopic: {{ $json.topic_title }}\n\nReturn JSON with overall_recommendation (APPROVE | APPROVE_WITH_EDITS | REJECT) and per-platform required_fixes arrays.",
        "options": {
          "systemMessage": "You are a strict content-review editor for The Insurance Dudes.\nEvaluate each platform post for brand safety, clarity, and engagement.\nReturn ONLY the following JSON schema—no markdown, no prose:\n\n{\n \"overall_recommendation\": \"APPROVE\"|\"APPROVE_WITH_EDITS\"|\"REJECT\",\n \"summary\": \"1-2 sentence overview\",\n \"instagram_review\": {\n   \"scores\": {\"voice_authenticity\": 1-10,\"value_delivery\": 1-10,\"engagement_potential\": 1-10,\"brand_safety\": 1-10},\n   \"weighted_score\": number,\n   \"pass\": true|false,\n   \"strengths\": [string],\n   \"issues\": [string],\n   \"required_fixes\": [\n     {\"location\":\"hook|script|cta|hashtags\",\"current\":\"string\",\"fix\":\"string\",\"reason\":\"string\"}\n   ]\n },\n \"facebook_review\": { … same fields … },\n \"linkedin_review\": { … same fields … },\n \"action_items\": [string]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3744,
        208
      ],
      "id": "3cca5996-caf5-4559-b4eb-75f4a5b240fd",
      "name": "Expert Review"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Episode: {{ $json.episode_title }}\n\nContent (truncated): \n{{ $json.episode_content.slice(0, 3500) }}\nExtract 15–20 concepts as JSON array.",
        "options": {
          "systemMessage": "You are an expert content analyst for The Insurance Dudes podcast.\nReturn ONLY a valid JSON array (no prose, no markdown).\nEach element must contain:\n{\n \"concept\": \"1–2 sentence summary of the idea\",\n \"category\": \"sales_strategy|objection_handling|lead_gen|mindset|tech|case_study|industry_insight\",\n \"actionability\": \"high|medium|low\",\n \"proof_type\": \"data|story|framework|none\",\n \"hook_potential\": integer 1–10,\n \"platform_fit\": \"instagram|facebook|linkedin|all\"\n}\nProvide 15-20 items.  No comments, no trailing commas."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1248,
        208
      ],
      "id": "9e956b03-83c1-4098-8462-3659092e2941",
      "name": "Extract Concepts"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Optimize this approved Instagram Reel:\n\nCURRENT:\n{{ $json.instagram_content }}\n\nGoals: Stronger hook, tight 15-30 s script, clear CTA, balanced hashtags.\nReturn ONLY the formatted sections specified.",
        "options": {
          "systemMessage": "You are an Instagram Reels optimizer.\nRefine hook, pacing (15-30 s), CTA clarity, and hashtags.\nReturn EXACTLY this format—no extras:\n\nOPTIMIZED HOOK: [≤ 8 words]\nOPTIMIZED SCRIPT:\n[3 sentences max with line breaks]\nOPTIMIZED CTA: [≤ 15 words]\nOPTIMIZED HASHTAGS: [5-8 targeted hashtags]\nVISUAL SUGGESTIONS:\n- [B-roll idea]\n- [Text overlay idea]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4784,
        1024
      ],
      "id": "3c27199c-930b-47e1-ab31-5705f11bec1e",
      "name": "Optimize Instagram"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Optimize this approved LinkedIn post:\n\nCURRENT:\n{{ $json.linkedin_content }}\n\nGoals: Credible hook, concise framework, specific data, professional tone, discussion prompt, 3-6 pro hashtags.\nReturn ONLY the formatted blocks specified.",
        "options": {
          "systemMessage": "You are a LinkedIn post optimizer.\nEmphasize credibility, insight density, proof, and professional tone.\nNo emojis. Return EXACTLY this format:\n\nOPTIMIZED LINKEDIN POST:\n\n[Professional hook (2-3 lines for preview)]\n[Insight or framework]\n[Data/proof point]\n[Thought-leadership takeaway]\n[Discussion prompt]\n[3-6 professional hashtags]\n\nENGAGEMENT STRATEGY NOTES:\n- [Why the hook works]\n- [Discussion points to seed in comments]\n- [Who to tag or mention]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4992,
        112
      ],
      "id": "89dffacc-c2b2-4b86-a6b7-d39dd132272c",
      "name": "Optimize LinkedIn"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Optimize this approved Facebook post:\n\nCURRENT:\n{{ $json.facebook_content }}\n\nGoals: Stronger hook with emoji, easy reading with line breaks, clear question, 5-10 strategic hashtags.\nReturn ONLY the formatted blocks specified.",
        "options": {
          "systemMessage": "You are a Facebook post optimizer.\nMake it visually scannable, emotionally engaging, and comment-friendly.\nReturn EXACTLY this format:\n\nOPTIMIZED FACEBOOK POST:\n\n[Hook with emoji]\n[2-3 short paragraphs]\n[Story or example]\n[Engagement question]\n[5-10 hashtags]\n\nSUGGESTED COMMENT RESPONSES:\n- [Positive reply template]\n- [Question answer template]\n- [Objection response template]"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        4992,
        512
      ],
      "id": "b5ca3554-b16c-4706-92ed-5348c34fb422",
      "name": "Optimize Facebook"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- A) Environment & extensions\nselect version(), current_database() as db, current_user as role;\nselect extname, extversion, extnamespace::regnamespace as schema\nfrom pg_extension order by extname;\nshow search_path;\n\n-- B) Inventory core schema (tables/views/materialized views + sizes)\nselect c.relkind as kind, c.relname as name,\n       pg_size_pretty(pg_total_relation_size(c.oid)) as total_size\nfrom pg_class c\njoin pg_namespace n on n.oid = c.relnamespace\nwhere n.nspname = 'core' and c.relkind in ('r','v','m')\norder by kind, total_size desc, name;\n\n-- Columns & defaults for each core relation\nselect c.relname as rel, a.attnum, a.attname as col,\n       format_type(a.atttypid, a.atttypmod) as data_type,\n       a.attnotnull as not_null,\n       coalesce(pg_get_expr(ad.adbin, ad.adrelid), '') as default_expr\nfrom pg_class c\njoin pg_namespace n on n.oid = c.relnamespace\njoin pg_attribute a on a.attrelid = c.oid and a.attnum > 0 and not a.attisdropped\nleft join pg_attrdef ad on ad.adrelid = c.oid and ad.adnum = a.attnum\nwhere n.nspname = 'core' and c.relkind in ('r','v','m')\norder by c.relname, a.attnum;\n\n-- C) RAG-critical checks\n-- vector column on core.documents\nselect a.attname as column_name, format_type(a.atttypid, a.atttypmod) as formatted_type\nfrom pg_attribute a\njoin pg_class c on c.oid = a.attrelid\njoin pg_namespace n on n.oid = c.relnamespace\nwhere n.nspname = 'core' and c.relname = 'documents' and a.attname in ('embedding','vector','embedding_ada');\n\n-- size & quick samples\nselect count(*) as doc_rows,\n       pg_size_pretty(pg_total_relation_size('core.documents')) as doc_size\nfrom core.documents;\n\nselect id, left(content, 120) as content_snippet, metadata\nfrom core.documents\norder by id desc\nlimit 5;\n\n-- file_status freshness\nselect file_id, filename, status, created_at, updated_at\nfrom core.file_status\norder by updated_at desc\nlimit 20;\n\n-- existing function?\nselect p.proname as func_name,\n       pg_get_function_identity_arguments(p.oid) as args,\n       pg_get_functiondef(p.oid) as definition\nfrom pg_proc p\njoin pg_namespace n on n.oid = p.pronamespace\nwhere n.nspname = 'core' and p.proname in ('match_documents','match_chunks');\n\n-- D) Indexes & constraints\nselect c.relname as table_name, i.relname as index_name, am.amname as method,\n       pg_get_indexdef(ix.indexrelid) as index_def,\n       pg_size_pretty(pg_relation_size(i.oid)) as index_size\nfrom pg_index ix\njoin pg_class i on i.oid = ix.indexrelid\njoin pg_class c on c.oid = ix.indrelid\njoin pg_namespace n on n.oid = c.relnamespace\njoin pg_am am on am.oid = i.relam\nwhere n.nspname = 'core'\norder by c.relname, i.relname;\n\nselect conrelid::regclass as table_name, conname, contype,\n       pg_get_constraintdef(oid) as constraint_def\nfrom pg_constraint\nwhere connamespace = 'core'::regnamespace\norder by conrelid::regclass::text, contype desc, conname;\n",
        "options": {}
      },
      "id": "ad012334-5891-4d76-8c57-52ca935b1af9",
      "name": "Tools",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -976,
        1072
      ],
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function decodeHtml(str) {\n  if (!str) return '';\n  var s = String(str);\n  s = s.replace(/ /g, ' ')\n         .replace(/&amp;/g, '&')\n         .replace(/&lt;/g, '<')\n         .replace(/&gt;/g, '>')\n         .replace(/&quot;/g, '\"')\n         .replace(/&apos;/g, '\\'')\n         .replace(/&#(\\d+);/g, function(_, d){ var n = parseInt(d,10); return isFinite(n)?\n  String.fromCharCode(n): _; })\n         .replace(/&#x([0-9a-fA-F]+);/g, function(_, h){ var n = parseInt(h,16); return isFinite(n)?\n  String.fromCharCode(n): _; });\n  return s;\n  }\n\n  function stripTags(str) {\n  if (!str) return '';\n  return String(str)\n      .replace(/<[^>]+>/g, ' ')\n      .replace(/[\\/]?[a-z]+>/gi, ' ');\n  }\n\n  function tighten(str) {\n  return String(str)\n      .replace(/[ \\t]+/g, ' ')\n      .replace(/\\s*\\n\\s*/g, '\\n')\n      .replace(/\\n{3,}/g, '\\n\\n')\n      .trim();\n  }\n\n  function denoise(str) {\n  var lines = String(str).split(/\\r?\\n/).map(function(l){ return l.trim(); });\n  var seen = new Set();\n  var out = [];\n  for (var i=0;i<lines.length;i++) {\n      var raw = lines[i];\n      if (!raw) continue;\n      if (/^[-=]{3,}/.test(raw)) continue;\n      if (/^\\d{1,2}:\\d{2}(:\\d{2})?$/.test(raw)) continue;\n      if (/^speaker\\s*\\d*[:.\\-]?\\s*$/i.test(raw)) continue;\n      if (/^[^\\w]+$/.test(raw)) continue;\n      if (/^(cite|time|p|te|\\/time)\\s*:?$/i.test(raw)) continue;\n      raw = raw.replace(/^\\s*speaker\\s*\\d*\\s*[:.\\-]\\s*/i, '');\n      var norm = raw.toLowerCase().replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, ' ').trim();\n      if (norm.length < 4) continue;\n      if (seen.has(norm)) continue;\n  }\n  return out.join('\\n');\n  }\n\n  function cleanTitle(title, content) {\n  var t = (title || '').toString().trim();\n  var first = (content || '').toString().split(/\\r?\\n/).find(Boolean) || '';\n  var re = /(?:^|\\b)(?:ep(?:isode)?|episode)\\s*[:#-]\\s([0-9]{1,4})/i;\n  var m = t.match(re); if (m) return 'Episode ' + m[1];\n  m = first.match(re); if (m) return 'Episode ' + m[1];\n  return t || 'Episode';\n  }\n\n\n  var decoded = decodeHtml(rawContent);\n  var noTags = stripTags(decoded);\n  var compact = tighten(noTags);\n  var cleaned = denoise(compact);\n\n  var titleClean = cleanTitle(rawTitle, cleaned);\n  var numMatch = (titleClean.match(/Episode\\s+([0-9]{1,4})/i) || [])[1];\n  var episode_number = numMatch ? parseInt(numMatch, 10) : null;\n\n  $json.episode_title_clean = titleClean;\n  $json.episode_number = episode_number;\n  $json.episode_content_clean = cleaned;\n  $json.episode_text_excerpt = cleaned.length <= 5000 ? cleaned : cleaned.slice(0, 5000);\n  $json.episode_content_length = cleaned.length;\n\n  return $item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        816
      ],
      "id": "82dacd86-21fe-4ed2-ae06-c5b81e1e29c1",
      "name": "cleanAndPrep"
    }
  ],
  "connections": {
    "Episode Ready Webhook": {
      "main": [
        [
          {
            "node": "Validate Episode Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Payload OK": {
      "main": [
        [
          {
            "node": "Check File Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Payload Invalid": {
      "main": [
        [
          {
            "node": "Respond Bad Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Episode Payload": {
      "main": [
        [
          {
            "node": "Payload OK",
            "type": "main",
            "index": 0
          },
          {
            "node": "Payload Invalid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Status": {
      "main": [
        [
          {
            "node": "Check Embeddings Count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Embeddings Count": {
      "main": [
        [
          {
            "node": "Gate Ready",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gate Not Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate Ready": {
      "main": [
        [
          {
            "node": "Idempotency New",
            "type": "main",
            "index": 0
          },
          {
            "node": "Idempotency Duplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Idempotency New": {
      "main": [
        [
          {
            "node": "Respond Accepted",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Episode Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gate Not Ready": {
      "main": [
        [
          {
            "node": "Respond Not Ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get Latest Episode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Latest Episode": {
      "main": [
        [
          {
            "node": "Get Episode Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Episode Chunks": {
      "main": [
        [
          {
            "node": "Combine Episode Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Episode Content": {
      "main": [
        [
          {
            "node": "cleanAndPrep",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Concepts (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Concepts",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Rank Topics": {
      "main": [
        [
          {
            "node": "Loop Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Days": {
      "main": [
        [],
        [
          {
            "node": "Generate Enrichment Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Enrichment Queries": {
      "main": [
        [
          {
            "node": "Build Query Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Query Embeddings": {
      "main": [
        [
          {
            "node": "Extract Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Embeddings": {
      "main": [
        [
          {
            "node": "Search Similar (Q1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Similar (Q1)": {
      "main": [
        [
          {
            "node": "Combine Enrichment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Enrichment Data": {
      "main": [
        [
          {
            "node": "Generate Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Content",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse Generated Content": {
      "main": [
        [
          {
            "node": "Expert Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Expert Review",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse Review JSON": {
      "main": [
        [
          {
            "node": "Content Approved?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Approved?": {
      "main": [
        [
          {
            "node": "Apply Review Fixes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Metrics: Batch Completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Review Fixes": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Instagram (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Optimize Instagram",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Facebook (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Optimize Facebook",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Optimize LinkedIn (GPT-5-Nano)": {
      "ai_languageModel": [
        [
          {
            "node": "Optimize LinkedIn",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Combine Optimized Content": {
      "main": [
        [
          {
            "node": "Prepare Insert Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Insert Payload": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Metrics: Batch Completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Idempotency Duplicate": {
      "main": [
        [
          {
            "node": "Respond Duplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Optimize LinkedIn",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Optimize Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content": {
      "main": [
        [
          {
            "node": "Parse Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review": {
      "main": [
        [
          {
            "node": "Parse Review JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Concepts": {
      "main": [
        [
          {
            "node": "Rank Topics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Instagram": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize LinkedIn": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Facebook": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanAndPrep": {
      "main": [
        [
          {
            "node": "Extract Concepts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}