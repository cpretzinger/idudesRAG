{
  "name": "10 - Social Content Automation (A+)",
  "settings": {
    "executionOrder": "v1"
  },
  "nodes": [
    {
      "id": "wh-episode-ready",
      "name": "Episode Ready Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        120
      ],
      "parameters": {
        "httpMethod": "POST",
        "path": "/events/episode-ready",
        "responseMode": "responseNode",
        "options": {}
      }
    },
    {
      "id": "code-payload-ok",
      "name": "Payload OK",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        80
      ],
      "parameters": {
        "jsCode": "if ($json.ok) { return [{ json: $json }]; } return [];"
      }
    },
    {
      "id": "code-payload-invalid",
      "name": "Payload Invalid",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        160
      ],
      "parameters": {
        "jsCode": "if (!$json.ok) { return [{ json: $json }]; } return [];"
      }
    },
    {
      "id": "respond-bad-request",
      "name": "Respond Bad Request",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        820,
        200
      ],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'bad_request', error: $json.error || 'file_id and filename required' } }}",
        "options": { "responseCode": 400 }
      }
    },
    {
      "id": "code-validate-payload",
      "name": "Validate Episode Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        120
      ],
      "parameters": {
        "jsCode": "const b = $json.body || {};\nif (!b.file_id || !b.filename) {\n  return [{ json: { ok: false, status: 400, error: 'file_id and filename required' } }];\n}\nreturn [{ json: { ok: true, file_id: b.file_id, filename: b.filename } }];"
      }
    },
    {
      "id": "db-check-status",
      "name": "Check File Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        720,
        80
      ],
      "credentials": { "postgres": { "name": "RailwayPG-idudes" } },
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT status FROM core.file_status WHERE file_id = $1",
        "options": { "queryReplacement": "={{ $json.file_id }}" }
      }
    },
    {
      "id": "db-check-emb-count",
      "name": "Check Embeddings Count",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        720,
        160
      ],
      "credentials": { "postgres": { "name": "RailwayPG-idudes" } },
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COUNT(*)::int AS count FROM core.embeddings WHERE file_id = $1",
        "options": { "queryReplacement": "={{ $json.file_id }}" }
      }
    },
    {
      "id": "gate-ready",
      "name": "Gate Ready",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        120
      ],
      "parameters": {
        "jsCode": "const s = $items('Check File Status',0,0)[0]?.json?.status;\nconst c = Number($items('Check Embeddings Count',0,0)[0]?.json?.count || 0);\nif (s === 'completed' && c > 0) { return [{ json: { ...$json, ready: true } }]; }\nreturn [];"
      }
    },
    {
      "id": "gate-idem-new",
      "name": "Idempotency New",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1180,
        120
      ],
      "parameters": {
        "jsCode": "const sd = this.getWorkflowStaticData('global'); sd.socialProcessed = sd.socialProcessed || {}; const fid = $json.file_id; if (!fid) return []; if (sd.socialProcessed[fid]) { return []; } sd.socialProcessed[fid] = { first_seen: new Date().toISOString() }; return [{ json: $json }];"
      }
    },
    {
      "id": "gate-idem-dup",
      "name": "Idempotency Duplicate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1180,
        160
      ],
      "parameters": {
        "jsCode": "const sd = this.getWorkflowStaticData('global'); sd.socialProcessed = sd.socialProcessed || {}; const fid = $json.file_id; if (!fid) return []; if (sd.socialProcessed[fid]) { return [{ json: $json }]; } return [];"
      }
    },
    {
      "id": "respond-duplicate",
      "name": "Respond Duplicate",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1400,
        160
      ],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'duplicate', file_id: $json.file_id } }}",
        "options": { "responseCode": 200 }
      }
    },
    {
      "id": "gate-not-ready",
      "name": "Gate Not Ready",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        200
      ],
      "parameters": {
        "jsCode": "const s = $items('Check File Status',0,0)[0]?.json?.status;\nconst c = Number($items('Check Embeddings Count',0,0)[0]?.json?.count || 0);\nif (!(s === 'completed' && c > 0)) { return [{ json: { ...$json, ready: false } }]; }\nreturn [];"
      }
    },
    {
      "id": "respond-accepted",
      "name": "Respond Accepted",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1180,
        80
      ],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'accepted', file_id: $json.file_id } }}",
        "options": { "responseCode": 200 }
      }
    },
    {
      "id": "respond-not-ready",
      "name": "Respond Not Ready",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1180,
        200
      ],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { status: 'not_ready', file_id: $json.file_id } }}",
        "options": { "responseCode": 202 }
      }
    },
    {
      "id": "n1",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "parameters": {}
    },
    {
      "id": "n2",
      "name": "Get Latest Episode",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        480,
        300
      ],
      "credentials": {
        "postgres": {
          "name": "RailwayPG-idudes"
        }
      },
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT fs.file_id, fs.filename, fs.created_at, COUNT(e.id) AS chunk_count\nFROM core.file_status fs\nLEFT JOIN core.embeddings e ON e.file_id = fs.file_id\nWHERE fs.status = 'completed' AND fs.filename ILIKE '%Episode%'\nGROUP BY fs.file_id, fs.filename, fs.created_at\nORDER BY fs.created_at DESC\nLIMIT 1;"
      }
    },
    {
      "id": "n3",
      "name": "Get Episode Chunks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        720,
        300
      ],
      "credentials": {
        "postgres": {
          "name": "RailwayPG-idudes"
        }
      },
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, text, chunk_index\nFROM core.embeddings\nWHERE file_id = $1\nORDER BY chunk_index ASC;",
        "options": {
          "queryReplacement": "={{ [ $json.file_id || ($items('Get Latest Episode',0,0)[0] && $items('Get Latest Episode',0,0)[0].json.file_id) ] }}"
        }
      }
    },
    {
      "id": "n4",
      "name": "Combine Episode Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        300
      ],
      "parameters": {
        "jsCode": "// Get all chunks from Get Episode Chunks node\nconst chunks = $input.all().map(i => i.json);\n\n// Support both webhook path and manual trigger path\nlet ctx = null;\ntry {\n  // Try webhook path first\n  const validateItems = $('Validate Episode Payload').all();\n  if (validateItems && validateItems.length > 0) {\n    ctx = validateItems[0].json;\n  }\n} catch (e) {\n  // Webhook path not available, try manual path\n}\n\nif (!ctx) {\n  try {\n    // Try manual trigger path\n    const episodeItems = $('Get Latest Episode').all();\n    if (episodeItems && episodeItems.length > 0) {\n      ctx = episodeItems[0].json;\n    }\n  } catch (e) {\n    // Manual path also not available\n  }\n}\n\nif (!ctx) {\n  throw new Error('Episode context missing - could not find data from either Validate Episode Payload or Get Latest Episode');\n}\n\n// Sort chunks by index and combine text\nconst sortedChunks = chunks.sort((a, b) => (a.chunk_index ?? 0) - (b.chunk_index ?? 0));\nconst episodeContent = sortedChunks.map(c => c.text || '').join('\\n\\n');\n\n// Extract episode number from filename\nconst filename = ctx.filename || '';\nconst match = filename.match(/Episode\\s+(\\d+)/i);\nconst episodeNumber = match ? match[1] : null;\n\n// Return combined data\nreturn [{\n  json: {\n    episode_content: episodeContent.slice(0, 20000),\n    episode_title: filename.replace(/\\.txt$/i, ''),\n    episode_number: episodeNumber,\n    file_id: ctx.file_id,\n    chunk_count: chunks.length\n  }\n}];"
      }
    },
    {
      "id": "n5",
      "name": "Extract Concepts (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1180,
        300
      ],
      "credentials": {
        "openAiApi": {
          "name": "ZARAapiKey"
        }
      },
      "parameters": {
        "model": "gpt-5-nano",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert content analyst for the Insurance Dudes podcast. Return ONLY a valid JSON array (no prose, no markdown). For each concept: concept (1â€“2 sentences), category (sales_strategy | objection_handling | lead_gen | mindset | tech | case_study | industry_insight), actionability (high | medium | low), proof_type (data | story | framework | none), hook_potential (1â€“10), platform_fit (instagram | facebook | linkedin | all)."
            },
            {
              "role": "user",
              "content": "=Episode: {{ $json.episode_title }}\n\nContent (truncated):\n{{ $json.episode_content.slice(0, 3500) }}\n\nExtract 15â€“20 concepts as JSON array."
            }
          ]
        },
        "options": {
          "temperature": 0.2,
          "maxTokens": 1100,
          "reasoning": {
            "effort": "high"
          }
        }
      }
    },
    {
      "id": "n6",
      "name": "Rank Topics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        300
      ],
      "parameters": {
        "jsCode": "const raw=$input.first().json.response||'[]'; let concepts=[];\ntry{const clean=raw.replace(/```json|```/g,'').trim(); concepts=JSON.parse(clean);}catch(e){throw new Error('Concept JSON parse fail: '+e.message)}\nconst W={a:0.35,p:0.25,r:0.20,v:0.15,e:0.05};\nconst scored=concepts.map(c=>{let a=7+(c.actionability==='high'?2:0)+(c.proof_type!=='none'?1:0); let p=c.platform_fit==='all'?10:8; let r=['data','story'].includes(c.proof_type)?9:(c.proof_type==='framework'?8:7); let v=Number(c.hook_potential||7); let en=7; const wt=a*W.a+p*W.p+r*W.r+v*W.v+en*W.e; return {...c, scores:{weighted_total:Math.round(wt*100)/100}};});\nconst top=scored.sort((a,b)=>b.scores.weighted_total-a.scores.weighted_total).slice(0,10);\nconst ep=$items('Combine Episode Content',0,0)[0].json;\nreturn top.map((c,i)=>({day_number:i+1, ...c, episode_title:ep.episode_title, episode_number:ep.episode_number, file_id:ep.file_id}));"
      }
    },
    {
      "id": "n7",
      "name": "Loop Days",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1600,
        300
      ],
      "parameters": {
        "batchSize": 1
      }
    },
    {
      "id": "n8",
      "name": "Generate Enrichment Queries",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        300
      ],
      "parameters": {
        "jsCode": "const c=$json.concept||''; const cat=$json.category||'default';\nconst T={\n sales_strategy:[`proven sales techniques for ${c.slice(0,50)}`,`successful agent strategies ${cat}`,`step-by-step framework for ${c.slice(0,40)}`],\n lead_gen:[`lead flow mechanics ${c.slice(0,40)}`,`Million Dollar Agency lead generation systems`,`internet lead secrets prospecting tactics`],\n objection_handling:[`overcoming objections in ${c.slice(0,40)}`,`objection handling scripts`,`client resistance closing techniques`],\n mindset:[`agent mindset ${c.slice(0,40)}`,`mental toughness for insurance pros`,`motivation and persistence`],\n case_study:[`agent success stories ${c.slice(0,40)}`,`real results case studies`,`proven strategies measurable outcomes`],\n default:[c.slice(0,60),`insurance agent tips for ${cat}`,`actionable advice for ${cat}`]\n};\nreturn { ...$json, enrichment_queries: (T[cat]||T.default) };"
      }
    },
    {
      "id": "n9",
      "name": "Build Query Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1960,
        300
      ],
      "parameters": {
        "url": "https://api.openai.com/v1/embeddings",
        "method": "POST",
        "authentication": "none",
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Authorization",
              "value": "=Bearer {{$env.OPENAI_API_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\"model\":\"text-embedding-3-small\",\"input\":[{{$json.enrichment_queries[0] | toString()}},{{$json.enrichment_queries[1] | toString()}},{{$json.enrichment_queries[2] | toString()}}]}"
      }
    },
    {
      "id": "n10",
      "name": "Extract Embeddings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2140,
        300
      ],
      "parameters": {
        "jsCode": "const r=$input.first().json; if(!r?.data||r.data.length<3) throw new Error('Embeddings response invalid');\nreturn [{json:{q1:r.data[0].embedding,q2:r.data[1].embedding,q3:r.data[2].embedding}}];"
      }
    },
    {
      "id": "n11",
      "name": "Search Similar (Q1)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        2320,
        300
      ],
      "credentials": {
        "postgres": {
          "name": "RailwayPG-idudes"
        }
      },
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT e.text, e.filename, 1 - (e.embedding <=> $1::vector(1536)) AS similarity\nFROM core.embeddings e\nWHERE e.file_id <> $2\nORDER BY similarity DESC\nLIMIT 5;",
        "options": {
          "queryReplacement": "={{ [ JSON.stringify($items('Extract Embeddings',0,0)[0].json.q1), $json.file_id ] }}"
        }
      }
    },
    {
      "id": "n12",
      "name": "Combine Enrichment Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2520,
        300
      ],
      "parameters": {
        "jsCode": "const topic=$items('Generate Enrichment Queries',0,0)[0].json;\nconst q1=$items('Search Similar (Q1)',0,0).map(i=>i.json);\nconst uniq=new Map(); for(const r of q1){const k=(r.text||'').slice(0,512); if(!uniq.has(k)) uniq.set(k,r);} \nconst top=[...uniq.values()].slice(0,9).map(r=>r.text).join('\\n\\n---\\n\\n');\nreturn { ...topic, enriched_content_chunks: top };"
      }
    },
    {
      "id": "n13",
      "name": "Generate Content (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2740,
        300
      ],
      "credentials": {
        "openAiApi": {
          "name": "ZARAapiKey"
        }
      },
      "parameters": {
        "model": "gpt-5-nano",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an elite social content generator for the Insurance Dudes. Generate platform-specific posts that are on-brand, high-signal, and conversion-minded. Output exactly as requested."
            },
            {
              "role": "user",
              "content": "=Generate social media content for DAY {{ $json.day_number }}: {{ $json.day_theme }}\n\nEPISODE: {{ $json.episode_title }} ({{ $json.episode_number }})\nTOPIC: {{ $json.concept }} ({{ $json.category }})\nScore: {{ $json.scores.weighted_total }}/10\n\nPRIMARY SOURCE (truncated):\n{{ $node[\"Combine Episode Content\"].json.episode_content.substring(0, 3000) }}\n\nENRICHMENT:\n{{ $json.enriched_content_chunks }}\n\nCreate 3 posts (Instagram Reel, Facebook, LinkedIn) exactly per the required formats."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 2000,
          "reasoning": {
            "effort": "high"
          }
        }
      }
    },
    {
      "id": "n14",
      "name": "Parse Generated Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2960,
        300
      ],
      "parameters": {
        "jsCode": "const raw=$json.response||'';\nconst ig=raw.match(/### INSTAGRAM REEL[\\s\\S]*?(?=### FACEBOOK POST|$)/i);\nconst fb=raw.match(/### FACEBOOK POST[\\s\\S]*?(?=### LINKEDIN POST|$)/i);\nconst li=raw.match(/### LINKEDIN POST[\\s\\S]*$/i);\nconst part=(m)=>m?m[0].replace(/### [A-Z ]+/i,'').trim():'';\nreturn {\n  day_number: $json.day_number,\n  day_theme: $json.day_theme,\n  episode_title: $json.episode_title,\n  topic_title: $json.concept,\n  instagram_content: part(ig),\n  facebook_content: part(fb),\n  linkedin_content: part(li)\n};"
      }
    },
    {
      "id": "n15",
      "name": "Expert Review (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3180,
        300
      ],
      "credentials": {
        "openAiApi": {
          "name": "ZARAapiKey"
        }
      },
      "parameters": {
        "model": "gpt-5-nano",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a strict content reviewer. Validate brand-safety, value delivery, platform fit, and engagement potential. Return ONLY JSON exactly in the schema provided."
            },
            {
              "role": "user",
              "content": "=Review these 3 social posts for Day {{ $json.day_number }} ({{ $json.day_theme }}).\nEpisode: {{ $json.episode_title }}\nTopic: {{ $json.topic_title }}\nReturn JSON with overall_recommendation (APPROVE | APPROVE_WITH_EDITS | REJECT) and per-platform required_fixes arrays."
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 1500,
          "reasoning": {
            "effort": "high"
          }
        }
      }
    },
    {
      "id": "n16",
      "name": "Parse Review JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3380,
        300
      ],
      "parameters": {
        "jsCode": "const raw=$items('Expert Review (GPT-5-Nano)',0,0)[0].json.response||'';\nlet review; try{review=JSON.parse(raw.replace(/```json|```/g,'').trim());}catch{review={overall_recommendation:'REJECT'}}\nreturn [{json:review}];"
      }
    },
    {
      "id": "n17",
      "name": "Content Approved?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3580,
        300
      ],
      "parameters": {
        "conditions": {
          "options": {},
          "conditions": [
            {
              "leftValue": "={{ $json.overall_recommendation }}",
              "rightValue": "APPROVE",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "leftValue": "={{ $json.overall_recommendation }}",
              "rightValue": "APPROVE_WITH_EDITS",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combineOperation": "any"
        }
      }
    },
    {
      "id": "n18",
      "name": "Apply Review Fixes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3780,
        220
      ],
      "parameters": {
        "jsCode": "const review=$json; const content=$items('Parse Generated Content',0,0)[0].json;\nconst apply=(list,txt)=>{if(!list) return txt; for(const f of list){ if(f.current&&f.fix) txt=txt.replace(f.current,f.fix);} return txt;};\nreturn {\n  day_number: content.day_number,\n  day_theme: content.day_theme,\n  episode_title: content.episode_title,\n  topic_title: content.topic_title,\n  instagram_content: apply(review.instagram_review?.required_fixes, content.instagram_content),\n  facebook_content: apply(review.facebook_review?.required_fixes, content.facebook_content),\n  linkedin_content: apply(review.linkedin_review?.required_fixes, content.linkedin_content)\n};"
      }
    },
    {
      "id": "n19",
      "name": "Optimize Instagram (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4000,
        100
      ],
      "credentials": {
        "openAiApi": {
          "name": "ZARAapiKey"
        }
      },
      "parameters": {
        "model": "gpt-5-nano",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "Optimize Instagram Reels for hook strength, clarity, and conversion. Output exactly in the requested format."
            },
            {
              "role": "user",
              "content": "=Optimize this approved Instagram Reel:\n\nCURRENT:\n{{ $json.instagram_content }}\n\nGoals: stronger hook (â‰¤8 words), 15â€“30s script (â‰¤3 sentences), crystal CTA, 5â€“8 hashtags. Output as:\nOPTIMIZED HOOK:\n\nOPTIMIZED SCRIPT:\n\nOPTIMIZED CTA:\n\nOPTIMIZED HASHTAGS:\n\nVISUAL SUGGESTIONS:\n- ...\n- ..."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "reasoning": {
            "effort": "high"
          }
        }
      }
    },
    {
      "id": "n20",
      "name": "Optimize Facebook (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4000,
        200
      ],
      "credentials": {
        "openAiApi": {
          "name": "ZARAapiKey"
        }
      },
      "parameters": {
        "model": "gpt-5-nano",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "Optimize Facebook posts for curiosity, readability, and community engagement. Output exactly in requested format."
            },
            {
              "role": "user",
              "content": "=Optimize this Facebook post:\n\nCURRENT:\n{{ $json.facebook_content }}\n\nGoals: hook+emoji, value in 2â€“3 short paragraphs, story, engagement question, 5â€“10 hashtags. Output as:\nOPTIMIZED FACEBOOK POST:\n\n[post...]\n\n[hashtags]\n\nSUGGESTED COMMENT RESPONSES:\n- ...\n- ...\n- ..."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "reasoning": {
            "effort": "high"
          }
        }
      }
    },
    {
      "id": "n21",
      "name": "Optimize LinkedIn (GPT-5-Nano)",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4000,
        300
      ],
      "credentials": {
        "openAiApi": {
          "name": "ZARAapiKey"
        }
      },
      "parameters": {
        "model": "gpt-5-nano",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "Optimize LinkedIn for credibility, insight density, proof, and professional tone. Output exactly in requested format."
            },
            {
              "role": "user",
              "content": "=Optimize LinkedIn post:\n\nCURRENT:\n{{ $json.linkedin_content }}\n\nGoals: crisp hook, insight/framework, data point, leadership takeaway, discussion prompt, 3â€“6 pro hashtags. Output as:\nOPTIMIZED LINKEDIN POST:\n\n[post...]\n\n[hashtags]\n\nENGAGEMENT STRATEGY NOTES:\n- ...\n- ...\n- ..."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "reasoning": {
            "effort": "high"
          }
        }
      }
    },
    {
      "id": "n22",
      "name": "Combine Optimized Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4220,
        200
      ],
      "parameters": {
        "jsCode": "const base=$items('Apply Review Fixes',0,0)[0].json;\nconst ig=$items('Optimize Instagram (GPT-5-Nano)',0,0)[0].json.response||base.instagram_content;\nconst fb=$items('Optimize Facebook (GPT-5-Nano)',0,0)[0].json.response||base.facebook_content;\nconst li=$items('Optimize LinkedIn (GPT-5-Nano)',0,0)[0].json.response||base.linkedin_content;\nreturn { ...base, instagram_final: ig, facebook_final: fb, linkedin_final: li, ready_for_scheduling: true };"
      }
    },
    {
      "id": "n23",
      "name": "Prepare Insert Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4440,
        200
      ],
      "parameters": {
        "jsCode": "const x=$input.first().json;\nreturn [{json:{\n day_number:x.day_number,\n day_theme:x.day_theme,\n episode_title:x.episode_title,\n topic_title:x.topic_title,\n instagram_content:x.instagram_final,\n facebook_content:x.facebook_final,\n linkedin_content:x.linkedin_final,\n schedule_data: JSON.stringify(x.schedule||{}),\n review_scores: JSON.stringify(x.review_scores||{}),\n status:'pending_schedule'\n}}];"
      }
    },
    {
      "id": "n24",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        4660,
        200
      ],
      "credentials": {
        "postgres": {
          "name": "RailwayPG-idudes"
        }
      },
      "parameters": {
        "operation": "insert",
        "schema": "core",
        "table": "social_content_generated",
        "columns": {
          "mappings": [
            {
              "column": "day_number",
              "value": "={{ $json.day_number }}"
            },
            {
              "column": "day_theme",
              "value": "={{ $json.day_theme }}"
            },
            {
              "column": "episode_title",
              "value": "={{ $json.episode_title }}"
            },
            {
              "column": "topic_title",
              "value": "={{ $json.topic_title }}"
            },
            {
              "column": "instagram_content",
              "value": "={{ $json.instagram_content }}"
            },
            {
              "column": "facebook_content",
              "value": "={{ $json.facebook_content }}"
            },
            {
              "column": "linkedin_content",
              "value": "={{ $json.linkedin_content }}"
            },
            {
              "column": "schedule_data",
              "value": "={{ $json.schedule_data }}"
            },
            {
              "column": "review_scores",
              "value": "={{ $json.review_scores }}"
            },
            {
              "column": "status",
              "value": "pending_schedule"
            }
          ]
        }
      }
    },
    {
      "id": "n25",
      "name": "Metrics: Batch Completed",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        4880,
        200
      ],
      "credentials": {
        "postgres": {
          "name": "RailwayPG-idudes"
        }
      },
      "parameters": {
        "operation": "insert",
        "schema": "core",
        "table": "metrics",
        "columns": {
          "mappings": [
            {
              "column": "metric_name",
              "value": "social_content_batch_completed"
            },
            {
              "column": "metric_value",
              "value": "1"
            },
            {
              "column": "tags",
              "value": "={{ JSON.stringify({ workflow:'social_automation', episode:$items('Combine Episode Content',0,0)[0].json.episode_title }) }}"
            }
          ]
        }
      }
    },
    {
      "id": "n26",
      "name": "Drive Mirror (Disabled)",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        4660,
        360
      ],
      "disabled": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "name": "Google Drive account"
        }
      },
      "parameters": {
        "operation": "upload",
        "name": "={{ $json.episode_title }} - Day {{ $json.day_number }}.md",
        "binaryData": false,
        "fileContent": "=# Episode: {{ $json.episode_title }}\\n\\n## Day {{ $json.day_number }} â€” {{ $json.day_theme }}\\n\\n### Instagram\\n{{ $json.instagram_content }}\\n\\n### Facebook\\n{{ $json.facebook_content }}\\n\\n### LinkedIn\\n{{ $json.linkedin_content }}",
        "parents": "={{ [$env.DRIVE_CONTENT_MIRROR_FOLDER_ID] }}"
      }
    }
  ],
  "connections": {
    "Episode Ready Webhook": {
      "main": [
        [ { "node": "Validate Episode Payload", "type": "main", "index": 0 } ]
      ]
    },
    "Validate Episode Payload": {
      "main": [
        [
          { "node": "Payload OK", "type": "main", "index": 0 },
          { "node": "Payload Invalid", "type": "main", "index": 0 }
        ]
      ]
    },
    "Payload OK": {
      "main": [
        [ { "node": "Check File Status", "type": "main", "index": 0 } ]
      ]
    },
    "Payload Invalid": {
      "main": [
        [ { "node": "Respond Bad Request", "type": "main", "index": 0 } ]
      ]
    },
    "Check File Status": {
      "main": [
        [ { "node": "Check Embeddings Count", "type": "main", "index": 0 } ]
      ]
    },
    "Check Embeddings Count": {
      "main": [
        [
          { "node": "Gate Ready", "type": "main", "index": 0 },
          { "node": "Gate Not Ready", "type": "main", "index": 0 }
        ]
      ]
    },
    "Gate Ready": {
      "main": [
        [
          { "node": "Idempotency New", "type": "main", "index": 0 },
          { "node": "Idempotency Duplicate", "type": "main", "index": 0 }
        ]
      ]
    },
    "Idempotency New": {
      "main": [
        [
          { "node": "Respond Accepted", "type": "main", "index": 0 },
          { "node": "Get Episode Chunks", "type": "main", "index": 0 }
        ]
      ]
    },
    "Idempotency Duplicate": {
      "main": [
        [ { "node": "Respond Duplicate", "type": "main", "index": 0 } ]
      ]
    },
    "Gate Not Ready": {
      "main": [
        [ { "node": "Respond Not Ready", "type": "main", "index": 0 } ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Get Latest Episode",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Latest Episode": {
      "main": [
        [
          {
            "node": "Get Episode Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Episode Chunks": {
      "main": [
        [
          {
            "node": "Combine Episode Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Episode Content": {
      "main": [
        [
          {
            "node": "Extract Concepts (GPT-5-Nano)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Concepts (GPT-5-Nano)": {
      "main": [
        [
          {
            "node": "Rank Topics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rank Topics": {
      "main": [
        [
          {
            "node": "Loop Days",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Days": {
      "main": [
        [
          {
            "node": "Generate Enrichment Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Enrichment Queries": {
      "main": [
        [
          {
            "node": "Build Query Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Query Embeddings": {
      "main": [
        [
          {
            "node": "Extract Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Embeddings": {
      "main": [
        [
          {
            "node": "Search Similar (Q1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Similar (Q1)": {
      "main": [
        [
          {
            "node": "Combine Enrichment Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Enrichment Data": {
      "main": [
        [
          {
            "node": "Generate Content (GPT-5-Nano)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content (GPT-5-Nano)": {
      "main": [
        [
          {
            "node": "Parse Generated Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Generated Content": {
      "main": [
        [
          {
            "node": "Expert Review (GPT-5-Nano)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expert Review (GPT-5-Nano)": {
      "main": [
        [
          {
            "node": "Parse Review JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Review JSON": {
      "main": [
        [
          {
            "node": "Content Approved?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Approved?": {
      "main": [
        [
          {
            "node": "Apply Review Fixes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Metrics: Batch Completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Review Fixes": {
      "main": [
        [
          {
            "node": "Optimize Instagram (GPT-5-Nano)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Optimize Facebook (GPT-5-Nano)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Optimize LinkedIn (GPT-5-Nano)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Instagram (GPT-5-Nano)": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Facebook (GPT-5-Nano)": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize LinkedIn (GPT-5-Nano)": {
      "main": [
        [
          {
            "node": "Combine Optimized Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Optimized Content": {
      "main": [
        [
          {
            "node": "Prepare Insert Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Insert Payload": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Metrics: Batch Completed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Drive Mirror (Disabled)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "updatedAt": "2025-10-12T22:26:41.611641Z"
}
