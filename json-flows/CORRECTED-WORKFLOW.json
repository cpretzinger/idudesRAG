{
  "name": "idudesRAG Document Processing - CORRECTED",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "idudesRAG/documents",
        "options": {}
      },
      "id": "webhook-upload",
      "name": "Webhook - Document Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract and prepare document data\nconst input = $input.first().json;\n\n// Decode base64 content\nlet content = '';\nif (input.content) {\n  try {\n    content = Buffer.from(input.content, 'base64').toString('utf8');\n  } catch (error) {\n    content = input.content; // fallback if not base64\n  }\n}\n\n// Create document object with pageContent for LangChain\nconst document = {\n  pageContent: content,\n  metadata: {\n    filename: input.filename || 'unknown',\n    source: 'idudesRAG-upload',\n    timestamp: input.timestamp || new Date().toISOString(),\n    file_type: input.type || 'unknown',\n    file_size: input.size || 0\n  }\n};\n\nreturn [{ json: document }];"
      },
      "id": "prep-doc",
      "name": "PrepDoc",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 300]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.pageContent }}",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "filename",
                "value": "={{ $json.metadata.filename }}"
              },
              {
                "name": "source",
                "value": "={{ $json.metadata.source }}"
              },
              {
                "name": "file_type",
                "value": "={{ $json.metadata.file_type }}"
              },
              {
                "name": "file_size",
                "value": "={{ $json.metadata.file_size }}"
              },
              {
                "name": "chunk_index",
                "value": "={{ $itemIndex }}"
              },
              {
                "name": "timestamp",
                "value": "={{ $json.metadata.timestamp }}"
              },
              {
                "name": "processing_date",
                "value": "={{ new Date().toISOString() }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [640, 300],
      "id": "doc-loader",
      "name": "DocLoader"
    },
    {
      "parameters": {
        "chunkSize": 1000,
        "chunkOverlap": 200
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [840, 300],
      "id": "text-splitter",
      "name": "Text Splitter"
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1536,
          "batchSize": 200
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [1040, 300],
      "id": "embeddings-openai",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "openai-creds",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "document_embeddings",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [1240, 300],
      "id": "pgvector-store",
      "name": "PGVector Store",
      "credentials": {
        "postgres": {
          "id": "railway-pgvector",
          "name": "Railway PGVector"
        }
      }
    }
  ],
  "connections": {
    "Webhook - Document Upload": {
      "main": [
        [
          {
            "node": "PrepDoc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PrepDoc": {
      "main": [
        [
          {
            "node": "DocLoader",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DocLoader": {
      "ai_document": [
        [
          {
            "node": "Text Splitter",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Text Splitter": {
      "ai_document": [
        [
          {
            "node": "PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["idudesRAG", "corrected"],
  "triggerCount": 0,
  "updatedAt": "2025-01-05T21:00:00.000Z",
  "versionId": "2"
}