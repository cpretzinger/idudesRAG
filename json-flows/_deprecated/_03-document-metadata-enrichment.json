{
  "name": "Document Metadata Enrichment - idudesRAG",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/idudesRAG/enrich",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "a1a2b3c0-8c4c-11ef-9f7a-0242ac120008",
      "name": "Webhook - Document Enrichment",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "webhookId": "idudesrag-enrich-webhook"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, filename, content, metadata FROM documents WHERE id = $1",
        "additionalFields": {
          "parameters": [
            "={{ $json.body.document_id }}"
          ]
        }
      },
      "id": "b2b3c4d0-8c4c-11ef-9f7a-0242ac120009",
      "name": "Get Document",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        460,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract metadata from document content using GPT-5-nano\nconst content = $input.first().json.content;\nconst filename = $input.first().json.filename;\n\n// Prepare enrichment request\nconst enrichmentPrompt = `Analyze this document and extract metadata. Return JSON only.\n\nDocument: ${filename}\nContent: ${content.substring(0, 2000)}...\n\nExtract:\n1. document_type (email, contract, report, memo, policy, claim, etc.)\n2. entities: {people: [], companies: [], dates: [], amounts: [], policies: []}\n3. tags: [relevant keywords]\n4. summary: brief description\n5. priority: low|medium|high\n6. confidence: 0-1 score\n\nReturn as clean JSON object only.`;\n\nreturn [{\n  json: {\n    document_id: $input.first().json.id,\n    filename: filename,\n    content_preview: content.substring(0, 500),\n    enrichment_prompt: enrichmentPrompt,\n    tenant: 'idudes'\n  }\n}];"
      },
      "id": "c3c4d5e0-8c4c-11ef-9f7a-0242ac12000a",
      "name": "Prepare Enrichment",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "chatId": {
          "__rl": true,
          "value": "create",
          "mode": "list"
        },
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a document metadata extraction expert. Extract structured metadata from insurance and business documents. Return only valid JSON."
            },
            {
              "role": "user", 
              "content": "={{ $json.enrichment_prompt }}"
            }
          ]
        },
        "options": {
          "model": "gpt-5-nano",
          "temperature": 0.1,
          "maxTokens": 1000
        }
      },
      "id": "d4d5e6f0-8c4c-11ef-9f7a-0242ac12000b",
      "name": "GPT-5 Enrichment",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [
        900,
        300
      ],
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAI API - idudesRAG"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process GPT response and prepare database update\nconst gptResponse = $input.first().json.choices[0].message.content;\nconst documentId = $('Prepare Enrichment').item.json.document_id;\n\ntry {\n  // Parse GPT JSON response\n  const extractedMetadata = JSON.parse(gptResponse);\n  \n  // Create enriched metadata object\n  const enrichedMetadata = {\n    ...extractedMetadata,\n    enriched_at: new Date().toISOString(),\n    enrichment_version: '1.0',\n    tenant: 'idudes',\n    model_used: 'gpt-5-nano'\n  };\n  \n  return [{\n    json: {\n      document_id: documentId,\n      enriched_metadata: enrichedMetadata,\n      success: true\n    }\n  }];\n  \n} catch (error) {\n  // Handle JSON parse errors\n  return [{\n    json: {\n      document_id: documentId,\n      enriched_metadata: {\n        document_type: 'unknown',\n        entities: {},\n        tags: [],\n        summary: 'Failed to extract metadata',\n        priority: 'low',\n        confidence: 0,\n        error: error.message,\n        raw_response: gptResponse,\n        enriched_at: new Date().toISOString(),\n        tenant: 'idudes'\n      },\n      success: false,\n      error: error.message\n    }\n  }];\n}"
      },
      "id": "e5e6f7g0-8c4c-11ef-9f7a-0242ac12000c",
      "name": "Process Metadata",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE documents SET metadata = metadata || $2::jsonb, updated_at = NOW() WHERE id = $1",
        "additionalFields": {
          "parameters": [
            "={{ $json.document_id }}",
            "={{ JSON.stringify($json.enriched_metadata) }}"
          ]
        }
      },
      "id": "f6f7g8h0-8c4c-11ef-9f7a-0242ac12000d",
      "name": "Update Document",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1340,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": $json.success,\n  \"document_id\": $json.document_id,\n  \"metadata\": $json.enriched_metadata,\n  \"message\": $json.success ? \"Document metadata enriched successfully\" : \"Failed to enrich metadata\"\n} }}"
      },
      "id": "07081920-8c4d-11ef-9f7a-0242ac12000e", 
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO enrichment_logs (tenant, document_id, status, metadata_extracted, error_message, created_at) VALUES ($1, $2, $3, $4, $5, NOW())",
        "additionalFields": {
          "parameters": [
            "idudes",
            "={{ $('Process Metadata').item.json.document_id }}",
            "={{ $('Process Metadata').item.json.success ? 'success' : 'error' }}",
            "={{ JSON.stringify($('Process Metadata').item.json.enriched_metadata) }}",
            "={{ $('Process Metadata').item.json.error || null }}"
          ]
        }
      },
      "id": "18192021-8c4d-11ef-9f7a-0242ac12000f",
      "name": "Log Enrichment",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1340,
        460
      ],
      "credentials": {
        "postgres": {
          "id": "POSTGRES_CREDENTIAL_ID",
          "name": "iDudes PGVector Railway"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Document Enrichment": {
      "main": [
        [
          {
            "node": "Get Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Document": {
      "main": [
        [
          {
            "node": "Prepare Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Enrichment": {
      "main": [
        [
          {
            "node": "GPT-5 Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT-5 Enrichment": {
      "main": [
        [
          {
            "node": "Process Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Metadata": {
      "main": [
        [
          {
            "node": "Update Document",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Enrichment", 
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Document": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "errorWorkflow": "",
      "continueOnFail": false
    }
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ai.thirdeyediagnostics.com"
  },
  "id": "document-metadata-enrichment-idudes",
  "tags": [
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z",
      "id": "enrichment",
      "name": "enrichment"
    },
    {
      "createdAt": "2025-10-06T00:00:00.000Z",
      "updatedAt": "2025-10-06T00:00:00.000Z", 
      "id": "idudes",
      "name": "idudes"
    }
  ]
}