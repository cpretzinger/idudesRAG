{
  "name": "idudesRAG Document Processing",
  "nodes": [
    {
      "parameters": {
        "path": "idudesRAG/documents",
        "httpMethod": "POST",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "webhook-upload",
      "name": "Webhook - Document Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract and prepare document data\nconst input = $input.first().json;\n\n// Decode base64 content\nlet content = '';\nif (input.content) {\n  try {\n    content = Buffer.from(input.content, 'base64').toString('utf8');\n  } catch (error) {\n    content = input.content; // fallback if not base64\n  }\n}\n\n// Create document object\nconst document = {\n  filename: input.filename || 'unknown',\n  content: content,\n  file_size: input.size || 0,\n  file_type: input.type || 'unknown',\n  metadata: {\n    source: 'idudesRAG-upload',\n    timestamp: input.timestamp || new Date().toISOString(),\n    original_name: input.filename\n  }\n};\n\nreturn [{ json: document }];"
      },
      "id": "process-upload",
      "name": "Process Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "documents",
        "columns": {\n          \"mappingMode\": \"defineBelow\",\n          \"value\": {\n            \"filename\": \"={{ $json.filename }}\",\n            \"content\": \"={{ $json.content }}\",\n            \"file_size\": \"={{ $json.file_size }}\",\n            \"file_type\": \"={{ $json.file_type }}\",\n            \"metadata\": \"={{ JSON.stringify($json.metadata) }}\"\n          }\n        },\n        \"onConflict\": \"ignore\",\n        \"returnFields\": \"id\"\n      },\n      \"id\": \"store-document\",\n      \"name\": \"Store Document\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"typeVersion\": 2.4,\n      \"position\": [640, 300],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"idudes-pgvector\",\n          \"name\": \"iDudes PGVector Railway\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Chunk text for embeddings\\nconst input = $input.first().json;\\nconst content = input.content || '';\\nconst documentId = input.id;\\n\\nconst chunkSize = 1000;\\nconst overlap = 200;\\nconst chunks = [];\\n\\n// Split into chunks\\nfor (let i = 0; i < content.length; i += (chunkSize - overlap)) {\\n  const chunk = content.slice(i, i + chunkSize);\\n  if (chunk.trim().length > 0) {\\n    chunks.push({\\n      document_id: documentId,\\n      chunk_text: chunk.trim(),\\n      chunk_index: chunks.length,\\n      metadata: {\\n        filename: input.filename,\\n        chunk_size: chunk.length,\\n        total_length: content.length\\n      }\\n    });\\n  }\\n}\\n\\nreturn chunks.map(chunk => ({ json: chunk }));\"\n      },\n      \"id\": \"chunk-text\",\n      \"name\": \"Chunk Text\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [840, 300]\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"embedding\",\n        \"model\": \"text-embedding-3-small\",\n        \"text\": \"={{ $json.chunk_text }}\",\n        \"options\": {\n          \"dimensions\": 1536\n        }\n      },\n      \"id\": \"generate-embeddings\",\n      \"name\": \"Generate Embeddings\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"typeVersion\": 1.2,\n      \"position\": [1040, 300],\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"openai-account\",\n          \"name\": \"OpenAI API\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"insert\",\n        \"schema\": \"public\",\n        \"table\": \"document_embeddings\",\n        \"columns\": {\n          \"mappingMode\": \"defineBelow\",\n          \"value\": {\n            \"document_id\": \"={{ $json.document_id }}\",\n            \"chunk_text\": \"={{ $json.chunk_text }}\",\n            \"embedding\": \"={{ JSON.stringify($('Generate Embeddings').item.json.data) }}\",\n            \"chunk_index\": \"={{ $json.chunk_index }}\",\n            \"chunk_metadata\": \"={{ JSON.stringify($json.metadata) }}\"\n          }\n        }\n      },\n      \"id\": \"store-embeddings\",\n      \"name\": \"Store Embeddings\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"typeVersion\": 2.4,\n      \"position\": [1240, 300],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"idudes-pgvector\",\n          \"name\": \"iDudes PGVector Railway\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"path\": \"idudesRAG/search\",\n        \"httpMethod\": \"POST\",\n        \"responseMode\": \"lastNode\"\n      },\n      \"id\": \"webhook-search\",\n      \"name\": \"Webhook - Search\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"typeVersion\": 1.1,\n      \"position\": [240, 500]\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"embedding\",\n        \"model\": \"text-embedding-3-small\",\n        \"text\": \"={{ $json.query }}\",\n        \"options\": {\n          \"dimensions\": 1536\n        }\n      },\n      \"id\": \"embed-query\",\n      \"name\": \"Embed Query\",\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\",\n      \"typeVersion\": 1.2,\n      \"position\": [440, 500],\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"openai-account\",\n          \"name\": \"OpenAI API\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"executeQuery\",\n        \"query\": \"SELECT \\n  d.id as document_id,\\n  d.filename,\\n  de.chunk_text,\\n  1 - (de.embedding <=> $1::vector) as similarity\\nFROM document_embeddings de\\nJOIN documents d ON d.id = de.document_id\\nWHERE 1 - (de.embedding <=> $1::vector) > 0.7\\nORDER BY de.embedding <=> $1::vector\\nLIMIT 10;\",\n        \"additionalFields\": {\n          \"mode\": \"independently\",\n          \"queryParameters\": \"={{ JSON.stringify($('Embed Query').item.json.data) }}\"\n        }\n      },\n      \"id\": \"vector-search\",\n      \"name\": \"Vector Search\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"typeVersion\": 2.4,\n      \"position\": [640, 500],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"idudes-pgvector\",\n          \"name\": \"iDudes PGVector Railway\"\n        }\n      }\n    }\n  ],\n  \"connections\": {\n    \"Webhook - Document Upload\": {\n      \"main\": [[\n        {\n          \"node\": \"Process Upload\",\n          \"type\": \"main\",\n          \"index\": 0\n        }\n      ]]\n    },\n    \"Process Upload\": {\n      \"main\": [[\n        {\n          \"node\": \"Store Document\",\n          \"type\": \"main\",\n          \"index\": 0\n        }\n      ]]\n    },\n    \"Store Document\": {\n      \"main\": [[\n        {\n          \"node\": \"Chunk Text\",\n          \"type\": \"main\",\n          \"index\": 0\n        }\n      ]]\n    },\n    \"Chunk Text\": {\n      \"main\": [[\n        {\n          \"node\": \"Generate Embeddings\",\n          \"type\": \"main\",\n          \"index\": 0\n        }\n      ]]\n    },\n    \"Generate Embeddings\": {\n      \"main\": [[\n        {\n          \"node\": \"Store Embeddings\",\n          \"type\": \"main\",\n          \"index\": 0\n        }\n      ]]\n    },\n    \"Webhook - Search\": {\n      \"main\": [[\n        {\n          \"node\": \"Embed Query\",\n          \"type\": \"main\",\n          \"index\": 0\n        }\n      ]]\n    },\n    \"Embed Query\": {\n      \"main\": [[\n        {\n          \"node\": \"Vector Search\",\n          \"type\": \"main\",\n          \"index\": 0\n        }\n      ]]\n    }\n  },\n  \"pinData\": {},\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"tags\": [\"idudesRAG\", \"documents\", \"vector-search\"],\n  \"triggerCount\": 0,\n  \"updatedAt\": \"2025-01-05T20:30:00.000Z\",\n  \"versionId\": \"1\"\n}