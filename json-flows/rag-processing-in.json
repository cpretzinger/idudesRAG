{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "idudesRAG/documents",
        "options": {}
      },
      "id": "5fab7fd6-a537-431f-aec7-4f10497676dc",
      "name": "Webhook - Document Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        320,
        -128
      ],
      "webhookId": "07af34ea-15fa-468c-804a-7176b5b2a733"
    },
    {
      "parameters": {
        "jsCode": "// FIXED PrepDoc Code for n8n\n// This goes in the Code node after the Webhook\n\n// Get the webhook input data\nconst input = $input.first().json;\n\nconsole.log('Raw input:', JSON.stringify(input, null, 2));\n\n// Decode base64 content\nlet content = '';\nif (input.content) {\n  try {\n    // Decode base64 to text\n    content = Buffer.from(input.content, 'base64').toString('utf8');\n    console.log('Decoded content:', content);\n  } catch (error) {\n    console.log('Base64 decode failed, using raw content:', error.message);\n    content = input.content; // fallback if not base64\n  }\n} else {\n  console.log('No content field found in input');\n  content = 'No content provided';\n}\n\n// Extract filename safely\nconst filename = input.filename || input.name || 'unknown-file';\n\n// Extract file type\nconst fileType = input.type || input.file_type || input.mimeType || 'unknown';\n\n// Extract size\nconst fileSize = input.size || input.file_size || 0;\n\n// Create document object with pageContent for LangChain compatibility\nconst document = {\n  pageContent: content,\n  metadata: {\n    filename: filename,\n    source: 'idudesRAG-upload',\n    timestamp: input.timestamp || new Date().toISOString(),\n    file_type: fileType,\n    file_size: fileSize,\n    original_input: input // Keep original for debugging\n  }\n};\n\nconsole.log('Final document:', JSON.stringify(document, null, 2));\n\nreturn [{ json: document }];"
      },
      "id": "c9bf028e-09d9-4117-add6-c86a21461a95",
      "name": "PrepDoc",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        -128
      ]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.pageContent }}",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "filename",
                "value": "={{ $json.metadata.filename }}"
              },
              {
                "name": "source",
                "value": "={{ $json.metadata.source }}"
              },
              {
                "name": "file_type",
                "value": "={{ $json.metadata.file_type }}"
              },
              {
                "name": "file_size",
                "value": "={{ $json.metadata.file_size }}"
              },
              {
                "name": "chunk_index",
                "value": "={{ $itemIndex }}"
              },
              {
                "name": "timestamp",
                "value": "={{ $json.metadata.timestamp }}"
              },
              {
                "name": "processing_date",
                "value": "={{ new Date().toISOString() }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        1296,
        80
      ],
      "id": "c6d1e10d-5fc9-454e-92a2-d2989ea03bc8",
      "name": "DocLoader"
    },
    {
      "parameters": {
        "chunkOverlap": 200,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1392,
        288
      ],
      "id": "d8418609-b165-4b4f-9c0e-ba5dccbb1b35",
      "name": "Text Splitter"
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1536,
          "batchSize": 200
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1168,
        128
      ],
      "id": "6edac850-bd37-4882-85e0-3964d10c9e6c",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "EQYdxPEgshiwvESa",
          "name": "ZARAapiKey"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": "document_embeddings",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        1328,
        -128
      ],
      "id": "c442181a-14e8-4df6-b34e-5bba8886a6ed",
      "name": "PGVector Store",
      "credentials": {
        "postgres": {
          "id": "jd4YBgZXwugV4pZz",
          "name": "RailwayPG-idudes"
        }
      }
    }
  ],
  "connections": {
    "Webhook - Document Upload": {
      "main": [
        [
          {
            "node": "PrepDoc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PrepDoc": {
      "main": [
        [
          {
            "node": "PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DocLoader": {
      "ai_document": [
        [
          {
            "node": "PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "DocLoader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Webhook - Document Upload": [
      {
        "headers": {
          "host": "ai.thirdeyediagnostics.com",
          "user-agent": "curl/8.7.1",
          "content-length": "485",
          "accept": "*/*",
          "content-type": "application/json",
          "x-forwarded-for": "83.171.251.200",
          "x-forwarded-host": "ai.thirdeyediagnostics.com",
          "x-forwarded-port": "443",
          "x-forwarded-proto": "https",
          "x-forwarded-server": "19aa899c4cf2",
          "x-real-ip": "83.171.251.200",
          "accept-encoding": "gzip"
        },
        "params": {},
        "query": {},
        "body": {
          "filename": "test-document.txt",
          "content": "VGhpcyBpcyBhIHRlc3QgZG9jdW1lbnQgZm9yIGlkdWRlc1JBRyBwcm9jZXNzaW5nLiBJdCBjb250YWlucyBzYW1wbGUgdGV4dCB0byB2ZXJpZnkgdGhhdCB0aGUgd29ya2Zsb3cgaXMgZnVuY3Rpb25pbmcgcHJvcGVybHkuIFRoaXMgdGV4dCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBjaHVua2VkLCBlbWJlZGRlZCwgYW5kIHN0b3JlZCBpbiB0aGUgUG9zdGdyZVNRTCBkYXRhYmFzZSB3aXRoIHBndmVjdG9yLg==",
          "type": "text/plain",
          "size": 265,
          "timestamp": "2025-01-05T21:15:00.000Z",
          "source": "claude-test"
        },
        "webhookUrl": "https://ai.thirdeyediagnostics.com/webhook/idudesRAG/documents",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4bb33feb86ca4f5fc513a2380388fe9bf2c23463bf38edc4be554b00c909d710"
  }
}